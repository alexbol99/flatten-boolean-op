{"version":3,"sources":["webpack://flatten-boolean-op/webpack/bootstrap","webpack://flatten-boolean-op/./node_modules/flatten-js/dist/flatten.min.js","webpack://flatten-boolean-op/./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","t","e","default","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","[object Object]","this","root","size","tree_walk","keys","push","item","key","output","isEmpty","tree_insert","recalc_max","tree_search","tree_delete","tree_search_interval","forEach","parent","update_max","less_than","left","right","insert_fixup","color","rotate_left","rotate_right","tree_successor","copy_data","delete_fixup","equal_to","not_intersect_left_subtree","intersect","not_intersect_right_subtree","local_minimum","testBlackHeightProperty","Error","Polygon","Point","Segment","Arc","Circle","Line","Ray","h","Vector","a","vector","Distance","distanceTo","projectionOn","length","center","Utils","EQ_0","toArc","start","Math","abs","pc","normalize","multiply","translate","equalTo","end","point2point","dot","u","GE","tangentInStart","cross","point2circle","on","sort","dist_and_segment","point2line","intersectSegment2Segment","point2segment","ps","pe","LT","point2arc","reverse","circle2circle","Number","POSITIVE_INFINITY","edges","shape","max","xmin","xmax","ymin","ymax","merge","box2box_minmax","box","Edge","insert","map","isNil","filter","LE","minmax_tree_process_level","index","minmax_tree_calc_distance","sqrt","low","distance","PlanarSet","minmax_tree","GT","Face","Box","ray_shoot","faces","reduce","vertices","add","delete","next","remove","deleteFace","split","prev","face","clone","addFace","signedArea","INSIDE","BOUNDARY","point2polygon","shape2polygon","shape2planarSet","stroke","strokeWidth","fill","fillRule","svg","toJSON","notIntersect","OUTSIDE","pt","norm","search","edge","x","tangentInEnd","leftTo","EQ","y","Errors","ILLEGAL_PARAMETERS","intersectRay2Segment","intersectRay2Arc","ray","first","last","_box","_orientation","Array","every","points2segments","shapes2face","startAngle","endAngle","counterClockwise","setArcLength","Symbol","iterator","done","append","arc_length","orientation","definiteIntegral","ORIENTATION","NOT_ORIENTABLE","CCW","CW","bv","bvStart","bvEnd","setInclusion","CONTAINS","INTERLACE","overlap","middle","contains","sweep","PI","high","min","lessThan","PIx2","rotate","breakToFunctional","slope","cos","intersectArc2Circle","intersectArc2Arc","arc2circle","arc2line","segment2arc","arc2arc","circularSegmentDefiniteIntegral","circularSegmentArea","sin","arc","distanceToPoint","intersectSegment2Line","intersectSegment2Circle","intersectSegment2Arc","segment2circle","segment2line","segment2segment","incidentTo","segment","intersectCirle2Circle","circle2line","rotate90CCW","rotate90CW","circle","points2norm","standard","invert","intersectLine2Line","intersectLine2Circle","intersectLine2Arc","intersectLine2Box","line","atan2","ZERO_DIVISION","isNaN","point","not_intersect","maximal_val","val_less_than","Set","super","ReferenceError","DP_TOL","version","PI_2","CLIP_INSIDE","CLIP_OUTSIDE","BOOLEAN_UNION","BOOLEAN_INTERSECT","BOOLEAN_SUBTRACT","OVERLAP_SAME","OVERLAP_OPPOSITE","Flatten","NOT_VERTEX","START_VERTEX","END_VERTEX","BooleanOp","operands","res_poly","wrk_poly","op","booleanOpBinary","clip","polygon1","polygon2","wrk_poly_reversed","intersections","getIntersections","sortIntersections","splitByIntersections","int_points1_sorted","int_points2_sorted","filterDuplicatedIntersections","removeNotRelevantNotIntersectedFaces","int_points1","int_points2","initializeInclusionFlags","calculateInclusionFlags","setOverlappingFlags","removeNotRelevantChains","copyWrkToRes","swapLinks","removeOldFaces","restoreFaces","edge1","resp","edge2","ip","addToIntPoints","int_points","id","len","is_vertex","edge_before","edge_after","undefined","getSortedArray","faceMap","Map","has","set","faceId","slice","compareFn","ip1","ip2","polygon","int_point","newEdge","addVertex","do_squeeze","int_point_ref1","int_point_ref2","int_point_cur1","int_point_cur2","poly1","poly2","toBeDeleted","find","rel","getRelation","cur_face","first_int_point_in_face","next_int_point1","num_int_points","cur_int_point1","edge_from1","edge_to1","cur_int_point2","next_int_point2","edge_from2","edge_to2","flag","edge2edgeOverlappingFlag","shape1","shape2","is_res_polygon","int_point_next","int_point_current","edge_from","edge_to","removeChain","res_polygon","wrk_polygon","int_point1","int_point2","other_int_points","int_point_tmp"],"mappings":"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","file":"flatten-boolean-op.test.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports=function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=20)}([function(t,e,n){\"use strict\";t.exports={RB_TREE_COLOR_RED:0,RB_TREE_COLOR_BLACK:1}},function(t,e,n){\"use strict\";let i=n(16),{RB_TREE_COLOR_RED:r,RB_TREE_COLOR_BLACK:s}=n(0),o=new i;t.exports=class{constructor(){this.root=null}get size(){let t=0;return this.tree_walk(this.root,()=>t++),t}get keys(){let t=[];return this.tree_walk(this.root,e=>t.push(e.item.key.output())),t}get isEmpty(){return null==this.root||this.root==o}insert(t,e=t){if(void 0===t)return;let n=new i(t,e,o,o,null,r);return this.tree_insert(n),this.recalc_max(n),n}exist(t,e){let n=new i(t,e);return!!this.tree_search(this.root,n)}remove(t,e){let n=new i(t,e),r=this.tree_search(this.root,n);return r&&this.tree_delete(r),r}search(t){let e=new i(t),n=[];this.tree_search_interval(this.root,e,n);let r=[];return n.forEach(t=>{t.item.value?r.push(t.item.value):r.push(t.item.key.output())},[]),r}forEach(t){this.tree_walk(this.root,e=>t(e.item.key,e.item.value))}recalc_max(t){let e=t;for(;null!=e.parent;)e.parent.update_max(),e=e.parent}tree_insert(t){let e=this.root,n=null;if(null==this.root||this.root==o)this.root=t;else{for(;e!=o;)n=e,e=t.less_than(e)?e.left:e.right;t.parent=n,t.less_than(n)?n.left=t:n.right=t}this.insert_fixup(t)}insert_fixup(t){let e,n;for(e=t;e!=this.root&&e.parent.color==r;)e.parent==e.parent.parent.left?(n=e.parent.parent.right).color==r?(e.parent.color=s,n.color=s,e.parent.parent.color=r,e=e.parent.parent):(e==e.parent.right&&(e=e.parent,this.rotate_left(e)),e.parent.color=s,e.parent.parent.color=r,this.rotate_right(e.parent.parent)):(n=e.parent.parent.left).color==r?(e.parent.color=s,n.color=s,e.parent.parent.color=r,e=e.parent.parent):(e==e.parent.left&&(e=e.parent,this.rotate_right(e)),e.parent.color=s,e.parent.parent.color=r,this.rotate_left(e.parent.parent));this.root.color=s}tree_delete(t){let e,n;(n=(e=t.left==o||t.right==o?t:this.tree_successor(t)).left!=o?e.left:e.right)!=o&&(n.parent=e.parent),e==this.root?this.root=n:(e==e.parent.left?e.parent.left=n:e.parent.right=n,e.parent.update_max()),this.recalc_max(n),e!=t&&(t.copy_data(e),t.update_max(),this.recalc_max(t)),n!=o&&e.color==s&&this.delete_fixup(n)}delete_fixup(t){let e,n=t;for(;n!=this.root&&null!=n.parent&&n.color==s;)n==n.parent.left?((e=n.parent.right).color==r&&(e.color=s,n.parent.color=r,this.rotate_left(n.parent),e=n.parent.right),e.left.color==s&&e.right.color==s?(e.color=r,n=n.parent):(e.right.color==s&&(e.color=r,e.left.color=s,this.rotate_right(e),e=n.parent.right),e.color=n.parent.color,n.parent.color=s,e.right.color=s,this.rotate_left(n.parent),n=this.root)):((e=n.parent.left).color==r&&(e.color=s,n.parent.color=r,this.rotate_right(n.parent),e=n.parent.left),e.left.color==s&&e.right.color==s?(e.color=r,n=n.parent):(e.left.color==s&&(e.color=r,e.right.color=s,this.rotate_left(e),e=n.parent.left),e.color=n.parent.color,n.parent.color=s,e.left.color=s,this.rotate_right(n.parent),n=this.root));n.color=s}tree_search(t,e){if(null!=t&&t!=o)return e.equal_to(t)?t:e.less_than(t)?this.tree_search(t.left,e):this.tree_search(t.right,e)}tree_search_interval(t,e,n){null!=t&&t!=o&&(t.left==o||t.not_intersect_left_subtree(e)||this.tree_search_interval(t.left,e,n),t.intersect(e)&&n.push(t),t.right==o||t.not_intersect_right_subtree(e)||this.tree_search_interval(t.right,e,n))}local_minimum(t){let e=t;for(;null!=e.left&&e.left!=o;)e=e.left;return e}local_maximum(t){let e=t;for(;null!=e.right&&e.right!=o;)e=e.right;return e}tree_successor(t){let e,n,i;if(t.right!=o)e=this.local_minimum(t.right);else{for(n=t,i=t.parent;null!=i&&i.right==n;)n=i,i=i.parent;e=i}return e}rotate_left(t){let e=t.right;t.right=e.left,e.left!=o&&(e.left.parent=t),e.parent=t.parent,t==this.root?this.root=e:t==t.parent.left?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e,null!=t&&t!=o&&t.update_max(),null!=(e=t.parent)&&e!=o&&e.update_max()}rotate_right(t){let e=t.left;t.left=e.right,e.right!=o&&(e.right.parent=t),e.parent=t.parent,t==this.root?this.root=e:t==t.parent.left?t.parent.left=e:t.parent.right=e,e.right=t,t.parent=e,null!=t&&t!=o&&t.update_max(),null!=(e=t.parent)&&e!=o&&e.update_max()}tree_walk(t,e){null!=t&&t!=o&&(this.tree_walk(t.left,e),e(t),this.tree_walk(t.right,e))}testRedBlackProperty(){let t=!0;return this.tree_walk(this.root,function(e){e.color==r&&(e.left.color==s&&e.right.color==s||(t=!1))}),t}testBlackHeightProperty(t){let e=0,n=0,i=0;if(t.color==s&&e++,(n=t.left!=o?this.testBlackHeightProperty(t.left):1)!=(i=t.right!=o?this.testBlackHeightProperty(t.right):1))throw new Error(\"Red-black height property violated\");return e+=n}}},function(t,e,n){\"use strict\";let i=n(1);t.exports=function(t){let{Polygon:e,Point:n,Segment:r,Arc:s,Circle:o,Line:l,Ray:h,Vector:a}=t,{vector:c}=t;t.Distance=class e{static point2point(t,e){return t.distanceTo(e)}static point2line(t,e){let n=t.projectionOn(e);return[c(t,n).length,new r(t,n)]}static point2circle(e,n){let[i,s]=e.distanceTo(n.center);if(t.Utils.EQ_0(i))return[n.r,new r(e,n.toArc().start)];{let t=Math.abs(i-n.r),s=c(n.pc,e).normalize().multiply(n.r),o=n.pc.translate(s);return[t,new r(e,o)]}}static point2segment(n,i){if(i.start.equalTo(i.end))return e.point2point(n,i.start);let s,o,l=new t.Vector(i.start,i.end),h=new t.Vector(i.start,n),a=new t.Vector(i.end,n),c=l.dot(h),u=-l.dot(a);if(t.Utils.GE(c,0)&&t.Utils.GE(u,0)){let t=i.tangentInStart();return s=Math.abs(t.cross(h)),o=i.start.translate(t.multiply(t.dot(h))),[s,new r(n,o)]}return c<0?n.distanceTo(i.start):n.distanceTo(i.end)}static point2arc(n,i){let r,s,o=new t.Circle(i.pc,i.r),l=[];return[r,s]=e.point2circle(n,o),s.end.on(i)&&l.push(e.point2circle(n,o)),l.push(e.point2point(n,i.start)),l.push(e.point2point(n,i.end)),e.sort(l),l[0]}static segment2line(t,n){let i=t.intersect(n);return i.length>0?[0,new r(i[0],i[0])]:(dist_and_segment.push(e.point2line(t.start,n)),dist_and_segment.push(e.point2line(t.end,n)),e.sort(dist_and_segment),dist_and_segment[0])}static segment2segment(t,n){let i=r.intersectSegment2Segment(t,n);if(i.length>0)return[0,new r(i[0],i[0])];let s=[];return s.push(e.point2segment(n.start,t)),s.push(e.point2segment(n.end,t)),s.push(e.point2segment(t.start,n)),s.push(e.point2segment(t.end,n)),e.sort(s),s[0]}static segment2circle(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Line(n.ps,n.pe),[l,h]=e.point2line(i.center,o);if(t.Utils.GE(l,i.r)&&h.end.on(n))return e.point2circle(h.end,i);{let[r,s]=e.point2circle(n.start,i),[o,l]=e.point2circle(n.end,i);return t.Utils.LT(r,o)?[r,s]:[o,l]}}static segment2arc(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Line(n.ps,n.pe),l=new t.Circle(i.pc,i.r),[h,a]=e.point2line(l.center,o);if(t.Utils.GE(h,l.r)&&a.end.on(n)){let[t,n]=e.point2circle(a.end,l);if(n.end.on(i))return[t,n]}let c,u,p=[];return p.push(e.point2arc(n.start,i)),p.push(e.point2arc(n.end,i)),[c,u]=e.point2segment(i.start,n),p.push([c,u.reverse()]),[c,u]=e.point2segment(i.end,n),p.push([c,u.reverse()]),e.sort(p),p[0]}static circle2circle(t,n){let i=t.intersect(n);if(i.length>0)return[0,new r(i[0],i[0])];if(t.center.equalTo(n.center)){let i=t.toArc(),r=n.toArc();return e.point2point(i.start,r.start)}{let i=new l(t.center,n.center),r=i.intersect(t),s=i.intersect(n),o=[];return o.push(e.point2point(r[0],s[0])),o.push(e.point2point(r[0],s[1])),o.push(e.point2point(r[1],s[0])),o.push(e.point2point(r[1],s[1])),e.sort(o),o[0]}}static circle2line(t,n){let i=t.intersect(n);if(i.length>0)return[0,new r(i[0],i[0])];let[s,o]=e.point2line(t.center,n),[l,h]=e.point2circle(o.end,t);return[l,h=h.reverse()]}static arc2line(n,i){let s=i.intersect(n);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Circle(n.center,n.r),[l,h]=e.point2line(o.center,i);if(!t.Utils.GE(l,o.r)){let t=[];return t.push(e.point2line(n.start,i)),t.push(e.point2line(n.end,i)),e.sort(t),t[0]}{let[t,i]=e.point2circle(h.end,o);if(i.end.on(n))return[t,i]}}static arc2circle(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Circle(n.center,n.r),[l,h]=e.circle2circle(o,i);if(h.start.on(n))return[l,h];{let t=[];return t.push(e.point2circle(n.start,i)),t.push(e.point2circle(n.end,i)),e.sort(t),t[0]}}static arc2arc(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Circle(n.center,n.r),l=new t.Circle(i.center,i.r),[h,a]=e.circle2circle(o,l);if(a.start.on(n)&&a.end.on(i))return[h,a];{let t,r,s=[];return[t,r]=e.point2arc(n.start,i),r.end.on(i)&&s.push([t,r]),[t,r]=e.point2arc(n.end,i),r.end.on(i)&&s.push([t,r]),[t,r]=e.point2arc(i.start,n),r.end.on(n)&&s.push([t,r.reverse()]),[t,r]=e.point2arc(i.end,n),r.end.on(n)&&s.push([t,r.reverse()]),[t,r]=e.point2point(n.start,i.start),s.push([t,r]),[t,r]=e.point2point(n.start,i.end),s.push([t,r]),[t,r]=e.point2point(n.end,i.start),s.push([t,r]),[t,r]=e.point2point(n.end,i.end),s.push([t,r]),e.sort(s),s[0]}}static point2polygon(n,i){let s=[Number.POSITIVE_INFINITY,new r];for(let o of i.edges){let[i,l]=o.shape instanceof r?e.point2segment(n,o.shape):e.point2arc(n,o.shape);t.Utils.LT(i,s[0])&&(s=[i,l])}return s}static shape2polygon(e,n){let i=[Number.POSITIVE_INFINITY,new r];for(let r of n.edges){let[n,s]=e.distanceTo(r.shape);t.Utils.LT(n,i[0])&&(i=[n,s])}return i}static polygon2polygon(e,n){let i=[Number.POSITIVE_INFINITY,new t.Segment];for(let r of e.edges)for(let e of n.edges){let[n,s]=r.shape.distanceTo(e.shape);t.Utils.LT(n,i[0])&&(i=[n,s])}return i}static box2box_minmax(t,e){let n=Math.max(Math.max(t.xmin-e.xmax,0),Math.max(e.xmin-t.xmax,0)),i=Math.max(Math.max(t.ymin-e.ymax,0),Math.max(e.ymin-t.ymax,0)),r=n*n+i*i,s=t.merge(e),o=s.xmax-s.xmin,l=s.ymax-s.ymin;return[r,o*o+l*l]}static minmax_tree_process_level(n,i,r,s){let o,l;for(let h of i)[o,l]=e.box2box_minmax(n.box,h.item.key),h.item.value instanceof t.Edge?s.insert([o,l],h.item.value.shape):s.insert([o,l],h.item.value),t.Utils.LT(l,r)&&(r=l);if(0===i.length)return r;let h=i.map(t=>t.left.isNil()?void 0:t.left).filter(t=>void 0!==t),a=i.map(t=>t.right.isNil()?void 0:t.right).filter(t=>void 0!==t),c=[...h,...a].filter(i=>{let[s,o]=e.box2box_minmax(n.box,i.max);return t.Utils.LE(s,r)});return r=e.minmax_tree_process_level(n,c,r,s)}static minmax_tree(t,n,r){let s=new i,o=[n.index.root],l=r<Number.POSITIVE_INFINITY?r*r:Number.POSITIVE_INFINITY;return l=e.minmax_tree_process_level(t,o,l,s),s}static minmax_tree_calc_distance(n,i,r){let s,o;if(null!=i&&!i.isNil()){if([s,o]=e.minmax_tree_calc_distance(n,i.left,r),o)return[s,o];if(t.Utils.LT(s[0],Math.sqrt(i.item.key.low)))return[s,!0];let[l,h]=e.distance(n,i.item.value);return t.Utils.LT(l,s[0])&&(s=[l,h]),[s,o]=e.minmax_tree_calc_distance(n,i.right,s),[s,o]}return[r,!1]}static shape2planarSet(n,i,r=Number.POSITIVE_INFINITY){let s=[r,new t.Segment],o=!1;if(i instanceof t.PlanarSet){let t=e.minmax_tree(n,i,r);[s,o]=e.minmax_tree_calc_distance(n,t.root,s)}return s}static sort(e){e.sort((e,n)=>t.Utils.LT(e[0],n[0])?-1:t.Utils.GT(e[0],n[0])?1:0)}static distance(t,e){return t.distanceTo(e)}}}},function(t,e,n){\"use strict\";t.exports=function(t){let{Edge:e,Face:n,PlanarSet:i,Box:r}=t,{ray_shoot:s}=t;t.Polygon=class e{constructor(){this.faces=new i,this.edges=new i}get box(){return[...this.faces].reduce((t,e)=>t.merge(e.box),new r)}get vertices(){return[...this.edges].map(t=>t.start)}addFace(...t){let e=new n(this,...t);return this.faces.add(e),e}deleteFace(t){for(let e of t){this.edges.delete(e)}return this.faces.delete(t)}removeChain(t,e,n){if(n.next!==e){for(let i=e;i!==n.next;i=i.next)if(t.remove(this.edges,i),t.isEmpty()){this.deleteFace(t);break}}else this.deleteFace(t)}addVertex(e,n){let i=n.shape.split(e);if(i.length<2)return;let r=new t.Edge(i[0]),s=n.prev;return n.face.insert(this.edges,r,s),this.edges.delete(n),n.shape=i[1],this.edges.add(n),r}reverse(){for(let t of this.faces)t.reverse();return this}clone(){let t=new e;for(let e of this.faces){let n=[];for(let t of e)n.push(t.shape.clone());t.addFace(n)}return t}area(){let t=[...this.faces].reduce((t,e)=>t+e.signedArea(),0);return Math.abs(t)}contains(e){let n=s(this,e);return n==t.INSIDE||n==t.BOUNDARY}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2polygon(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle||e instanceof t.Line||e instanceof t.Segment||e instanceof t.Arc){let[t,i]=n.shape2polygon(e,this);return[t,i=i.reverse()]}if(e instanceof t.Polygon){let i,r,s=[Number.POSITIVE_INFINITY,new t.Segment];for(let o of this.edges){let l=s[0];[i,r]=n.shape2planarSet(o.shape,e.edges,l),t.Utils.LT(i,l)&&(s=[i,r])}return s}}svg(t={stroke:\"black\",strokeWidth:\"3\",fill:\"lightcyan\",fillRule:\"evenodd\"}){let{stroke:e,strokeWidth:n,fill:i,fillRule:r}=t,s=`\\n<path stroke=\"${e}\" stroke-width=\"${n}\" fill=\"${i}\" fill-rule=\"${r}\" d=\"`;for(let t of this.faces)s+=t.svg();return s+='\">\\n</path>'}toJSON(){return[...this.faces].map(t=>t.toJSON())}}}},function(t,e,n){\"use strict\";t.exports=function(t){let{Polygon:e,Point:n,Segment:i,Arc:r,Line:s,Ray:o}=t;t.ray_shoot=function(e,n){let r=void 0;if(e.box.notIntersect(n.box))return t.OUTSIDE;let l=new o(n),h=new s(l.pt,l.norm),a=e.edges.search(l.box);if(0==a.length)return t.OUTSIDE;let c=[];for(let e of a)for(let i of l.intersect(e.shape)){if(i.equalTo(n))return t.BOUNDARY;c.push({pt:i,edge:e})}c.sort((e,n)=>t.Utils.LT(e.pt.x,n.pt.x)?-1:t.Utils.GT(e.pt.x,n.pt.x)?1:0);let u=0;for(let e=0;e<c.length;e++){let n=c[e];if(n.pt.equalTo(n.edge.shape.start)){if(e>0&&n.pt.equalTo(c[e-1].pt)&&n.edge.prev===c[e-1].edge)continue;let t=n.edge.prev.shape.tangentInEnd(),i=n.pt.translate(t),r=n.edge.shape.tangentInStart(),s=n.pt.translate(r),o=i.leftTo(h),l=s.leftTo(h);(o&&!l||!o&&l)&&u++}else if(n.pt.equalTo(n.edge.shape.end)){if(e>0&&n.pt.equalTo(c[e-1].pt)&&n.edge.next===c[e-1].edge)continue;let t=n.edge.next.shape.tangentInStart(),i=n.pt.translate(t),r=n.edge.shape.tangentInEnd(),s=n.pt.translate(r),o=i.leftTo(h),l=s.leftTo(h);(o&&!l||!o&&l)&&u++}else if(n.edge.shape instanceof i)u++;else{let e=n.edge.shape.box;t.Utils.EQ(n.pt.y,e.ymin)||t.Utils.EQ(n.pt.y,e.ymax)||u++}}return r=u%2==1?t.INSIDE:t.OUTSIDE}}},function(t,e,n){\"use strict\";t.exports=function(t){let{Point:e,Segment:n,Line:i,Circle:r,Arc:s,Box:o,Vector:l}=t;t.Ray=class r{constructor(...n){if(this.pt=new e,0!=n.length)if(1==n.length&&n[0]instanceof e)this.pt=n[0].clone();else{if(2!=n.length||\"number\"!=typeof n[0]||\"number\"!=typeof n[1])throw t.Errors.ILLEGAL_PARAMETERS;this.pt=new e(n[0],n[1])}}clone(){return new r(this.pt)}get box(){return new o(this.pt.x,this.pt.y,Number.POSITIVE_INFINITY,this.pt.y)}get start(){return this.pt}get norm(){return new l(0,1)}intersect(t){return t instanceof n?this.intersectRay2Segment(this,t):t instanceof s?this.intersectRay2Arc(this,t):void 0}intersectRay2Segment(e,n){let r=[];if(e.box.notIntersect(n.box))return r;let s=new i(e.start,e.norm),o=s.intersect(n);for(let n of o)t.Utils.GE(n.x,e.start.x)&&r.push(n);return 2==o.length&&1==r.length&&e.start.on(s)&&r.push(e.start),r}intersectRay2Arc(e,n){let r=[];if(e.box.notIntersect(n.box))return r;let s=new i(e.start,e.norm).intersect(n);for(let n of s)t.Utils.GE(n.x,e.start.x)&&r.push(n);return r}},t.ray=((...e)=>new t.Ray(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){let{Point:e,Segment:n,Arc:i,Box:r,Edge:s}=t;t.Face=class r{constructor(t,...o){if(this.first,this.last,this._box=void 0,this._orientation=void 0,0!=o.length){if(1==o.length)if(o[0]instanceof Array){let s=o[0];if(0==s.length)return;if(s.every(t=>t instanceof e)){let e=r.points2segments(s);this.shapes2face(t.edges,e)}else if(s.every(t=>t instanceof n||t instanceof i))this.shapes2face(t.edges,s);else if(s.every(t=>\"segment\"===t.name||\"arc\"===t.name)){let r=[];for(let t of s){let s;s=\"segment\"===t.name?new n(t.ps.x,t.ps.y,t.pe.x,t.pe.y):new i(new e(t.pc.x,t.pc.y),t.r,t.startAngle,t.endAngle,t.counterClockwise),r.push(s)}this.shapes2face(t.edges,r)}}else if(o[0]instanceof r){let e=o[0];this.first=e.first,this.last=e.last;for(let n of e)t.edges.add(n)}2==o.length&&o[0]instanceof s&&o[1]instanceof s&&(this.first=o[0],this.last=o[1],this.last.next=this.first,this.first.prev=this.last,this.setArcLength())}}[Symbol.iterator](){let t=void 0;return{next:()=>{let e=t||this.first,n=!this.first||!!t&&t===this.first;return t=e?e.next:void 0,{value:e,done:n}}}}get edges(){let t=[];for(let e of this)t.push(e);return t}get size(){let t=0;for(let e of this)t++;return t}static points2segments(t){let e=[];for(let i=0;i<t.length;i++)e.push(new n(t[i],t[(i+1)%t.length]));return e}shapes2face(t,e){for(let n of e){let e=new s(n);this.append(t,e)}}isEmpty(){return void 0===this.first&&void 0===this.last}append(t,e){void 0===this.first?(e.prev=e,e.next=e,this.first=e,this.last=e,e.arc_length=0):(e.prev=this.last,this.last.next=e,this.last=e,this.last.next=this.first,this.first.prev=this.last,e.arc_length=e.prev.arc_length+e.prev.length),e.face=this,t.add(e)}insert(t,e,n){if(void 0===this.first)edge.prev=e,edge.next=e,this.first=e,this.last=e;else{let t=n.next;n.next=e,t.prev=e,e.prev=n,e.next=t,this.last===n&&(this.first=e)}e.face=this,t.add(e)}remove(t,e){e===this.first&&e===this.last?(this.first=void 0,this.last=void 0):(e.prev.next=e.next,e.next.prev=e.prev,e===this.first&&(this.first=e.next),e===this.last&&(this.last=e.prev)),t.delete(e)}reverse(){let t=[],e=this.last;do{e.shape=e.shape.reverse(),t.push(e),e=e.prev}while(e!==this.last);this.first=void 0,this.last=void 0;for(let e of t)void 0===this.first?(e.prev=e,e.next=e,this.first=e,this.last=e,e.arc_length=0):(e.prev=this.last,this.last.next=e,this.last=e,this.last.next=this.first,this.first.prev=this.last,e.arc_length=e.prev.arc_length+e.prev.length);void 0!==this._orientation&&(this._orientation=void 0,this._orientation=this.orientation())}setArcLength(){for(let t of this)t===this.first?t.arc_length=0:t.arc_length=t.prev.arc_length+t.prev.length,t.face=this}area(){return Math.abs(this.signedArea())}signedArea(){let t=0;for(let e of this)t+=e.shape.definiteIntegral(this.box.ymin);return t}orientation(){if(void 0===this._orientation){let e=this.signedArea();t.Utils.EQ_0(e)?this._orientation=t.ORIENTATION.NOT_ORIENTABLE:t.Utils.LT(e,0)?this._orientation=t.ORIENTATION.CCW:this._orientation=t.ORIENTATION.CW}return this._orientation}get box(){if(void 0===this._box){let e=new t.Box;for(let t of this)e=e.merge(t.box);this._box=e}return this._box}getRelation(e){this.first.bv=this.first.bvStart=this.first.bvEnd=void 0;let n=this.first.setInclusion(e),i=e.faces.search(this.box);if(0===i.length)return n;{let r=new t.Polygon;r.addFace(this);let s=0;for(let e of i){e.first.bv=e.first.bvStart=e.first.bvEnd=void 0,e.first.setInclusion(r)===t.INSIDE&&s++}if(n===t.OUTSIDE)return 0===s?t.OUTSIDE:s===i.length&&i.length===e.faces.size?t.CONTAINS:t.INTERLACE;if(n===t.INSIDE)return 0===s?t.INSIDE:t.INTERLACE}}toJSON(){return this.edges.map(t=>t.toJSON())}svg(){let t=`\\nM${this.first.start.x},${this.first.start.y}`;for(let e of this)t+=e.svg();return t+=\" z\"}}}},function(t,e){t.exports=function(t){t.Edge=class{constructor(t){this.shape=t,this.next,this.prev,this.face,this.arc_length=0,this.bvStart=void 0,this.bvEnd=void 0,this.bv=void 0,this.overlap=void 0}get start(){return this.shape.start}get end(){return this.shape.end}get length(){return this.shape.length}get box(){return this.shape.box}middle(){return this.shape.middle()}contains(t){return this.shape.contains(t)}setInclusion(e){if(void 0!==this.bv)return this.bv;if(void 0===this.bvStart&&(this.bvStart=t.ray_shoot(e,this.start)),void 0===this.bvEnd&&(this.bvEnd=t.ray_shoot(e,this.end)),this.bvStart===t.OUTSIDE||this.bvEnd==t.OUTSIDE)this.bv=t.OUTSIDE;else if(this.bvStart===t.INSIDE||this.bvEnd==t.INSIDE)this.bv=t.INSIDE;else{let n=t.ray_shoot(e,this.middle());this.bv=n}return this.bv}svg(){if(this.shape instanceof t.Segment)return` L${this.shape.end.x},${this.shape.end.y}`;if(this.shape instanceof t.Arc){let e,n=this.shape,i=n.counterClockwise?\"1\":\"0\";if(t.Utils.EQ(n.sweep,2*Math.PI)){let r=n.counterClockwise?1:-1,s=new t.Arc(n.pc,n.r,n.startAngle,n.startAngle+r*Math.PI,n.counterClockwise),o=new t.Arc(n.pc,n.r,n.startAngle+r*Math.PI,n.endAngle,n.counterClockwise);return e=\"0\",` A${s.r},${s.r} 0 ${e},${i} ${s.end.x},${s.end.y}\\n                    A${o.r},${o.r} 0 ${e},${i} ${o.end.x},${o.end.y}`}return e=n.sweep<=Math.PI?\"0\":\"1\",` A${n.r},${n.r} 0 ${e},${i} ${n.end.x},${n.end.y}`}}toJSON(){let e=this.shape.clone();return e.name=this.shape instanceof t.Segment?\"segment\":\"arc\",e}}}},function(t,e,n){\"use strict\";t.exports=function(t){t.Box=class e{constructor(t,e,n,i){this.xmin=t,this.ymin=e,this.xmax=n,this.ymax=i}clone(){return new e(this.xmin,this.ymin,this.xmax,this.ymax)}get low(){return new t.Point(this.xmin,this.ymin)}get high(){return new t.Point(this.xmax,this.ymax)}get max(){return this.clone()}notIntersect(t){return this.xmax<t.xmin||this.xmin>t.xmax||this.ymax<t.ymin||this.ymin>t.ymax}intersect(t){return!this.notIntersect(t)}merge(t){return new e(void 0===this.xmin?t.xmin:Math.min(this.xmin,t.xmin),void 0===this.ymin?t.ymin:Math.min(this.ymin,t.ymin),void 0===this.xmax?t.xmax:Math.max(this.xmax,t.xmax),void 0===this.ymax?t.ymax:Math.max(this.ymax,t.ymax))}less_than(t){return!!this.low.lessThan(t.low)||!(!this.low.equalTo(t.low)||!this.high.lessThan(t.high))}equal_to(t){return this.low.equalTo(t.low)&&this.high.equalTo(t.high)}output(){return this.clone()}maximal_val(t,e){return t.merge(e)}val_less_than(t,e){return t.lessThan(e)}set(t,e,n,i){this.xmin=t,this.ymin=e,this.xmax=n,this.ymax=i}}}},function(t,e,n){\"use strict\";t.exports=function(t){t.Arc=class e{constructor(e=new t.Point,n=1,i=0,r=2*Math.PI,s=!0){this.pc=e.clone(),this.r=n,this.startAngle=i,this.endAngle=r,this.counterClockwise=s}clone(){return new t.Arc(this.pc.clone(),this.r,this.startAngle,this.endAngle,this.counterClockwise)}get sweep(){if(t.Utils.EQ(this.startAngle,this.endAngle))return 0;if(t.Utils.EQ(Math.abs(this.startAngle-this.endAngle),t.PIx2))return t.PIx2;let e;return e=this.counterClockwise?t.Utils.GT(this.endAngle,this.startAngle)?this.endAngle-this.startAngle:this.endAngle-this.startAngle+t.PIx2:t.Utils.GT(this.startAngle,this.endAngle)?this.startAngle-this.endAngle:this.startAngle-this.endAngle+t.PIx2,t.Utils.GT(e,t.PIx2)&&(e-=t.PIx2),t.Utils.LT(e,0)&&(e+=t.PIx2),e}get start(){return new t.Point(this.pc.x+this.r,this.pc.y).rotate(this.startAngle,this.pc)}get end(){return new t.Point(this.pc.x+this.r,this.pc.y).rotate(this.endAngle,this.pc)}get center(){return this.pc.clone()}get vertices(){return[this.start.clone(),this.end.clone()]}get length(){return Math.abs(this.sweep*this.r)}get box(){let e=this.breakToFunctional().reduce((t,e)=>t.merge(e.start.box),new t.Box);return e=e.merge(this.end.box)}contains(e){if(!t.Utils.EQ(this.pc.distanceTo(e)[0],this.r))return!1;if(e.equalTo(this.start))return!0;let n=new t.Vector(this.pc,e).slope,i=new t.Arc(this.pc,this.r,this.startAngle,n,this.counterClockwise);return t.Utils.LE(i.length,this.length)}split(e){if(!this.contains(e))return[];if(t.Utils.EQ_0(this.sweep))return[this.clone()];if(this.start.equalTo(e)||this.end.equalTo(e))return[this.clone()];let n=new t.Vector(this.pc,e).slope;return[new t.Arc(this.pc,this.r,this.startAngle,n,this.counterClockwise),new t.Arc(this.pc,this.r,n,this.endAngle,this.counterClockwise)]}middle(){let e=this.counterClockwise===t.CCW?this.startAngle+this.sweep/2:this.startAngle-this.sweep/2;return new t.Arc(this.pc,this.r,this.startAngle,e,this.counterClockwise).end}chordHeight(){return(1-Math.cos(Math.abs(this.sweep/2)))*this.r}intersect(n){return n instanceof t.Line?n.intersect(this):n instanceof t.Circle?e.intersectArc2Circle(this,n):n instanceof t.Segment?n.intersect(this):n instanceof t.Arc?e.intersectArc2Arc(this,n):void 0}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2arc(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle){let[t,i]=n.arc2circle(this,e);return[t,i]}if(e instanceof t.Line){let[t,i]=n.arc2line(this,e);return[t,i]}if(e instanceof t.Segment){let[t,i]=n.segment2arc(e,this);return[t,i=i.reverse()]}if(e instanceof t.Arc){let[t,i]=n.arc2arc(this,e);return[t,i]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}if(e instanceof t.PlanarSet){let[t,i]=n.shape2planarSet(this,e);return[t,i]}}breakToFunctional(){let e=[],n=[0,Math.PI/2,2*Math.PI/2,3*Math.PI/2],i=[this.pc.translate(this.r,0),this.pc.translate(0,this.r),this.pc.translate(-this.r,0),this.pc.translate(0,-this.r)],r=[];for(let e=0;e<4;e++)i[e].on(this)&&r.push(new t.Arc(this.pc,this.r,this.startAngle,n[e],this.counterClockwise));if(0==r.length)e.push(this.clone());else{r.sort((t,e)=>t.length-e.length);for(let n=0;n<r.length;n++){let i,s=e.length>0?e[e.length-1]:void 0;i=s?new t.Arc(this.pc,this.r,s.endAngle,r[n].endAngle,this.counterClockwise):new t.Arc(this.pc,this.r,this.startAngle,r[n].endAngle,this.counterClockwise),t.Utils.EQ_0(i.length)||e.push(i.clone())}let n,i=e.length>0?e[e.length-1]:void 0;n=i?new t.Arc(this.pc,this.r,i.endAngle,this.endAngle,this.counterClockwise):new t.Arc(this.pc,this.r,this.startAngle,this.endAngle,this.counterClockwise),t.Utils.EQ_0(n.length)||e.push(n.clone())}return e}tangentInStart(){let e=new t.Vector(this.pc,this.start),n=this.counterClockwise?Math.PI/2:-Math.PI/2;return e.rotate(n).normalize()}tangentInEnd(){let e=new t.Vector(this.pc,this.end),n=this.counterClockwise?-Math.PI/2:Math.PI/2;return e.rotate(n).normalize()}reverse(){return new e(this.pc,this.r,this.endAngle,this.startAngle,!this.counterClockwise)}static intersectArc2Arc(e,n){var i=[];if(e.box.notIntersect(n.box))return i;if(e.pc.equalTo(n.pc)&&t.Utils.EQ(e.r,n.r)){let t;return(t=e.start).on(n)&&i.push(t),(t=e.end).on(n)&&i.push(t),(t=n.start).on(e)&&i.push(t),(t=n.end).on(e)&&i.push(t),i}let r=new t.Circle(e.pc,e.r),s=new t.Circle(n.pc,n.r),o=r.intersect(s);for(let t of o)t.on(e)&&t.on(n)&&i.push(t);return i}static intersectArc2Circle(e,n){let i=[];if(e.box.notIntersect(n.box))return i;if(n.pc.equalTo(e.pc)&&t.Utils.EQ(n.r,e.r))return i.push(e.start),i.push(e.end),i;let r=n,s=new t.Circle(e.pc,e.r),o=r.intersect(s);for(let t of o)t.on(e)&&i.push(t);return i}definiteIntegral(t=0){return this.breakToFunctional().reduce((e,n)=>e+n.circularSegmentDefiniteIntegral(t),0)}circularSegmentDefiniteIntegral(e){let n=new t.Line(this.start,this.end),i=this.pc.leftTo(n),r=new t.Segment(this.start,this.end).definiteIntegral(e),s=this.circularSegmentArea();return i?r-s:r+s}circularSegmentArea(){return.5*this.r*this.r*(this.sweep-Math.sin(this.sweep))}svg(e={stroke:\"black\",strokeWidth:\"3\",fill:\"none\"}){let n=this.sweep<=Math.PI?\"0\":\"1\",i=this.counterClockwise?\"1\":\"0\",{stroke:r,strokeWidth:s,fill:o}=e;if(t.Utils.EQ(this.sweep,2*Math.PI)){return new t.Circle(this.pc,this.r).svg(e)}return`\\n<path d=\"M${this.start.x},${this.start.y}\\n                             A${this.r},${this.r} 0 ${n},${i} ${this.end.x},${this.end.y}\"\\n                    stroke=\"${r}\" stroke-width=\"${s}\" fill=\"${o}\"/>`}},t.arc=((...e)=>new t.Arc(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){t.Segment=class e{constructor(...e){if(this.ps=new t.Point,this.pe=new t.Point,0!=e.length){if(1==e.length&&e[0]instanceof Array&&4==e[0].length){let n=e[0];return this.ps=new t.Point(n[0],n[1]),void(this.pe=new t.Point(n[2],n[3]))}if(2==e.length&&e[0]instanceof t.Point&&e[1]instanceof t.Point)return this.ps=e[0].clone(),void(this.pe=e[1].clone());if(4==e.length)return this.ps=new t.Point(e[0],e[1]),void(this.pe=new t.Point(e[2],e[3]));throw t.Errors.ILLEGAL_PARAMETERS}}clone(){return new t.Segment(this.start,this.end)}get start(){return this.ps}get end(){return this.pe}get vertices(){return[this.ps.clone(),this.pe.clone()]}get length(){return this.start.distanceTo(this.end)[0]}get slope(){return new t.Vector(this.start,this.end).slope}get box(){return new t.Box(Math.min(this.start.x,this.end.x),Math.min(this.start.y,this.end.y),Math.max(this.start.x,this.end.x),Math.max(this.start.y,this.end.y))}contains(e){return t.Utils.EQ_0(this.distanceToPoint(e))}intersect(n){return n instanceof t.Line?e.intersectSegment2Line(this,n):n instanceof t.Segment?e.intersectSegment2Segment(this,n):n instanceof t.Circle?e.intersectSegment2Circle(this,n):n instanceof t.Arc?e.intersectSegment2Arc(this,n):void 0}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2segment(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle){let[t,i]=n.segment2circle(this,e);return[t,i]}if(e instanceof t.Line){let[t,i]=n.segment2line(this,e);return[t,i]}if(e instanceof t.Segment){let[t,i]=n.segment2segment(this,e);return[t,i]}if(e instanceof t.Arc){let[t,i]=n.segment2arc(this,e);return[t,i]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}if(e instanceof t.PlanarSet){let[t,i]=n.shape2planarSet(this,e);return[t,i]}}tangentInStart(){return new t.Vector(this.start,this.end).normalize()}tangentInEnd(){return new t.Vector(this.end,this.start).normalize()}reverse(){return new e(this.end,this.start)}split(e){return this.contains(e)?this.start.equalTo(this.end)?[this.clone()]:this.start.equalTo(e)||this.end.equalTo(e)?[this]:[new t.Segment(this.start,e),new t.Segment(e,this.end)]:[]}middle(){return new t.Point((this.start.x+this.end.x)/2,(this.start.y+this.end.y)/2)}distanceToPoint(e){let[n,...i]=t.Distance.point2segment(e,this);return n}definiteIntegral(t=0){return(this.end.x-this.start.x)*(this.start.y-t+(this.end.y-t))/2}static intersectSegment2Line(e,n){let i=[],r=t.Utils.EQ_0(e.length);return e.ps.on(n)&&i.push(e.ps),e.pe.on(n)&&!r&&i.push(e.pe),i.length>0?i:e.ps.leftTo(n)&&e.pe.leftTo(n)||!e.ps.leftTo(n)&&!e.pe.leftTo(n)?i:new t.Line(e.ps,e.pe).intersect(n)}static intersectSegment2Segment(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Line(e.ps,e.pe),s=new t.Line(n.ps,n.pe);if(r.incidentTo(s))e.ps.on(n)&&i.push(e.ps),e.pe.on(n)&&i.push(e.pe),!n.ps.on(e)||n.ps.equalTo(e.ps)||n.ps.equalTo(e.pe)||i.push(n.ps),!n.pe.on(e)||n.pe.equalTo(e.ps)||n.pe.equalTo(e.pe)||i.push(n.pe);else{let t=r.intersect(s);t.length>0&&t[0].on(e)&&t[0].on(n)&&i.push(t[0])}return i}static intersectSegment2Circle(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Line(e.ps,e.pe).intersect(n);for(let t of r)t.on(e)&&i.push(t);return i}static intersectSegment2Arc(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Line(e.ps,e.pe),s=new t.Circle(n.pc,n.r),o=r.intersect(s);for(let t of o)t.on(e)&&t.on(n)&&i.push(t);return i}svg(t={stroke:\"black\",strokeWidth:\"3\"}){let{stroke:e,strokeWidth:n}=t;return`\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" stroke=\"${e}\" stroke-width=\"${n}\" />`}},t.segment=((...e)=>new t.Segment(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){let{Arc:e,vector:n}=t;t.Circle=class e{constructor(t,e){this.pc=t,this.r=e}clone(){return new t.Circle(this.pc.clone(),this.r)}get center(){return this.pc}get box(){return new t.Box(this.pc.x-this.r,this.pc.y-this.r,this.pc.x+this.r,this.pc.y+this.r)}contains(e){return t.Utils.LE(e.distanceTo(this.center)[0],this.r)}toArc(e=!0){return new t.Arc(this.center,this.r,Math.PI,-Math.PI,e)}intersect(n){return n instanceof t.Line?n.intersect(this):n instanceof t.Segment?n.intersect(this):n instanceof t.Circle?e.intersectCirle2Circle(this,n):n instanceof t.Arc?n.intersect(this):void 0}distanceTo(e){let{Distance:n}=t,{point2circle:i,circle2circle:r,circle2line:s,segment2circle:o,arc2circle:l}=n;if(e instanceof t.Point){let[t,n]=i(e,this);return[t,n=n.reverse()]}if(e instanceof t.Circle){let[t,n]=r(this,e);return[t,n]}if(e instanceof t.Line){let[t,n]=s(this,e);return[t,n]}if(e instanceof t.Segment){let[t,n]=o(e,this);return[t,n=n.reverse()]}if(e instanceof t.Arc){let[t,n]=l(e,this);return[t,n=n.reverse()]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}if(e instanceof t.PlanarSet){let[t,i]=n.shape2planarSet(this,e);return[t,i]}}static intersectCirle2Circle(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Vector(e.pc,n.pc),s=e.r,o=n.r;if(t.Utils.EQ_0(s)||t.Utils.EQ_0(o))return i;if(t.Utils.EQ_0(r.x)&&t.Utils.EQ_0(r.y)&&t.Utils.EQ(s,o))return i.push(e.pc.translate(-s,0)),i;let l,h=e.pc.distanceTo(n.pc)[0];if(t.Utils.GT(h,s+o))return i;if(t.Utils.LT(h,Math.abs(s-o)))return i;if(r.x/=h,r.y/=h,t.Utils.EQ(h,s+o)||t.Utils.EQ(h,Math.abs(s-o)))return l=e.pc.translate(s*r.x,s*r.y),i.push(l),i;let a=s*s/(2*h)-o*o/(2*h)+h/2,c=e.pc.translate(a*r.x,a*r.y),u=Math.sqrt(s*s-a*a);return l=c.translate(r.rotate90CCW().multiply(u)),i.push(l),l=c.translate(r.rotate90CW().multiply(u)),i.push(l),i}svg(t={stroke:\"black\",strokeWidth:\"3\",fill:\"none\"}){let{stroke:e,strokeWidth:n,fill:i}=t;return`\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\" stroke=\"${e}\" stroke-width=\"${n}\" fill=\"${i}\" />`}},t.circle=((...e)=>new t.Circle(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){t.Line=class e{constructor(...n){if(this.pt=new t.Point,this.norm=new t.Vector(0,1),0!=n.length){if(2==n.length){let i=n[0],r=n[1];if(i instanceof t.Point&&r instanceof t.Point)return this.pt=i,void(this.norm=e.points2norm(i,r));if(i instanceof t.Point&&r instanceof t.Vector){if(t.Utils.EQ_0(r.x)&&t.Utils.EQ_0(r.y))throw t.Errors.ILLEGAL_PARAMETERS;return this.pt=i.clone(),void(this.norm=r.clone())}if(i instanceof t.Vector&&r instanceof t.Point){if(t.Utils.EQ_0(i.x)&&t.Utils.EQ_0(i.y))throw t.Errors.ILLEGAL_PARAMETERS;return this.pt=r.clone(),void(this.norm=i.clone())}}throw t.Errors.ILLEGAL_PARAMETERS}}clone(){return new t.Line(this.pt,this.norm)}get slope(){return new t.Vector(this.norm.y,-this.norm.x).slope}get standard(){return[this.norm.x,this.norm.y,this.norm.dot(this.pt)]}parallelTo(e){return t.Utils.EQ_0(this.norm.cross(e.norm))}incidentTo(t){return(this.norm.equalTo(t.norm)||this.norm.equalTo(t.norm.invert()))&&this.pt.on(t)}contains(e){if(this.pt.equalTo(e))return!0;let n=new t.Vector(this.pt,e);return t.Utils.EQ_0(this.norm.dot(n))}intersect(n){return n instanceof t.Line?e.intersectLine2Line(this,n):n instanceof t.Circle?e.intersectLine2Circle(this,n):n instanceof t.Segment?n.intersect(this):n instanceof t.Arc?e.intersectLine2Arc(this,n):void 0}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2line(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle){let[t,i]=n.circle2line(e,this);return[t,i=i.reverse()]}if(e instanceof t.Segment){let[t,i]=n.segment2line(e,this);return[t,i.reverse()]}if(e instanceof t.Arc){let[t,i]=n.arc2line(e,this);return[t,i.reverse()]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}}static points2norm(e,n){if(e.equalTo(n))throw t.Errors.ILLEGAL_PARAMETERS;return new t.Vector(e,n).normalize().rotate90CCW()}static intersectLine2Line(e,n){let i=[],[r,s,o]=e.standard,[l,h,a]=n.standard,c=r*h-s*l,u=o*h-s*a,p=r*a-o*l;if(!t.Utils.EQ_0(c)){let e=new t.Point(u/c,p/c);i.push(e)}return i}static intersectLine2Circle(e,n){let i=[],r=n.pc.projectionOn(e),s=n.pc.distanceTo(r)[0];if(t.Utils.EQ(s,n.r))i.push(r);else if(t.Utils.LT(s,n.r)){var o,l,h=Math.sqrt(n.r*n.r-s*s);o=e.norm.rotate90CCW().multiply(h),l=r.translate(o),i.push(l),o=e.norm.rotate90CW().multiply(h),l=r.translate(o),i.push(l)}return i}static intersectLine2Box(e,n){let i=[new t.Point(n.xmin,n.ymin),new t.Point(n.xmax,n.ymin),new t.Point(n.xmax,n.ymax),new t.Point(n.xmin,n.ymax)],r=[new t.Segment(i[0],i[1]),new t.Segment(i[1],i[2]),new t.Segment(i[2],i[3]),new t.Segment(i[3],i[0])],s=[];for(let t of r){let n=t.intersect(e);for(let t of n)s.push(t)}return s}static intersectLine2Arc(n,i){let r=[];if(0==e.intersectLine2Box(n,i.box).length)return r;let s=new t.Circle(i.pc,i.r),o=n.intersect(s);for(let t of o)t.on(i)&&r.push(t);return r}},t.line=((...e)=>new t.Line(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){t.Vector=class e{constructor(...e){if(this.x=0,this.y=0,0!=e.length){if(2==e.length){let n=e[0],i=e[1];if(\"number\"==typeof n&&\"number\"==typeof i)return this.x=n,void(this.y=i);if(n instanceof t.Point&&i instanceof t.Point)return this.x=i.x-n.x,void(this.y=i.y-n.y)}throw t.Errors.ILLEGAL_PARAMETERS}}clone(){return new e(this.x,this.y)}get slope(){let t=Math.atan2(this.y,this.x);return t<0&&(t=2*Math.PI+t),t}get length(){return Math.sqrt(this.dot(this))}equalTo(e){return t.Utils.EQ(this.x,e.x)&&t.Utils.EQ(this.y,e.y)}multiply(t){return new e(t*this.x,t*this.y)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}normalize(){if(!t.Utils.EQ_0(this.length))return new e(this.x/this.length,this.y/this.length);throw t.Errors.ZERO_DIVISION}rotate(e){let n=new t.Point(this.x,this.y).rotate(e);return new t.Vector(n.x,n.y)}rotate90CCW(){return new t.Vector(-this.y,this.x)}rotate90CW(){return new t.Vector(this.y,-this.x)}invert(){return new t.Vector(-this.x,-this.y)}},t.vector=((...e)=>new t.Vector(...e))}},function(t,e){t.exports=function(t){t.Point=class e{constructor(t=0,e=0){this.x=Number.isNaN(t)?0:t,this.y=Number.isNaN(e)?0:e}get box(){return new t.Box(this.x,this.y,this.x,this.y)}clone(){return new t.Point(this.x,this.y)}get vertices(){return[this.clone()]}equalTo(e){return t.Utils.EQ(this.x,e.x)&&t.Utils.EQ(this.y,e.y)}lessThan(e){return!!t.Utils.LT(this.y,e.y)||!(!t.Utils.EQ(this.y,e.y)||!t.Utils.LT(this.x,e.x))}rotate(e,n={x:0,y:0}){var i=n.x+(this.x-n.x)*Math.cos(e)-(this.y-n.y)*Math.sin(e),r=n.y+(this.x-n.x)*Math.sin(e)+(this.y-n.y)*Math.cos(e);return new t.Point(i,r)}translate(...e){if(1==e.length&&e[0]instanceof t.Vector)return new t.Point(this.x+e[0].x,this.y+e[0].y);if(2==e.length&&\"number\"==typeof e[0]&&\"number\"==typeof e[1])return new t.Point(this.x+e[0],this.y+e[1]);throw t.Errors.ILLEGAL_PARAMETERS}projectionOn(e){if(this.equalTo(e.pt))return this.clone();let n=new t.Vector(this,e.pt);if(t.Utils.EQ_0(n.cross(e.norm)))return e.pt.clone();let i=n.dot(e.norm),r=e.norm.multiply(i);return this.translate(r)}leftTo(e){let n=new t.Vector(e.pt,this);return t.Utils.GT(n.dot(e.norm),0)}distanceTo(n){let{Distance:i}=t;if(n instanceof e){let e=n.x-this.x,i=n.y-this.y;return[Math.sqrt(e*e+i*i),new t.Segment(this,n)]}return n instanceof t.Line?i.point2line(this,n):n instanceof t.Circle?i.point2circle(this,n):n instanceof t.Segment?i.point2segment(this,n):n instanceof t.Arc?i.point2arc(this,n):n instanceof t.Polygon?i.point2polygon(this,n):n instanceof t.PlanarSet?i.shape2planarSet(this,n):void 0}on(e){return e instanceof t.Point?this.equalTo(e):e instanceof t.Line?e.contains(this):e instanceof t.Circle?e.contains(this):e instanceof t.Segment?e.contains(this):e instanceof t.Arc?e.contains(this):e instanceof t.Polygon?e.contains(this):void 0}svg(t={r:\"5\",stroke:\"black\",strokeWidth:\"1\",fill:\"red\"}){let{r:e,stroke:n,strokeWidth:i,fill:r}=t;return`\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${e}\" stroke=\"${n}\" stroke-width=\"${i}\" fill=\"${r}\" />`}},t.point=((...e)=>new t.Point(...e))}},function(t,e){t.exports=class t{constructor(t,e){this.low=t,this.high=e}get max(){return this.high}interval(e,n){return new t(e,n)}clone(){return new t(this.low,this.high)}less_than(t){return this.low<t.low||this.low==t.low&&this.high<t.high}equal_to(t){return this.low==t.low&&this.high==t.high}intersect(t){return!this.not_intersect(t)}not_intersect(t){return this.high<t.low||t.high<this.low}output(){return[this.low,this.high]}maximal_val(t,e){return Math.max(t,e)}val_less_than(t,e){return t<e}}},function(t,e,n){\"use strict\";let i=n(15),{RB_TREE_COLOR_RED:r,RB_TREE_COLOR_BLACK:s}=n(0);t.exports=class{constructor(t,e,n=null,r=null,o=null,l=s){this.left=n,this.right=r,this.parent=o,this.color=l,this.item={key:t,value:e},t&&t instanceof Array&&2==t.length&&(Number.isNaN(t[0])||Number.isNaN(t[1])||(this.item.key=new i(Math.min(t[0],t[1]),Math.max(t[0],t[1])))),this.max=this.item.key?this.item.key.max:void 0}isNil(){return void 0===this.item.key&&void 0===this.item.value&&null===this.left&&null===this.right&&this.color===s}less_than(t){return this.item.key.less_than(t.item.key)}equal_to(t){let e=!0;return this.item.value&&t.item.value&&(e=this.item.value.equal_to?this.item.value.equal_to(t.item.value):this.item.value==t.item.value),this.item.key.equal_to(t.item.key)&&e}intersect(t){return this.item.key.intersect(t.item.key)}copy_data(t){this.item.key=t.item.key.clone(),this.item.value=t.item.value}update_max(){if(this.max=this.item.key?this.item.key.max:void 0,this.right&&this.right.max){let t=this.item.key.maximal_val;this.max=t(this.max,this.right.max)}if(this.left&&this.left.max){let t=this.item.key.maximal_val;this.max=t(this.max,this.left.max)}}not_intersect_left_subtree(t){return(0,this.item.key.val_less_than)(this.left.max.high?this.left.max.high:this.left.max,t.item.key.low)}not_intersect_right_subtree(t){let e=this.item.key.val_less_than,n=this.right.max.low?this.right.max.low:this.right.item.key.low;return e(t.item.key.high,n)}}},function(t,e,n){\"use strict\";let i=n(1);t.exports=function(t){t.PlanarSet=class extends Set{constructor(){super(),this.index=new i}add(t){let e=this.size;if(super.add(t),this.size>e){this.index.insert(t.box,t)}return this}delete(t){let e=super.delete(t);return e&&this.index.remove(t.box,t),e}clear(){}search(t){return this.index.search(t)}hit(e){let n=new t.Box(e.x-1,e.y-1,e.x+1,e.y+1);return this.index.search(n).filter(t=>e.on(t))}svg(){return[...this].reduce((t,e)=>t+e.svg(),\"\")}}}},function(t,e){t.exports={ILLEGAL_PARAMETERS:new ReferenceError(\"Illegal Parameters\"),ZERO_DIVISION:new Error(\"Zero division\")}},function(t,e){t.exports={DP_TOL:1e-6,EQ_0:function(t){return t<1e-6&&t>-1e-6},EQ:function(t,e){return t-e<1e-6&&t-e>-1e-6},GT:(t,e)=>t-e>1e-6,GE:(t,e)=>t-e>-1e-6,LT:(t,e)=>t-e<-1e-6,LE:(t,e)=>t-e<1e-6}},function(t,e,n){\"use strict\";let i=n(19),r=n(18),s=new class{constructor(){this.version=\"0.0.1\",this.DP_TOL=i.DP_TOL,this.CCW=!0,this.CW=!1,this.ORIENTATION={CCW:-1,CW:1,NOT_ORIENTABLE:0},this.PIx2=2*Math.PI,this.PI_2=.5*Math.PI,this.Utils=i,this.Errors=r,this.INSIDE=1,this.OUTSIDE=0,this.BOUNDARY=2,this.CONTAINS=3,this.INTERLACE=4,this.CLIP_INSIDE=1,this.CLIP_OUTSIDE=0,this.BOOLEAN_UNION=1,this.BOOLEAN_INTERSECT=2,this.BOOLEAN_SUBTRACT=3,this.OVERLAP_SAME=1,this.OVERLAP_OPPOSITE=2}};n(17)(s),n(14)(s),n(13)(s),n(12)(s),n(11)(s),n(10)(s),n(9)(s),n(8)(s),n(7)(s),n(6)(s),n(5)(s),n(4)(s),n(3)(s),n(2)(s),t.exports=s}]);\n//# sourceMappingURL=flatten.min.js.map","/**\r\n * Created by Alex Bol on 12/02/2018.\r\n */\r\n\"use strict\";\r\n// let Flatten = require(\"flatten-js\");\r\nlet Flatten = require(\"flatten-js/dist/flatten.min\");\r\nlet {Polygon, Segment, Arc} = Flatten;\r\n\r\nconst NOT_VERTEX = 0;\r\nconst START_VERTEX = 1;\r\nconst END_VERTEX = 2;\r\n\r\n/**\r\n * Class BooleanOp implements boolean operations on polygons\r\n */\r\nclass BooleanOp {\r\n    static booleanOp(operands) {\r\n        let res_poly = new Polygon();\r\n        for (let [wrk_poly, op] of operands) {\r\n            res_poly = BooleanOp.booleanOpBinary(res_poly, wrk_poly, op);\r\n        }\r\n        return res_poly;\r\n    }\r\n\r\n    static booleanOpBinary(res_poly, wrk_poly, op) {\r\n        return BooleanOp.clip(res_poly, wrk_poly, op);\r\n    }\r\n\r\n    /**\r\n     * Unify two polygons polygons and returns new polygon. <br/>\r\n     * Point belongs to the resulted polygon if it belongs to the first OR to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static unify(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, Flatten.BOOLEAN_UNION);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Subtract second polygon from the first and returns new polygon\r\n     * Point belongs to the resulted polygon if it belongs to the first polygon AND NOT to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static subtract(polygon1, polygon2) {\r\n        let wrk_poly = polygon2.clone();\r\n        let wrk_poly_reversed = wrk_poly.reverse();\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, wrk_poly_reversed, Flatten.BOOLEAN_SUBTRACT);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Intersect two polygons and returns new polygon\r\n     * Point belongs to the resultes polygon is it belongs to the first AND to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static intersect(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, Flatten.BOOLEAN_INTERSECT);\r\n        return res_poly;\r\n    }\r\n\r\n    static arrange(polygon1, polygon2) {\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(polygon1, polygon2);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(polygon1, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(polygon2, intersections.int_points2_sorted);\r\n    }\r\n\r\n    static clip(polygon1, polygon2, op) {\r\n        let res_poly = polygon1.clone();\r\n        let wrk_poly = polygon2.clone();\r\n\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(res_poly, wrk_poly);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n        // filter duplicated intersection points\r\n        BooleanOp.filterDuplicatedIntersections(intersections);\r\n\r\n        // remove not relevant not intersected faces from res_polygon\r\n        // if op == UNION, remove faces that are included in wrk_polygon without intersection\r\n        // if op == INTERSECT, remove faces that are not included into wrk_polygon\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(res_poly, wrk_poly, op, intersections.int_points1);\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(wrk_poly, res_poly, op, intersections.int_points2);\r\n\r\n        // initialize inclusion flags for edges incident to intersections\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points1);\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points2);\r\n\r\n        // calculate inclusion flags only for edges incident to intersections\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points1, polygon2);\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points2, polygon1);\r\n\r\n        // TODO: fix bondary conflicts\r\n\r\n        // Set overlapping flags for boundary chains: SAME or OPPOSITE\r\n        BooleanOp.setOverlappingFlags(intersections);\r\n\r\n        // remove not relevant chains between intersection points\r\n        BooleanOp.removeNotRelevantChains(res_poly, op, intersections.int_points1_sorted, true);\r\n        BooleanOp.removeNotRelevantChains(wrk_poly, op, intersections.int_points2_sorted, false);\r\n\r\n        // add edges of wrk_poly into the edge container of res_poly\r\n        BooleanOp.copyWrkToRes(res_poly, wrk_poly, op, intersections.int_points2);\r\n\r\n        // swap links from res_poly to wrk_poly and vice versa\r\n        BooleanOp.swapLinks(res_poly, wrk_poly, intersections);\r\n\r\n        // remove old faces\r\n        BooleanOp.removeOldFaces(res_poly, intersections.int_points1);\r\n        BooleanOp.removeOldFaces(wrk_poly, intersections.int_points2);\r\n\r\n        // restore faces\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points1, intersections.int_points2);\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points2, intersections.int_points1);\r\n\r\n        return res_poly;\r\n    }\r\n\r\n    static getIntersections(polygon1, polygon2) {\r\n        let intersections = {\r\n            int_points1: [],\r\n            int_points2: []\r\n        };\r\n\r\n        // calculate intersections\r\n        for (let edge1 of polygon1.edges) {\r\n\r\n            // request edges of polygon2 in the box of edge1\r\n            let resp = polygon2.edges.search(edge1.box);\r\n\r\n            // for each edge2 in response\r\n            for (let edge2 of resp) {\r\n\r\n                // calculate intersections between edge1 and edge2\r\n                let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                // for each intersection point\r\n                for (let pt of ip) {\r\n                    BooleanOp.addToIntPoints(edge1, pt, intersections.int_points1);\r\n                    BooleanOp.addToIntPoints(edge2, pt, intersections.int_points2);\r\n                }\r\n            }\r\n        }\r\n        return intersections;\r\n    }\r\n\r\n    static addToIntPoints(edge, pt, int_points) {\r\n        let id = int_points.length;\r\n        let split = edge.shape.split(pt);\r\n        if (split.length === 0) return;     // Means point does not belong to edge\r\n        let len = 0;\r\n        if (split.length === 1) {           // Edge was not split\r\n            if (edge.shape.start.equalTo(pt)) {\r\n                len = 0;\r\n            }\r\n            else if (edge.shape.end.equalTo(pt)) {\r\n                len = edge.shape.length;\r\n            }\r\n        }\r\n        else {                             // Edge was split into to edges\r\n            len = split[0].length;\r\n        }\r\n        let is_vertex = NOT_VERTEX;\r\n        if (Flatten.Utils.EQ(len, 0)) {\r\n            is_vertex |= START_VERTEX;\r\n        }\r\n        if (Flatten.Utils.EQ(len, edge.shape.length)) {\r\n            is_vertex |= END_VERTEX;\r\n        }\r\n        // Fix intersection point which is end point of the last edge\r\n        let arc_length = (is_vertex & END_VERTEX) && edge.next.arc_length === 0 ? 0 : edge.arc_length + len;\r\n\r\n        int_points.push({\r\n            id: id,\r\n            pt: pt,\r\n            arc_length: arc_length,\r\n            edge_before: edge,\r\n            edge_after: undefined,\r\n            face: edge.face,\r\n            is_vertex: is_vertex\r\n        });\r\n    }\r\n\r\n    static sortIntersections(intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        // augment intersections with new sorted arrays\r\n        // intersections.int_points1_sorted = intersections.int_points1.slice().sort(BooleanOp.compareFn);\r\n        // intersections.int_points2_sorted = intersections.int_points2.slice().sort(BooleanOp.compareFn);\r\n        intersections.int_points1_sorted = BooleanOp.getSortedArray(intersections.int_points1);\r\n        intersections.int_points2_sorted = BooleanOp.getSortedArray(intersections.int_points2);\r\n    }\r\n\r\n    static getSortedArray(int_points) {\r\n        let faceMap = new Map;\r\n        let id = 0;\r\n        // Create integer id's for faces\r\n        for (let ip of int_points) {\r\n            if (!faceMap.has(ip.face)) {\r\n                faceMap.set(ip.face, id);\r\n                id++;\r\n            }\r\n        }\r\n        // Augment intersection points with face id's\r\n        for (let ip of int_points) {\r\n            ip.faceId = faceMap.get(ip.face);\r\n        }\r\n        // Clone and sort\r\n        let int_points_sorted = int_points.slice().sort(BooleanOp.compareFn);\r\n        return int_points_sorted;\r\n    }\r\n\r\n    static compareFn(ip1, ip2) {\r\n        // compare face id's\r\n        if (ip1.faceId < ip2.faceId) {\r\n            return -1;\r\n        }\r\n        if (ip1.faceId > ip2.faceId) {\r\n            return 1;\r\n        }\r\n        // same face - compare arc_length\r\n        if (Flatten.Utils.LT(ip1.arc_length, ip2.arc_length)) {\r\n            return -1;\r\n        }\r\n        if (Flatten.Utils.GT(ip1.arc_length, ip2.arc_length)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static splitByIntersections(polygon, int_points) {\r\n        let {Polygon, Segment, Arc} = Flatten;\r\n        if (!int_points) return;\r\n        for (let int_point of int_points) {\r\n            let edge = int_point.edge_before;\r\n\r\n            // recalculate vertex flag: it may be changed after previous split\r\n            if (edge.shape.start.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= START_VERTEX;\r\n            }\r\n            if (edge.shape.end.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= END_VERTEX;\r\n            }\r\n\r\n            if (int_point.is_vertex & START_VERTEX) {  // nothing to split\r\n                int_point.edge_before = edge.prev;\r\n                int_point.is_vertex = END_VERTEX;\r\n                continue;\r\n            }\r\n            if (int_point.is_vertex & END_VERTEX) {    // nothing to split\r\n                continue;\r\n            }\r\n\r\n            let newEdge = polygon.addVertex(int_point.pt, edge);\r\n            int_point.edge_before = newEdge;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_after = int_point.edge_before.next;\r\n        }\r\n    }\r\n\r\n    static filterDuplicatedIntersections(intersections) {\r\n        if (intersections.int_points1.length < 2) return;\r\n\r\n        let do_squeeze = false;\r\n\r\n        let int_point_ref1 = intersections.int_points1_sorted[0];\r\n        let int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n        for (let i = 1; i < intersections.int_points1_sorted.length; i++) {\r\n            let int_point_cur1 = intersections.int_points1_sorted[i];\r\n\r\n            if (!Flatten.Utils.EQ(int_point_cur1.arc_length, int_point_ref1.arc_length)) {\r\n                int_point_ref1 = int_point_cur1;\r\n                int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n                continue;\r\n            }\r\n\r\n            /* Same length: int_point_cur1->arc_len == int_point_ref1->arc_len */\r\n            /* Ensure this is intersection between same edges from the same face */\r\n            let int_point_cur2 = intersections.int_points2[int_point_cur1.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        int_point_ref2 = intersections.int_points2_sorted[0];\r\n        int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n        for (let i = 1; i < intersections.int_points2_sorted.length; i++) {\r\n            let int_point_cur2 = intersections.int_points2_sorted[i];\r\n\r\n            if (int_point_cur2.id == -1) continue;\r\n            /* already deleted */\r\n\r\n            if (int_point_ref2.id == -1 || /* can't be reference if already deleted */\r\n                !(Flatten.Utils.EQ(int_point_cur2.arc_length, int_point_ref2.arc_length))) {\r\n                int_point_ref2 = int_point_cur2;\r\n                int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n                continue;\r\n            }\r\n\r\n            let int_point_cur1 = intersections.int_points1[int_point_cur2.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        if (do_squeeze) {\r\n            intersections.int_points1 = intersections.int_points1.filter((int_point) => int_point.id >= 0);\r\n            intersections.int_points2 = intersections.int_points2.filter((int_point) => int_point.id >= 0);\r\n\r\n            // update id's\r\n            intersections.int_points1.forEach((int_point, index) => int_point.id = index);\r\n            intersections.int_points2.forEach((int_point, index) => int_point.id = index);\r\n\r\n            // re-create sorted\r\n            intersections.int_points1_sorted = [];\r\n            intersections.int_points2_sorted = [];\r\n            BooleanOp.sortIntersections(intersections);\r\n        }\r\n    }\r\n\r\n    static removeNotRelevantNotIntersectedFaces(poly1, poly2, op, int_points1) {\r\n        let toBeDeleted = [];\r\n        for (let face of poly1.faces) {\r\n            if (!int_points1.find((ip) => ip.face === face)) {\r\n                let rel = face.getRelation(poly2);\r\n                if (op === Flatten.BOOLEAN_UNION && rel === Flatten.INSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n                else if (op === Flatten.BOOLEAN_INTERSECT && rel === Flatten.OUTSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < toBeDeleted.length; i++) {\r\n            poly1.deleteFace(toBeDeleted[i]);\r\n        }\r\n    }\r\n\r\n    static initializeInclusionFlags(int_points) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvStart = undefined;\r\n            int_point.edge_before.bvEnd = undefined;\r\n            int_point.edge_before.bv = undefined;\r\n            int_point.edge_before.overlap = undefined;\r\n\r\n            int_point.edge_after.bvStart = undefined;\r\n            int_point.edge_after.bvEnd = undefined;\r\n            int_point.edge_after.bv = undefined;\r\n            int_point.edge_after.overlap = undefined;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvEnd = Flatten.BOUNDARY;\r\n            int_point.edge_after.bvStart = Flatten.BOUNDARY;\r\n        }\r\n    }\r\n\r\n    static calculateInclusionFlags(int_points, polygon) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.setInclusion(polygon);\r\n            int_point.edge_after.setInclusion(polygon);\r\n        }\r\n    }\r\n\r\n    static setOverlappingFlags(intersections) {\r\n        let cur_face = undefined;\r\n        let first_int_point_in_face = undefined;\r\n        let next_int_point1 = undefined;\r\n        let num_int_points = intersections.int_points1.length;\r\n\r\n        for (let i = 0; i < num_int_points; i++) {\r\n            let cur_int_point1 = intersections.int_points1_sorted[i];\r\n\r\n            // Find boundary chain in the polygon1\r\n            if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n                first_int_point_in_face = i;\r\n                cur_face = cur_int_point1.face;\r\n            }\r\n\r\n            if (i + 1 === num_int_points) {                                         // last int point in array\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else if (intersections.int_points1_sorted[i + 1].face !== cur_face) {   // last int point in chain\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else {                                                                // not a last point in chain\r\n                next_int_point1 = intersections.int_points1_sorted[i + 1];\r\n            }\r\n\r\n            let edge_from1 = cur_int_point1.edge_after;\r\n            let edge_to1 = next_int_point1.edge_before;\r\n\r\n            if (!(edge_from1.bv === Flatten.BOUNDARY && edge_to1.bv === Flatten.BOUNDARY))      // not a boundary chain - skip\r\n                continue;\r\n\r\n            if (edge_from1 !== edge_to1)                    //  one edge chain    TODO: support complex case\r\n                continue;\r\n\r\n\r\n            /* Find boundary chain in polygon2 between same intersection points */\r\n            let cur_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n            let next_int_point2 = intersections.int_points2[next_int_point1.id];\r\n\r\n            let edge_from2 = cur_int_point2.edge_after;\r\n            let edge_to2 = next_int_point2.edge_before;\r\n\r\n            /* if [edge_from2..edge_to2] is not a boundary chain, invert it */\r\n            /* check also that chain consist of one or two edges */\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2)) {\r\n                cur_int_point2 = intersections.int_points2[next_int_point1.id];\r\n                next_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n\r\n                edge_from2 = cur_int_point2.edge_after;\r\n                edge_to2 = next_int_point2.edge_before;\r\n            }\r\n\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2))\r\n                continue;                           // not an overlapping chain - skip   TODO: fix boundary conflict\r\n\r\n            // Set overlapping flag - one-to-one case\r\n            let flag = BooleanOp.edge2edgeOverlappingFlag(edge_from1.shape, edge_from2.shape);\r\n            /* Do not update overlap flag if already set on previous chain */\r\n            if (edge_from1.overlap === undefined) edge_from1.overlap = flag;\r\n            if (edge_from2.overlap === undefined) edge_from2.overlap = flag;\r\n        }\r\n    }\r\n\r\n    static edge2edgeOverlappingFlag(shape1, shape2) {\r\n        let flag = undefined;\r\n        if (shape1 instanceof Segment && shape2 instanceof Segment) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            }\r\n            else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        }\r\n        else if (shape1 instanceof Arc && shape2 instanceof Arc) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.counterClockwise === shape2.counterClockwise &&\r\n                shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            }\r\n            else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.counterClockwise !== shape2.counterClockwise &&\r\n                shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        }\r\n        else if (shape1 instanceof Segment && shape2 instanceof Arc ||\r\n            shape1 instanceof Arc && shape2 instanceof Segment) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            }\r\n            else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    static removeNotRelevantChains(polygon, op, int_points, is_res_polygon) {\r\n        if (!int_points) return;\r\n        for (let i = 0; i < int_points.length; i++) {\r\n            // TODO: Support claster of duplicated points with same <x,y> came from different faces\r\n\r\n            let int_point_current = int_points[i];\r\n            // Get next int point from the same face that current\r\n            let int_point_next;\r\n            if (i < int_points.length - 1 && int_points[i + 1].face === int_point_current.face) {\r\n                int_point_next = int_points[i + 1];   // get next point from same face\r\n            }\r\n            else {                                  // get first point from the same face\r\n                for (int_point_next of int_points) {\r\n                    if (int_point_next.face === int_point_current.face) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let edge_from = int_point_current.edge_after;\r\n            let edge_to = int_point_next.edge_before;\r\n\r\n            let face = int_point_current.face;\r\n\r\n            if ((edge_from.bv === Flatten.INSIDE && edge_to.bv === Flatten.INSIDE && op === Flatten.BOOLEAN_UNION) ||\r\n                (edge_from.bv === Flatten.OUTSIDE && edge_to.bv === Flatten.OUTSIDE && op === Flatten.BOOLEAN_INTERSECT) ||\r\n                ((edge_from.bv === Flatten.OUTSIDE || edge_to.bv === Flatten.OUTSIDE) && op === Flatten.BOOLEAN_SUBTRACT && !is_res_polygon) ||\r\n                ((edge_from.bv === Flatten.INSIDE || edge_to.bv === Flatten.INSIDE) && op === Flatten.BOOLEAN_SUBTRACT && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_SAME) && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_OPPOSITE) )) {\r\n\r\n                polygon.removeChain(face, edge_from, edge_to);\r\n\r\n                int_point_current.edge_after = undefined;\r\n                int_point_next.edge_before = undefined;\r\n            }\r\n        }\r\n    };\r\n\r\n    static copyWrkToRes(res_polygon, wrk_polygon, op, int_points) {\r\n        for (let face of wrk_polygon.faces) {\r\n            for (let edge of face) {\r\n                res_polygon.edges.add(edge);\r\n            }\r\n            // If union - add face from wrk_polygon that is not intersected with res_polygon\r\n            if (op === Flatten.BOOLEAN_UNION &&\r\n                int_points && int_points.find((ip) => (ip.face === face)) === undefined) {\r\n                res_polygon.addFace(face.first, face.last);\r\n            }\r\n        }\r\n    }\r\n\r\n    static swapLinks(res_polygon, wrk_polygon, intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        for (let i = 0; i < intersections.int_points1.length; i++) {\r\n            let int_point1 = intersections.int_points1[i];\r\n            let int_point2 = intersections.int_points2[i];\r\n\r\n            // Simple case - find continuation on the other polygon\r\n\r\n            // Process edge from res_polygon\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // swap need\r\n                if (int_point2.edge_before === undefined && int_point2.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point1.edge_before.next = int_point2.edge_after;\r\n                    int_point2.edge_after.prev = int_point1.edge_before;\r\n\r\n                    // Fill in missed links in intersection points\r\n                    int_point1.edge_after = int_point2.edge_after;\r\n                    int_point2.edge_before = int_point1.edge_before;\r\n                }\r\n            }\r\n            // Process edge from wrk_polygon\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // swap need\r\n                if (int_point1.edge_before === undefined && int_point1.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point2.edge_before.next = int_point1.edge_after;\r\n                    int_point1.edge_after.prev = int_point2.edge_before;\r\n\r\n                    // Complete missed links\r\n                    int_point2.edge_after = int_point1.edge_after;\r\n                    int_point1.edge_before = int_point2.edge_before;\r\n                }\r\n            }\r\n\r\n            // Continuation not found - complex case\r\n            // Continuation will be found on the same polygon.\r\n            // It happens when intersection point is actually touching point\r\n            // Polygon1\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points1_sorted) {\r\n                    if (int_point === int_point1) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point1.pt)) {\r\n                            // Connect edges\r\n                            int_point1.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point1.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point1.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point1.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Polygon2\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points2_sorted) {\r\n                    if (int_point === int_point2) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point2.pt)) {\r\n                            // Connect edges\r\n                            int_point2.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point2.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point2.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point2.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Sanity check that no dead ends left\r\n    }\r\n\r\n    static removeOldFaces(polygon, int_points) {\r\n        for (let int_point of int_points) {\r\n            polygon.faces.delete(int_point.face);\r\n            int_point.face = undefined;\r\n            if (int_point.edge_before)\r\n                int_point.edge_before.face = undefined;\r\n            if (int_point.edge_after)\r\n                int_point.edge_after.face = undefined;\r\n        }\r\n    }\r\n\r\n    static restoreFaces(polygon, int_points, other_int_points) {\r\n        // For each intersection point - create new chain\r\n        for (let int_point of int_points) {\r\n            if (int_point.edge_before === undefined || int_point.edge_after === undefined)  // completely deleted\r\n                continue;\r\n            if (int_point.face)            // already restored\r\n                continue;\r\n\r\n            if (int_point.edge_after.face || int_point.edge_before.face)        // Chain already created. Possible case in duplicated intersection points\r\n                continue;\r\n\r\n            let first = int_point.edge_after;      // face start\r\n            let last = int_point.edge_before;      // face end;\r\n\r\n            let face = polygon.addFace(first, last);\r\n\r\n            // Mark intersection points from the newly create face\r\n            // to avoid multiple creation of the same face\r\n            // Chain number was assigned to each edge of new face in addFace function\r\n            for (let int_point_tmp of int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n            // Mark other intersection points as well\r\n            for (let int_point_tmp of other_int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = BooleanOp;"],"sourceRoot":""}