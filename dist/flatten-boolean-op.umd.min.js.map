{"version":3,"sources":["webpack://flatten-boolean-op/webpack/universalModuleDefinition","webpack://flatten-boolean-op/webpack/bootstrap","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/utils/constants.js","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/index.js","webpack://flatten-boolean-op/./node_modules/flatten-js/algorithms/distance.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/polygon.js","webpack://flatten-boolean-op/./node_modules/flatten-js/algorithms/ray_shooting.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/ray.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/face.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/edge.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/box.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/arc.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/segment.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/circle.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/line.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/vector.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/point.js","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/classes/interval.js","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/classes/node.js","webpack://flatten-boolean-op/./node_modules/flatten-js/data_structures/planar_set.js","webpack://flatten-boolean-op/./node_modules/flatten-js/utils/errors.js","webpack://flatten-boolean-op/./node_modules/flatten-js/utils/utils.js","webpack://flatten-boolean-op/./node_modules/flatten-js/index.js","webpack://flatten-boolean-op/./index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","Node","nil_node","[object Object]","this","size","count","tree_walk","keys","res","node","push","item","key","output","isEmpty","undefined","insert_node","tree_insert","recalc_max","search_node","tree_search","delete_node","tree_delete","interval","resp_nodes","tree_search_interval","resp","forEach","visitor","node_current","parent","update_max","current_node","parent_node","less_than","left","right","insert_fixup","uncle_node","color","rotate_left","rotate_right","cut_node","fix_node","tree_successor","copy_data","delete_fixup","brother_node","equal_to","not_intersect_left_subtree","intersect","not_intersect_right_subtree","node_min","node_max","node_successor","local_minimum","x","y","action","height","heightLeft","heightRight","testBlackHeightProperty","Error","IntervalTree","Flatten","Polygon","Point","Segment","Arc","Circle","Line","Ray","Vector","vector","Distance","pt1","pt2","distanceTo","pt","line","closest_point","projectionOn","length","circle","dist2center","shortest_dist","center","Utils","EQ_0","toArc","start","dist","Math","abs","v","pc","normalize","multiply","translate","segment","equalTo","end","point2point","v_seg","v_ps2pt","v_pe2pt","start_sp","dot","end_sp","GE","v_unit","tangentInStart","cross","arc","shortest_segment","dist_and_segments","point2circle","on","sort","seg","ip","dist_and_segment","point2line","seg1","seg2","intersectSegment2Segment","point2segment","ps","pe","dist_from_start","shortest_segment_from_start","dist_from_end","shortest_segment_from_end","LT","dist_from_center","shortest_segment_from_center","dist_from_projection","shortest_segment_from_projection","dist_tmp","segment_tmp","point2arc","reverse","circle1","circle2","arc1","arc2","ip1","ip2","circle2circle","point","polygon","min_dist_and_segment","Number","POSITIVE_INFINITY","edge","edges","shape","polygon1","polygon2","edge1","edge2","box1","box2","mindist_x","max","xmin","xmax","mindist_y","ymin","ymax","mindist","box","merge","dx","dy","level","min_stop","tree","maxdist","box2box_minmax","Edge","insert","new_level_left","map","isNil","filter","new_level_right","new_level","LE","minmax_tree_process_level","set","index","squared_min_stop","min_dist_and_segment_new","stop","minmax_tree_calc_distance","sqrt","low","distance","PlanarSet","minmax_tree","d1","d2","GT","shape1","shape2","Face","Box","ray_shoot","faces","reduce","acc","face","vertices","args","add","delete","edgeFrom","edgeTo","next","remove","deleteFace","shapes","split","newEdge","edgeBefore","prev","clone","addFace","signedArea","rel","INSIDE","BOUNDARY","point2polygon","shape2polygon","shape2planarSet","attrs","stroke","strokeWidth","fill","fillRule","svgStr","svg","toJSON","contains","notIntersect","OUTSIDE","ray","norm","resp_edges","search","intersections","i1","i2","counter","intersection","prev_tangent","tangentInEnd","prev_point","cur_tangent","cur_point","prev_on_the_left","leftTo","cur_on_the_left","next_tangent","next_point","next_on_the_left","EQ","Errors","ILLEGAL_PARAMETERS","intersectRay2Segment","intersectRay2Arc","ip_tmp","first","last","_box","_orientation","Array","every","segments","points2segments","shapes2face","flattenShapes","flattenShape","startAngle","endAngle","counterClockwise","setArcLength","Symbol","iterator","done","face_edges","points","append","arc_length","edgeAfter","edge_tmp","orientation","sArea","definiteIntegral","area","ORIENTATION","NOT_ORIENTABLE","CCW","CW","bv","bvStart","bvEnd","bvThisInOther","setInclusion","polyTmp","numInsideThis","CONTAINS","INTERLACE","overlap","middle","bvMiddle","flag","OVERLAP_SAME","OVERLAP_OPPOSITE","largeArcFlag","sweepFlag","sweep","PI","sign","halfArc1","halfArc2","json","high","other_box","min","lessThan","PIx2","rotate","breakToFunctional","angle","slope","test_arc","cos","intersectArc2Circle","intersectArc2Arc","arc2circle","arc2line","segment2arc","arc2arc","func_arcs_array","angles","pts","test_arcs","new_arc","prev_arc","vec","circularSegmentDefiniteIntegral","onLeftSide","areaTrapez","areaCircularSegment","circularSegmentArea","sin","coords","distanceToPoint","intersectSegment2Line","intersectSegment2Circle","intersectSegment2Arc","segment2circle","segment2line","segment2segment","rest","zero_segment","line1","line2","incidentTo","new_ip","ips","ips_tmp","counterclockwise","intersectCirle2Circle","circle2line","r1","r2","a","mid_pt","h","rotate90CCW","rotate90CW","a1","a2","points2norm","standard","other_line","invert","intersectLine2Line","intersectLine2Circle","intersectLine2Arc","A1","B1","C1","A2","B2","C2","det","detX","detY","prj","v_trans","delta","segs","intersectLine2Box","atan2","scalar","ZERO_DIVISION","rpoint","isNaN","x_rot","y_rot","proj_vec","Interval","other_interval","not_intersect","val1","val2","other_node","value_equal","maximal_val","val_less_than","Set","super","deleted","ReferenceError","DP_TOL","f","version","PI_2","CLIP_INSIDE","CLIP_OUTSIDE","BOOLEAN_UNION","BOOLEAN_INTERSECT","BOOLEAN_SUBTRACT","NOT_VERTEX","START_VERTEX","END_VERTEX","BooleanOp","operands","res_poly","wrk_poly","op","booleanOpBinary","clip","wrk_poly_reversed","getIntersections","sortIntersections","splitByIntersections","int_points1_sorted","int_points2_sorted","filterDuplicatedIntersections","removeNotRelevantNotIntersectedFaces","int_points1","int_points2","initializeInclusionFlags","calculateInclusionFlags","setOverlappingFlags","removeNotRelevantChains","copyWrkToRes","swapLinks","removeOldFaces","restoreFaces","addToIntPoints","int_points","id","len","is_vertex","edge_before","edge_after","getSortedArray","faceMap","Map","has","faceId","slice","compareFn","int_point","addVertex","do_squeeze","int_point_ref1","int_point_ref2","int_point_cur1","int_point_cur2","poly1","poly2","toBeDeleted","find","getRelation","cur_face","first_int_point_in_face","next_int_point1","num_int_points","cur_int_point1","edge_from1","edge_to1","cur_int_point2","next_int_point2","edge_from2","edge_to2","setOverlap","is_res_polygon","int_point_next","int_point_current","edge_from","edge_to","removeChain","res_polygon","wrk_polygon","int_point1","int_point2","other_int_points","int_point_tmp"],"mappings":"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","file":"flatten-boolean-op.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flatten-boolean-op\"] = factory();\n\telse\n\t\troot[\"flatten-boolean-op\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    RB_TREE_COLOR_RED: 0,\r\n    RB_TREE_COLOR_BLACK: 1\r\n};","/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n'use strict';\r\n\r\nlet Node = require('./classes/node');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('./utils/constants');\r\n\r\nlet nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree may store items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply array of numeric [low,high] values <br />\r\n * If interval is an object, it should implement and expose methods less_than, equals_to, intersect and others,\r\n * see documentation {link}\r\n * @type {IntervalTree}\r\n */\r\nlet IntervalTree = class IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.key.output()));\r\n        return res;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return (this.root == null || this.root == nil_node);\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param key - interval object or array of two numbers [low, high]\r\n     * @param value - value representing any object (optional)\r\n     * @returns {Node} - returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, nil_node, nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - value object to be checked\r\n     * @returns {boolean} - true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - - value object\r\n     * @returns {boolean} - true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param interval - search interval, or array [low, high]\r\n     * @returns {Array}\r\n     */\r\n    search(interval) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        let resp = [];\r\n        resp_nodes.forEach((node) => {\r\n            if (node.item.value) {         // if there are values, return only values\r\n                resp.push(node.item.value);\r\n            }\r\n            else {                         // otherwise, return keys\r\n                resp.push(node.item.key.output());\r\n            }\r\n        }, []);\r\n        return resp;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    };\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == nil_node || delete_node.right == nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        if (fix_node != nil_node) {\r\n            fix_node.parent = cut_node.parent;\r\n        }\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (fix_node != nil_node && cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != nil_node) {\r\n            // if (node->left != nil_node && node->left->max >= low) {\r\n            if (node.left != nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != nil_node && node->low <= high) {\r\n            if (node.right != nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.toArray());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n};\r\n\r\nmodule.exports = IntervalTree;\r\n","\"use strict\";\r\n\r\nlet IntervalTree = require('flatten-interval-tree');\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Polygon, Point, Segment, Arc, Circle, Line, Ray, Vector} = Flatten;\r\n\r\n    let {vector} = Flatten;\r\n\r\n    Flatten.Distance = class Distance {\r\n        /**\r\n         * Calculate distance and shortest segment between points\r\n         * @param pt1\r\n         * @param pt2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2point(pt1, pt2) {\r\n            return pt1.distanceTo(pt2);\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and line\r\n         * @param pt\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2line(pt, line) {\r\n            let closest_point = pt.projectionOn(line);\r\n            let vec = vector(pt, closest_point);\r\n            return [vec.length, new Segment(pt, closest_point)];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and circle\r\n         * @param pt\r\n         * @param circle\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2circle(pt, circle) {\r\n            let [dist2center, shortest_dist] = pt.distanceTo(circle.center);\r\n            if (Flatten.Utils.EQ_0(dist2center)) {\r\n                return [circle.r, new Segment(pt, circle.toArc().start)];\r\n            }\r\n            else {\r\n                let dist = Math.abs(dist2center - circle.r);\r\n                let v = vector(circle.pc, pt).normalize().multiply(circle.r);\r\n                let closest_point = circle.pc.translate(v);\r\n                return [dist, new Segment(pt, closest_point)];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and segment\r\n         * @param pt\r\n         * @param segment\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2segment(pt, segment) {\r\n            /* Degenerated case of zero-length segment */\r\n            if (segment.start.equalTo(segment.end)) {\r\n                return  Distance.point2point(pt, segment.start);\r\n            }\r\n\r\n            let v_seg = new Flatten.Vector(segment.start, segment.end);\r\n            let v_ps2pt = new Flatten.Vector(segment.start, pt);\r\n            let v_pe2pt = new Flatten.Vector(segment.end, pt);\r\n            let start_sp = v_seg.dot(v_ps2pt);\r\n            /* dot product v_seg * v_ps2pt */\r\n            let end_sp = -v_seg.dot(v_pe2pt);\r\n            /* minus dot product v_seg * v_pe2pt */\r\n\r\n            let dist;\r\n            let closest_point;\r\n            if (Flatten.Utils.GE(start_sp, 0) && Flatten.Utils.GE(end_sp, 0)) {    /* point inside segment scope */\r\n                let v_unit = segment.tangentInStart(); // new Flatten.Vector(v_seg.x / this.length, v_seg.y / this.length);\r\n                /* unit vector ||v_unit|| = 1 */\r\n                dist = Math.abs(v_unit.cross(v_ps2pt));\r\n                /* dist = abs(v_unit x v_ps2pt) */\r\n                closest_point = segment.start.translate(v_unit.multiply(v_unit.dot(v_ps2pt)));\r\n                return [dist, new Segment(pt, closest_point)];\r\n            }\r\n            else if (start_sp < 0) {                             /* point is out of scope closer to ps */\r\n                return pt.distanceTo(segment.start);\r\n            }\r\n            else {                                               /* point is out of scope closer to pe */\r\n                return pt.distanceTo(segment.end);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and arc\r\n         * @param pt\r\n         * @param arc\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2arc(pt, arc) {\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n            let dist_and_segments = [];\r\n            let dist, shortest_segment;\r\n            [dist, shortest_segment] = Distance.point2circle(pt, circle);\r\n            if (shortest_segment.end.on(arc)) {\r\n                dist_and_segments.push(Distance.point2circle(pt, circle));\r\n            }\r\n            dist_and_segments.push( Distance.point2point(pt, arc.start) );\r\n            dist_and_segments.push( Distance.point2point(pt, arc.end) );\r\n\r\n            Distance.sort(dist_and_segments);\r\n\r\n            return dist_and_segments[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and line\r\n         * @param seg\r\n         * @param line\r\n         * @returns {Number | Segment}\r\n         */\r\n        static segment2line(seg, line) {\r\n            let ip = seg.intersect(line);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\r\n            }\r\n\r\n            dist_and_segment.push(Distance.point2line(seg.start, line));\r\n            dist_and_segment.push(Distance.point2line(seg.end, line));\r\n\r\n            Distance.sort( dist_and_segment );\r\n            return dist_and_segment[0];\r\n\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two segments\r\n         * @param seg1\r\n         * @param seg2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2segment(seg1, seg2) {\r\n            let ip = Segment.intersectSegment2Segment(seg1, seg2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\r\n            }\r\n\r\n            // Seg1 and seg2 not intersected\r\n            let dist_and_segment = [];\r\n\r\n            dist_and_segment.push(Distance.point2segment(seg2.start, seg1));\r\n            dist_and_segment.push(Distance.point2segment(seg2.end, seg1));\r\n            dist_and_segment.push(Distance.point2segment(seg1.start, seg2));\r\n            dist_and_segment.push(Distance.point2segment(seg1.end, seg2));\r\n\r\n            Distance.sort( dist_and_segment );\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and circle\r\n         * @param seg\r\n         * @param circle\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2circle(seg, circle) {\r\n            /* Case 1 Segment and circle intersected. Return the first point and zero distance */\r\n            let ip = seg.intersect(circle);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // No intersection between segment and circle\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius\r\n             * And projection point belong to segment\r\n              * Then measure again distance from projection to circle and return it */\r\n            let line = new Flatten.Line(seg.ps, seg.pe);\r\n            let [dist, shortest_segment] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist, circle.r) && shortest_segment.end.on(seg)) {\r\n                return Distance.point2circle(shortest_segment.end, circle);\r\n            }\r\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n            else {\r\n                let [dist_from_start, shortest_segment_from_start] = Distance.point2circle(seg.start, circle);\r\n                let [dist_from_end, shortest_segment_from_end] = Distance.point2circle(seg.end, circle);\r\n                return Flatten.Utils.LT(dist_from_start, dist_from_end) ?\r\n                    [dist_from_start, shortest_segment_from_start] :\r\n                    [dist_from_end, shortest_segment_from_end];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and arc\r\n         * @param seg\r\n         * @param arc\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2arc(seg, arc) {\r\n            /* Case 1 Segment and arc intersected. Return the first point and zero distance */\r\n            let ip = seg.intersect(arc);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // No intersection between segment and arc\r\n            let line = new Flatten.Line(seg.ps, seg.pe);\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n             * projection point belongs to segment AND\r\n               * distance from projection point to circle belongs to arc  =>\r\n               * return this distance from projection to circle */\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist_from_center, circle.r) && shortest_segment_from_center.end.on(seg)) {\r\n                let [dist_from_projection, shortest_segment_from_projection] =\r\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\r\n                if (shortest_segment_from_projection.end.on(arc)) {\r\n                    return [dist_from_projection, shortest_segment_from_projection];\r\n                }\r\n            }\r\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n            let dist_and_segment = [];\r\n            dist_and_segment.push(Distance.point2arc(seg.start, arc));\r\n            dist_and_segment.push(Distance.point2arc(seg.end, arc));\r\n\r\n            let dist_tmp, segment_tmp;\r\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.start, seg);\r\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.end, seg);\r\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n            Distance.sort(dist_and_segment);\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two circles\r\n         * @param circle1\r\n         * @param circle2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static circle2circle(circle1, circle2) {\r\n            let ip = circle1.intersect(circle2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // Case 1. Concentric circles. Convert to arcs and take distance between two arc starts\r\n            if (circle1.center.equalTo(circle2.center)) {\r\n                let arc1 = circle1.toArc();\r\n                let arc2 = circle2.toArc();\r\n                return Distance.point2point(arc1.start, arc2.start);\r\n            }\r\n            else {\r\n                // Case 2. Not concentric circles\r\n                let line = new Line(circle1.center, circle2.center);\r\n                let ip1 = line.intersect(circle1);\r\n                let ip2 = line.intersect(circle2);\r\n\r\n                let dist_and_segment = [];\r\n\r\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[0]));\r\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[1]));\r\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[0]));\r\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[1]));\r\n\r\n                Distance.sort(dist_and_segment);\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two circles\r\n         * @param circle\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static circle2line(circle, line) {\r\n            let ip = circle.intersect(line);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            let [dist, shortest_segment] = Distance.point2circle(shortest_segment_from_center.end, circle);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between arc and line\r\n         * @param arc\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2line(arc, line) {\r\n            /* Case 1 Line and arc intersected. Return the first point and zero distance */\r\n            let ip = line.intersect(arc);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle = new Flatten.Circle(arc.center, arc.r);\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n             * projection point belongs to segment AND\r\n               * distance from projection point to circle belongs to arc  =>\r\n               * return this distance from projection to circle */\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist_from_center, circle.r)) {\r\n                let [dist_from_projection, shortest_segment_from_projection] =\r\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\r\n                if (shortest_segment_from_projection.end.on(arc)) {\r\n                    return [dist_from_projection, shortest_segment_from_projection];\r\n                }\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n                dist_and_segment.push( Distance.point2line(arc.start, line) );\r\n                dist_and_segment.push( Distance.point2line(arc.end, line) );\r\n\r\n                Distance.sort(dist_and_segment);\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between arc and circle\r\n         * @param arc\r\n         * @param circle2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2circle(arc, circle2) {\r\n            let ip = arc.intersect(circle2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle1 = new Flatten.Circle(arc.center, arc.r);\r\n\r\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n            if (shortest_segment.start.on(arc)) {\r\n                return [dist, shortest_segment];\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n\r\n                dist_and_segment.push(Distance.point2circle(arc.start, circle2));\r\n                dist_and_segment.push(Distance.point2circle(arc.end, circle2));\r\n\r\n                Distance.sort(dist_and_segment);\r\n\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two arcs\r\n         * @param arc1\r\n         * @param arc2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2arc(arc1, arc2) {\r\n            let ip = arc1.intersect(arc2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle1 = new Flatten.Circle(arc1.center, arc1.r);\r\n            let circle2 = new Flatten.Circle(arc2.center, arc2.r);\r\n\r\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n            if (shortest_segment.start.on(arc1) && shortest_segment.end.on(arc2)) {\r\n                return [dist, shortest_segment];\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n\r\n                let dist_tmp, segment_tmp;\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.start, arc2);\r\n                if (segment_tmp.end.on(arc2)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.end, arc2);\r\n                if (segment_tmp.end.on(arc2)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.start, arc1);\r\n                if (segment_tmp.end.on(arc1)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.end, arc1);\r\n                if (segment_tmp.end.on(arc1)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.start);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.end);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.start);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.end);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                Distance.sort(dist_and_segment);\r\n\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and polygon\r\n         * @param point\r\n         * @param polygon\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2polygon(point, polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = (edge.shape instanceof Segment) ?\r\n                    Distance.point2segment(point, edge.shape) : Distance.point2arc(point, edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static shape2polygon(shape, polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = shape.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n/*\r\n        static arc2polygon(arc, polygon) {\r\n            let ip = arc.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = arc.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static line2polygon(line, polygon) {\r\n            let ip = line.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = line.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static circle2polygon(circle, polygon) {\r\n            let ip = circle.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = circle.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n*/\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two polygons\r\n         * @param polygon1\r\n         * @param polygon2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static polygon2polygon(polygon1, polygon2) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n            for (let edge1 of polygon1.edges) {\r\n                for (let edge2 of polygon2.edges) {\r\n                    let [dist, shortest_segment] = edge1.shape.distanceTo(edge2.shape);\r\n                    if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                        min_dist_and_segment = [dist, shortest_segment];\r\n                    }\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        /**\r\n         * Returns [mindist, maxdist] array of squared minimal and maximal distance between boxes\r\n         * Minimal distance by x is\r\n         *    (box2.xmin - box1.xmax), if box1 is left to box2\r\n         *    (box1.xmin - box2.xmax), if box2 is left to box1\r\n         *    0,                       if box1 and box2 are intersected by x\r\n         * Minimal distance by y is defined in the same way\r\n         *\r\n         * Maximal distance is estimated as a sum of squared dimensions of the merged box\r\n         *\r\n         * @param box1\r\n         * @param box2\r\n         * @returns {Number | Number} - minimal and maximal distance\r\n         */\r\n        static box2box_minmax(box1, box2) {\r\n            let mindist_x = Math.max( Math.max(box1.xmin - box2.xmax, 0), Math.max(box2.xmin - box1.xmax, 0) );\r\n            let mindist_y = Math.max( Math.max(box1.ymin - box2.ymax, 0), Math.max(box2.ymin - box1.ymax, 0) );\r\n            let mindist = mindist_x*mindist_x + mindist_y*mindist_y;\r\n\r\n            let box = box1.merge(box2);\r\n            let dx = box.xmax - box.xmin;\r\n            let dy = box.ymax - box.ymin;\r\n            let maxdist = dx*dx + dy*dy;\r\n\r\n            return [mindist, maxdist];\r\n        }\r\n\r\n        static minmax_tree_process_level(shape, level, min_stop, tree) {\r\n            // Calculate minmax distance to each shape in current level\r\n            // Insert result into the interval tree for further processing\r\n            // update min_stop with maxdist, it will be the new stop distance\r\n            let mindist, maxdist;\r\n            for (let node of level) {\r\n\r\n                // [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n                // if (Flatten.Utils.GT(mindist, min_stop))\r\n                //     continue;\r\n\r\n                // Estimate min-max dist to the shape stored in the node.item, using node.item.key which is shape's box\r\n                [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.item.key);\r\n                if (node.item.value instanceof Flatten.Edge) {\r\n                    tree.insert([mindist, maxdist], node.item.value.shape);\r\n                }\r\n                else {\r\n                    tree.insert([mindist, maxdist], node.item.value);\r\n                }\r\n                if (Flatten.Utils.LT(maxdist, min_stop)) {\r\n                    min_stop = maxdist;                       // this will be the new distance estimation\r\n                }\r\n            }\r\n\r\n            if (level.length === 0)\r\n                return min_stop;\r\n\r\n            // Calculate new level from left and right children of the current\r\n            let new_level_left = level.map(node => node.left.isNil() ? undefined : node.left ).filter(node => node !== undefined);\r\n            let new_level_right = level.map(node => node.right.isNil() ? undefined : node.right).filter(node => node !== undefined);\r\n            // Merge left and right subtrees and leave only relevant subtrees\r\n            let new_level = [...new_level_left, ...new_level_right].filter( node => {\r\n                // Node subtree quick reject, node.max is a subtree box\r\n                let [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n                return (Flatten.Utils.LE(mindist, min_stop));\r\n            });\r\n\r\n            min_stop = Distance.minmax_tree_process_level(shape, new_level, min_stop, tree);\r\n            return min_stop;\r\n        }\r\n\r\n        /**\r\n         * Calculates sorted tree of [mindist, maxdist] intervals between query shape\r\n         * and shapes of the planar set.\r\n         * @param shape\r\n         * @param set\r\n         */\r\n        static minmax_tree(shape, set, min_stop) {\r\n            let tree = new IntervalTree();\r\n            let level = [set.index.root];\r\n            let squared_min_stop = min_stop < Number.POSITIVE_INFINITY ? min_stop*min_stop : Number.POSITIVE_INFINITY;\r\n            squared_min_stop = Distance.minmax_tree_process_level(shape, level, squared_min_stop, tree);\r\n            return tree;\r\n        }\r\n\r\n        static minmax_tree_calc_distance(shape, node, min_dist_and_segment) {\r\n            let min_dist_and_segment_new, stop;\r\n            if (node != null && !node.isNil()) {\r\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.left, min_dist_and_segment);\r\n\r\n                if (stop) {\r\n                    return [min_dist_and_segment_new, stop];\r\n                }\r\n\r\n                if (Flatten.Utils.LT(min_dist_and_segment_new[0], Math.sqrt(node.item.key.low))) {\r\n                    return [min_dist_and_segment_new, true];   // stop condition\r\n                }\r\n\r\n                let [dist, shortest_segment] = Distance.distance(shape, node.item.value);\r\n                // console.log(dist)\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment_new[0])) {\r\n                    min_dist_and_segment_new = [dist, shortest_segment];\r\n                }\r\n\r\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.right, min_dist_and_segment_new);\r\n\r\n                return [min_dist_and_segment_new, stop];\r\n            }\r\n\r\n            return [min_dist_and_segment, false];\r\n        }\r\n\r\n        /**\r\n         * Calculates distance between shape and Planar Set of shapes\r\n         * @param shape\r\n         * @param {PlanarSet} set\r\n         * @param {Number} min_stop\r\n         * @returns {*}\r\n         */\r\n        static shape2planarSet(shape, set, min_stop = Number.POSITIVE_INFINITY) {\r\n            let min_dist_and_segment = [min_stop, new Flatten.Segment()];\r\n            let stop = false;\r\n            if (set instanceof Flatten.PlanarSet) {\r\n                let tree = Distance.minmax_tree(shape, set, min_stop);\r\n                [min_dist_and_segment, stop] = Distance.minmax_tree_calc_distance(shape, tree.root, min_dist_and_segment);\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static sort(dist_and_segment) {\r\n            dist_and_segment.sort((d1, d2) => {\r\n                if (Flatten.Utils.LT(d1[0], d2[0])) {\r\n                    return -1;\r\n                }\r\n                if (Flatten.Utils.GT(d1[0], d2[0])) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        static distance(shape1, shape2) {\r\n            return shape1.distanceTo(shape2);\r\n        }\r\n    }\r\n};","/**\r\n * Created by Alex Bol on 3/15/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Edge, Face, PlanarSet, Box} = Flatten;\r\n    let {ray_shoot} = Flatten;\r\n    /**\r\n     * Class representing a polygon.<br/>\r\n     * Polygon in FlattenJS is a multipolygon comprised from a set of [faces]{@link Flatten.Face}. <br/>\r\n     * Face, in turn, is a closed loop of [edges]{@link Flatten.Edge}, where edge may be segment or circular arc<br/>\r\n     * @type {Polygon}\r\n     */\r\n    Flatten.Polygon = class Polygon {\r\n        /**\r\n         * Constructor creates new instance of polygon.<br/>\r\n         * New polygon is empty. Add face to the polygon using method <br/>\r\n         * <code>\r\n         *     polygon.addFace(Points[]|Segments[]|Arcs[])\r\n         * </code>\r\n         */\r\n        constructor() {\r\n            /**\r\n             * Container of faces (closed loops), may be empty\r\n             * @type {PlanarSet}\r\n             */\r\n            this.faces = new PlanarSet();\r\n            /**\r\n             * Container of edges\r\n             * @type {PlanarSet}\r\n             */\r\n            this.edges = new PlanarSet();\r\n        }\r\n\r\n        /**\r\n         * (Getter) Returns bounding box of the polygon\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return [...this.faces].reduce( (acc, face) => acc.merge(face.box), new Box() );\r\n        }\r\n\r\n        /**\r\n         * (Getter) Returns array of vertices\r\n         * @returns {Array}\r\n         */\r\n        get vertices() {\r\n            return [...this.edges].map( edge => edge.start);\r\n        }\r\n\r\n        /**\r\n         * Add new face to polygon. Returns added face\r\n         * @param {Points[]|Segments[]|Arcs[]} args - list of points or list of shapes (segments and arcs)\r\n         * which comprise a closed loop\r\n         * @returns {Face}\r\n         */\r\n        addFace(...args) {\r\n            let face = new Face(this, ...args);\r\n            this.faces.add(face);\r\n            return face;\r\n        }\r\n\r\n        /**\r\n         * Delete existing face from polygon\r\n         * @param {Face} face Face to be deleted\r\n         * @returns {boolean}\r\n         */\r\n        deleteFace(face) {\r\n            for (let edge of face) {\r\n                let deleted = this.edges.delete(edge);\r\n            }\r\n            let deleted = this.faces.delete(face);\r\n            return deleted;\r\n        }\r\n\r\n        /**\r\n         * Delete chain of edges from the face.\r\n         * @param {Face} face Face to remove chain\r\n         * @param {Edge} edgeFrom Start of the chain of edges to be removed\r\n         * @param {Edge} edgeTo End of the chain of edges to be removed\r\n         */\r\n        removeChain(face, edgeFrom, edgeTo) {\r\n            // Special case: all edges removed\r\n            if (edgeTo.next === edgeFrom) {\r\n                this.deleteFace(face);\r\n                return;\r\n            }\r\n            for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next ) {\r\n                face.remove(this.edges, edge);\r\n                // this.edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n                if (face.isEmpty()) {\r\n                    this.deleteFace(face);    // delete from PlanarSet of faces and update index\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add point as a new vertex and split edge. Point supposed to belong to an edge.\r\n         * When edge is split, new edge created from the start of the edge to the new vertex\r\n         * and inserted before current edge.\r\n         * Current edge is trimmed and updated. Method returns new edge added.\r\n         * @param {Edge} edge Edge to be split with new vertex and then trimmed from start\r\n         * @param {Point} pt Point to be added as a new vertex\r\n         * @returns {Edge}\r\n         */\r\n        addVertex(pt, edge) {\r\n            let shapes = edge.shape.split(pt);\r\n            if (shapes.length < 2) return;\r\n            let newEdge = new Flatten.Edge(shapes[0]);\r\n            let edgeBefore = edge.prev;\r\n\r\n            /* Insert first split edge into linked list after edgeBefore */\r\n            edge.face.insert(this.edges, newEdge, edgeBefore);\r\n\r\n            // Remove old edge from edges container and 2d index\r\n            this.edges.delete(edge);\r\n\r\n            // Update edge shape with second split edge keeping links\r\n            edge.shape = shapes[1];\r\n\r\n            // Add updated edge to the edges container and 2d index\r\n            this.edges.add(edge);\r\n\r\n            return newEdge;\r\n        }\r\n\r\n        reverse() {\r\n            for (let face of this.faces) {\r\n                face.reverse();\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Create new copied instance of the polygon\r\n         * @returns {Polygon}\r\n         */\r\n        clone() {\r\n            let polygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.clone());\r\n                }\r\n                polygon.addFace(shapes);\r\n            }\r\n            return polygon;\r\n        }\r\n\r\n        /**\r\n         * Returns area of the polygon. Area of an island will be added, area of a hole will be subtracted\r\n         * @returns {number}\r\n         */\r\n        area() {\r\n            let signedArea = [...this.faces].reduce((acc,face) => acc + face.signedArea(), 0);\r\n            return Math.abs(signedArea);\r\n        }\r\n\r\n        /**\r\n         * Returns true if polygon contains point, including polygon boundary, false otherwise\r\n         * Point in polygon test based on ray shooting algorithm\r\n         * @param {Point} point - test point\r\n         * @returns {boolean}\r\n         */\r\n        contains(point) {\r\n            let rel = ray_shoot(this, point);\r\n            return (rel == Flatten.INSIDE || rel == Flatten.BOUNDARY) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * Return distance and shortest segment between polygon and other shape as array [distance, shortest_segment]\r\n         * @param {Shape} shape Shape of one of the types Point, Circle, Line, Segment, Arc or Polygon\r\n         * @returns {Number | Segment}\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2polygon(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle ||\r\n            shape instanceof Flatten.Line ||\r\n            shape instanceof Flatten.Segment ||\r\n            shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            /* this method is bit faster */\r\n            if (shape instanceof  Flatten.Polygon) {\r\n                let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n                let dist, shortest_segment;\r\n\r\n                for (let edge of this.edges) {\r\n                    // let [dist, shortest_segment] = Distance.shape2polygon(edge.shape, shape);\r\n                    let min_stop = min_dist_and_segment[0];\r\n                    [dist, shortest_segment] = Distance.shape2planarSet(edge.shape, shape.edges, min_stop);\r\n                    if (Flatten.Utils.LT(dist, min_stop)) {\r\n                        min_dist_and_segment = [dist, shortest_segment];\r\n                    }\r\n                }\r\n                return min_dist_and_segment;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return string to draw polygon in svg\r\n         * @param attrs  - json structure with attributes for svg path element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\", \"fillRule\"\r\n         * Defaults are stroke:\"black\", strokeWidth:\"3\", fill:\"lightcyan\", fillRule:\"evenodd\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {stroke:\"black\", strokeWidth:\"3\", fill:\"lightcyan\", fillRule:\"evenodd\"}) {\r\n            let {stroke, strokeWidth, fill, fillRule} = attrs;\r\n            let svgStr = `\\n<path stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${fill}\" fill-rule=\"${fillRule}\" d=\"`;\r\n            for (let face of this.faces) {\r\n                svgStr += face.svg();\r\n            }\r\n            svgStr += `\">\\n</path>`;\r\n\r\n            return svgStr;\r\n        }\r\n\r\n        toJSON() {\r\n            return [...this.faces].map(face => face.toJSON());\r\n        }\r\n    }\r\n};","\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Polygon, Point, Segment, Arc, Line, Ray} = Flatten;\r\n\r\n    Flatten.ray_shoot = function(polygon, point) {\r\n        let contains = undefined;\r\n\r\n        // if (!(polygon instanceof Polygon && point instanceof Point)) {\r\n        //     throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        // }\r\n\r\n        // 1. Quick reject\r\n        if (polygon.box.notIntersect(point.box)) {\r\n            return Flatten.OUTSIDE;\r\n        }\r\n\r\n        let ray = new Ray(point);\r\n        let line = new Line(ray.pt, ray.norm);\r\n\r\n        // 2. Locate relevant edges of the polygon\r\n        let resp_edges = polygon.edges.search(ray.box);\r\n\r\n        if (resp_edges.length == 0) {\r\n            return Flatten.OUTSIDE;\r\n        }\r\n\r\n        // 3. Calculate intersections\r\n        let intersections = [];\r\n        for (let edge of resp_edges) {\r\n            for (let ip of ray.intersect(edge.shape)) {\r\n\r\n                // If intersection is equal to query point then point lays on boundary\r\n                if (ip.equalTo(point)) {\r\n                    return Flatten.BOUNDARY;\r\n                }\r\n\r\n                intersections.push({\r\n                    pt: ip,\r\n                    edge: edge\r\n                });\r\n            }\r\n        }\r\n\r\n        // 4. Sort intersection in x-ascending order\r\n        intersections.sort( (i1, i2) => {\r\n            if (Flatten.Utils.LT(i1.pt.x, i2.pt.x)) {\r\n                return -1;\r\n            }\r\n            if (Flatten.Utils.GT(i1.pt.x, i2.pt.x)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        // 5. Count real intersections, exclude touching\r\n        let counter = 0;\r\n\r\n        for (let i=0; i < intersections.length; i++) {\r\n            let intersection = intersections[i];\r\n            if (intersection.pt.equalTo(intersection.edge.shape.start)) {\r\n                /* skip same point between same edges if already counted */\r\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\r\n                    intersection.edge.prev === intersections[i-1].edge) {\r\n                    continue;\r\n                }\r\n                let prev_edge = intersection.edge.prev;\r\n                let prev_tangent = prev_edge.shape.tangentInEnd();\r\n                let prev_point = intersection.pt.translate(prev_tangent);\r\n\r\n                let cur_tangent = intersection.edge.shape.tangentInStart();\r\n                let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n                let prev_on_the_left = prev_point.leftTo(line);\r\n                let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n                if ( (prev_on_the_left && !cur_on_the_left) || (!prev_on_the_left && cur_on_the_left) ) {\r\n                    counter++;\r\n                }\r\n            }\r\n            else if (intersection.pt.equalTo(intersection.edge.shape.end)) {\r\n                /* skip same point between same edges if already counted */\r\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\r\n                    intersection.edge.next === intersections[i-1].edge) {\r\n                    continue;\r\n                }\r\n                let next_edge = intersection.edge.next;\r\n                let next_tangent = next_edge.shape.tangentInStart();\r\n                let next_point = intersection.pt.translate(next_tangent);\r\n\r\n                let cur_tangent = intersection.edge.shape.tangentInEnd();\r\n                let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n                let next_on_the_left = next_point.leftTo(line);\r\n                let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n                if ( (next_on_the_left && !cur_on_the_left) || (!next_on_the_left && cur_on_the_left) ) {\r\n                    counter++;\r\n                }\r\n            }\r\n            else {        /* intersection point is not a coincident with a vertex */\r\n                if (intersection.edge.shape instanceof Segment) {\r\n                    counter++;\r\n                }\r\n                else {\r\n                    /* Check if ray does not touch the curve in the extremal (top or bottom) point */\r\n                    let box = intersection.edge.shape.box;\r\n                    if ( !(Flatten.Utils.EQ(intersection.pt.y, box.ymin) ||\r\n                            Flatten.Utils.EQ(intersection.pt.y, box.ymax)) ) {\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 6. Odd or even?\r\n        contains = counter % 2 == 1 ? Flatten.INSIDE : Flatten.OUTSIDE;\r\n\r\n        return contains;\r\n    };\r\n};","\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Point, Segment, Line, Circle, Arc, Box, Vector} = Flatten;\r\n    /**\r\n     * Class representing a horizontal ray, used by ray shooting algorithm\r\n     * @type {Ray}\r\n     */\r\n    Flatten.Ray = class Ray {\r\n        /**\r\n         * Construct ray by setting start point\r\n         * @param {Point} pt - start point\r\n         */\r\n        constructor(...args) {\r\n            this.pt = new Point();\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Point) {\r\n                this.pt = args[0].clone();\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                this.pt = new Point(args[0], args[1]);\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Returns copied instance of the ray object\r\n         * @returns {Ray}\r\n         */\r\n        clone() {\r\n            return new Ray(this.pt);\r\n        }\r\n\r\n        /**\r\n         * Returns half-infinite bounding box of the ray\r\n         * @returns {Box} - bounding box\r\n         */\r\n        get box() {\r\n            return new Box(\r\n                this.pt.x,\r\n                this.pt.y,\r\n                Number.POSITIVE_INFINITY,\r\n                this.pt.y\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Return ray start point\r\n         * @returns {Point} - ray start point\r\n         */\r\n        get start() {\r\n            return this.pt;\r\n        }\r\n\r\n        /**\r\n         * Return ray normal vector (0,1) - horizontal ray\r\n         * @returns {Vector} - ray normal vector\r\n         */\r\n        get norm() {\r\n            return new Vector(0,1);\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between ray and segment or arc\r\n         * @param {Segment|Arc} - Shape to intersect with ray\r\n         * @returns {Array} array of intersection points\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Segment) {\r\n                return this.intersectRay2Segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Arc) {\r\n                return this.intersectRay2Arc(this, shape);\r\n            }\r\n        }\r\n\r\n        intersectRay2Segment(ray, segment) {\r\n            let ip = [];\r\n\r\n            if (ray.box.notIntersect(segment.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line = new Line(ray.start, ray.norm);\r\n            let ip_tmp = line.intersect(segment);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            /* If there were two intersection points between line and ray,\r\n            and now there is exactly one left, it means ray starts between these points\r\n            and there is another intersection point - start of the ray */\r\n            if (ip_tmp.length == 2 && ip.length == 1 && ray.start.on(line)) {\r\n                ip.push(ray.start);\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        intersectRay2Arc(ray, arc) {\r\n            let ip = [];\r\n\r\n            if (ray.box.notIntersect(arc.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line = new Line(ray.start, ray.norm);\r\n            let ip_tmp = line.intersect(arc);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n    };\r\n\r\n    Flatten.ray = (...args) => new Flatten.Ray(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function (Flatten) {\r\n    let {Point, Segment, Arc, Box, Edge} = Flatten;\r\n    /**\r\n     * Class representing a face (closed loop) in a [polygon]{@link Flatten.Polygon} object.\r\n     * Face is a circular bidirectional linked list of [edges]{@link Flatten.Edge}.\r\n     * Face object cannot be instantiated with a constructor.\r\n     * Instead, use [polygon.addFace()]{@link Flatten.Polygon#addFace} method.\r\n     * <br/>\r\n     * Note, that face only set entry point to the linked list of edges but does not contain edges by itself.\r\n     * Container of edges is a property of the polygon object. <br/>\r\n     *\r\n     * @example\r\n     * // Face implements \"next\" iterator which enables to iterate edges in for loop:\r\n     * for (let edge of face) {\r\n     *      console.log(edge.shape.length)     // do something\r\n     * }\r\n     *\r\n     * // Instead, it is possible to iterate edges as linked list, starting from face.first:\r\n     * let edge = face.first;\r\n     * do {\r\n     *   console.log(edge.shape.length);   // do something\r\n     *   edge = edge.next;\r\n     * } while (edge != face.first)\r\n     */\r\n    Flatten.Face = class Face {\r\n        constructor(polygon, ...args) {\r\n            /**\r\n             * Reference to the first edge in face\r\n             */\r\n            this.first;\r\n            /**\r\n             * Reference to the last edge in face\r\n             */\r\n            this.last;\r\n\r\n            this._box = undefined;  // new Box();\r\n            this._orientation = undefined;\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            /* If passed an array it supposed to be:\r\n             1) array of shapes that performs close loop or\r\n             2) array of points that performs set of vertices\r\n             */\r\n            if (args.length == 1) {\r\n                if (args[0] instanceof Array) {\r\n                    // let argsArray = args[0];\r\n                    let shapes = args[0];  // argsArray[0];\r\n                    if (shapes.length == 0)\r\n                        return;\r\n\r\n                    if (shapes.every((shape) => {\r\n                            return shape instanceof Point\r\n                        })) {\r\n                        let segments = Face.points2segments(shapes);\r\n                        this.shapes2face(polygon.edges, segments);\r\n                    }\r\n                    else if (shapes.every((shape) => {\r\n                            return (shape instanceof Segment || shape instanceof Arc)\r\n                        })) {\r\n                        this.shapes2face(polygon.edges, shapes);\r\n                    }\r\n                    // this is from JSON.parse object\r\n                    else if (shapes.every((shape) => {\r\n                            return (shape.name === \"segment\" || shape.name === \"arc\")\r\n                        })) {\r\n                        let flattenShapes = [];\r\n                        for (let shape of shapes) {\r\n                            let flattenShape;\r\n                            if (shape.name === \"segment\") {\r\n                                flattenShape = new Segment(shape.ps.x, shape.ps.y, shape.pe.x, shape.pe.y);\r\n                            }\r\n                            else {\r\n                                flattenShape = new Arc(new Point(shape.pc.x, shape.pc.y),\r\n                                    shape.r, shape.startAngle, shape.endAngle, shape.counterClockwise);\r\n                            }\r\n                            flattenShapes.push(flattenShape);\r\n                        }\r\n                        this.shapes2face(polygon.edges, flattenShapes);\r\n                    }\r\n                }\r\n                /* Create new face and copy edges into polygon.edges set */\r\n                else if (args[0] instanceof Face) {\r\n                    let face = args[0];\r\n                    this.first = face.first;\r\n                    this.last = face.last;\r\n                    for (let edge of face) {\r\n                        polygon.edges.add(edge);\r\n                    }\r\n                }\r\n            }\r\n            /* If passed two edges, consider them as start and end of the face loop */\r\n            /* THIS METHOD WILL BE USED BY BOOLEAN OPERATIONS */\r\n            /* Assume that edges already copied to polygon.edges set in the clip algorithm !!! */\r\n            if (args.length == 2 && args[0] instanceof Edge && args[1] instanceof Edge) {\r\n                this.first = args[0];                          // first edge in face or undefined\r\n                this.last = args[1];                           // last edge in face or undefined\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n                // set arc length\r\n                this.setArcLength();\r\n                /*\r\n                 let edge = this.first;\r\n                 edge.arc_length = 0;\r\n                 edge = edge.next;\r\n                 while (edge !== this.first) {\r\n                 edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                 edge = edge.next;\r\n                 }\r\n                 */\r\n\r\n                // this.box = this.getBox();\r\n                // this.orientation = this.getOrientation();      // face direction cw or ccw\r\n            }\r\n        }\r\n\r\n        [Symbol.iterator]() {\r\n            let edge = undefined;\r\n            return {\r\n                next: () => {\r\n                    let value = edge ? edge : this.first;\r\n                    let done = this.first ? (edge ? edge === this.first : false) : true;\r\n                    edge = value ? value.next : undefined;\r\n                    return {value: value, done: done};\r\n                }\r\n            };\r\n        };\r\n\r\n        /**\r\n         * Return array of edges from first to last\r\n         * @returns {Array}\r\n         */\r\n        get edges() {\r\n            let face_edges = [];\r\n            for (let edge of this) {\r\n                face_edges.push(edge);\r\n            }\r\n            return face_edges;\r\n        }\r\n\r\n        /**\r\n         * Return number of edges in the face\r\n         * @returns {number}\r\n         */\r\n        get size() {\r\n            let counter = 0;\r\n            for (let edge of this) {\r\n                counter++;\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        static points2segments(points) {\r\n            let segments = [];\r\n            for (let i = 0; i < points.length; i++) {\r\n                segments.push(new Segment(points[i], points[(i + 1) % points.length]));\r\n            }\r\n            return segments;\r\n        }\r\n\r\n        shapes2face(edges, shapes) {\r\n            for (let shape of shapes) {\r\n                let edge = new Edge(shape);\r\n                this.append(edges, edge);\r\n                // this.box = this.box.merge(shape.box);\r\n                // edges.add(edge);\r\n            }\r\n            // this.orientation = this.getOrientation();              // face direction cw or ccw\r\n        }\r\n\r\n        /**\r\n         * Returns true if face is empty, false otherwise\r\n         * @returns {boolean}\r\n         */\r\n        isEmpty() {\r\n            return (this.first === undefined && this.last === undefined)\r\n        }\r\n\r\n        /**\r\n         * Append given edge after the last edge (and before the first edge). <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} edge - Edge to be appended to the linked list\r\n         */\r\n        append(edges, edge) {\r\n            if (this.first === undefined) {\r\n                edge.prev = edge;\r\n                edge.next = edge;\r\n                this.first = edge;\r\n                this.last = edge;\r\n                edge.arc_length = 0;\r\n            }\r\n            else {\r\n                // append to end\r\n                edge.prev = this.last;\r\n                this.last.next = edge;\r\n\r\n                // update edge to be last\r\n                this.last = edge;\r\n\r\n                // restore circular links\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n                // set arc length\r\n                edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n            }\r\n            edge.face = this;\r\n\r\n            edges.add(edge);      // Add new edges into edges container\r\n        }\r\n\r\n        /**\r\n         * Insert edge newEdge into the linked list after the edge edgeBefore <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} newEdge - Edge to be inserted into linked list\r\n         * @param {Edge} edgeBefore - Edge to insert newEdge after it\r\n         */\r\n        insert(edges, newEdge, edgeBefore) {\r\n            if (this.first === undefined) {\r\n                edge.prev = newEdge;\r\n                edge.next = newEdge;\r\n                this.first = newEdge;\r\n                this.last = newEdge;\r\n            }\r\n            else {\r\n                /* set links to new edge */\r\n                let edgeAfter = edgeBefore.next;\r\n                edgeBefore.next = newEdge;\r\n                edgeAfter.prev = newEdge;\r\n\r\n                /* set links from new edge */\r\n                newEdge.prev = edgeBefore;\r\n                newEdge.next = edgeAfter;\r\n\r\n                /* extend chain if new edge added after last edge */\r\n                if (this.last === edgeBefore)\r\n                    this.first = newEdge;\r\n            }\r\n            newEdge.face = this;\r\n\r\n            edges.add(newEdge);      // Add new edges into edges container\r\n        }\r\n\r\n        /**\r\n         * Remove the given edge from the linked list of the face <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} edge - Edge to be removed\r\n         */\r\n        remove(edges, edge) {\r\n            // special case if last edge removed\r\n            if (edge === this.first && edge === this.last) {\r\n                this.first = undefined;\r\n                this.last = undefined;\r\n            }\r\n            else {\r\n                // update linked list\r\n                edge.prev.next = edge.next;\r\n                edge.next.prev = edge.prev;\r\n                // update first if need\r\n                if (edge === this.first) {\r\n                    this.first = edge.next;\r\n                }\r\n                // update last if need\r\n                if (edge === this.last) {\r\n                    this.last = edge.prev;\r\n                }\r\n            }\r\n            edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n        }\r\n\r\n        /**\r\n         * Reverse orientation of the face: first edge become last and vice a verse,\r\n         * all edges starts and ends swapped, direction of arcs inverted.\r\n         */\r\n        reverse() {\r\n            // collect edges in revert order with reverted shapes\r\n            let edges = [];\r\n            let edge_tmp = this.last;\r\n            do {\r\n                // reverse shape\r\n                edge_tmp.shape = edge_tmp.shape.reverse();\r\n                edges.push(edge_tmp);\r\n                edge_tmp = edge_tmp.prev;\r\n            } while (edge_tmp !== this.last);\r\n\r\n            // restore linked list\r\n            this.first = undefined;\r\n            this.last = undefined;\r\n            for (let edge of edges) {\r\n                if (this.first === undefined) {\r\n                    edge.prev = edge;\r\n                    edge.next = edge;\r\n                    this.first = edge;\r\n                    this.last = edge;\r\n                    edge.arc_length = 0;\r\n                }\r\n                else {\r\n                    // append to end\r\n                    edge.prev = this.last;\r\n                    this.last.next = edge;\r\n\r\n                    // update edge to be last\r\n                    this.last = edge;\r\n\r\n                    // restore circular links\r\n                    this.last.next = this.first;\r\n                    this.first.prev = this.last;\r\n\r\n                    // set arc length\r\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                }\r\n            }\r\n\r\n            // Recalculate orientation, if set\r\n            if (this._orientation !== undefined) {\r\n                this._orientation = undefined;\r\n                this._orientation = this.orientation();\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Set arc_length property for each of the edges in the face.\r\n         * Arc_length of the edge it the arc length from the first edge of the face\r\n         */\r\n        setArcLength() {\r\n            for (let edge of this) {\r\n                if (edge === this.first) {\r\n                    edge.arc_length = 0.0;\r\n                }\r\n                else {\r\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                }\r\n                edge.face = this;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns the absolute value of the area of the face\r\n         * @returns {number}\r\n         */\r\n        area() {\r\n            return Math.abs(this.signedArea());\r\n        }\r\n\r\n        /**\r\n         * Returns signed area of the simple face.\r\n         * Face is simple if it has no self intersections that change its orientation.\r\n         * Then the area will be positive if the orientation of the face is clockwise,\r\n         * and negative if orientation is counterclockwise.\r\n         * It may be zero if polygon is degenerated.\r\n         * @returns {number}\r\n         */\r\n        signedArea() {\r\n            let sArea = 0;\r\n            for (let edge of this) {\r\n                sArea += edge.shape.definiteIntegral(this.box.ymin);\r\n            }\r\n            return sArea;\r\n        }\r\n\r\n        /**\r\n         * Return face orientation: one of Flatten.ORIENTATION.CCW, Flatten.ORIENTATION.CW, Flatten.ORIENTATION.NOT_ORIENTABLE <br/>\r\n         * According to Green theorem the area of a closed curve may be calculated as double integral,\r\n         * and the sign of the integral will be defined by the direction of the curve.\r\n         * When the integral (\"signed area\") will be negative, direction is counter clockwise,\r\n         * when positive - clockwise and when it is zero, polygon is not orientable.\r\n         * See {@link https://mathinsight.org/greens_theorem_find_area}\r\n         * @returns {number}\r\n         */\r\n        orientation() {\r\n            if (this._orientation === undefined) {\r\n                let area = this.signedArea();\r\n                if (Flatten.Utils.EQ_0(area)) {\r\n                    this._orientation = Flatten.ORIENTATION.NOT_ORIENTABLE;\r\n                }\r\n                else if (Flatten.Utils.LT(area, 0)) {\r\n                    this._orientation = Flatten.ORIENTATION.CCW;\r\n                }\r\n                else {\r\n                    this._orientation = Flatten.ORIENTATION.CW;\r\n                }\r\n            }\r\n            return this._orientation;\r\n        }\r\n\r\n        /**\r\n         * Return bounding box of the face\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            if (this._box === undefined) {\r\n                let box = new Flatten.Box();\r\n                for (let edge of this) {\r\n                    box = box.merge(edge.box);\r\n                }\r\n                this._box = box;\r\n            }\r\n            return this._box;\r\n        }\r\n\r\n        /**\r\n         * Check relation between face and other polygon\r\n         * on strong assumption that they are NOT INTERSECTED <br/>\r\n         * Then there are 4 options: <br/>\r\n         * face disjoint to polygon - Flatten.OUTSIDE <br/>\r\n         * face inside polygon - Flatten.INSIDE <br/>\r\n         * face contains polygon - Flatten.CONTAIN <br/>\r\n         * face interlaced with polygon: inside some face and contains other face - Flatten.INTERLACE <br/>\r\n         * @param {Polygon} polygon - Polygon to check relation\r\n         */\r\n        getRelation(polygon) {\r\n            this.first.bv = this.first.bvStart = this.first.bvEnd = undefined;\r\n            let bvThisInOther = this.first.setInclusion(polygon);\r\n            let resp = polygon.faces.search(this.box);\r\n            if (resp.length === 0) {\r\n                return bvThisInOther;        // OUTSIDE or INSIDE\r\n            }\r\n            else {                           // possible INTERLACE\r\n                let polyTmp = new Flatten.Polygon();\r\n                polyTmp.addFace(this);\r\n\r\n                let numInsideThis = 0;\r\n                for (let face of resp) {\r\n                    face.first.bv = face.first.bvStart = face.first.bvEnd = undefined;\r\n                    let bvOtherInThis = face.first.setInclusion(polyTmp);\r\n                    if (bvOtherInThis === Flatten.INSIDE) {\r\n                        numInsideThis++;\r\n                    }\r\n                }\r\n                if (bvThisInOther === Flatten.OUTSIDE) {\r\n                    if (numInsideThis === 0) {                   // none inside this - outside\r\n                        return Flatten.OUTSIDE;\r\n                    }\r\n                    else if (numInsideThis === resp.length) {      // all from resp inside this - contains or interlace\r\n                        if (resp.length === polygon.faces.size) {\r\n                            return Flatten.CONTAINS;               // all faces from polygon are in response - contains\r\n                        }\r\n                        else {\r\n                            return Flatten.INTERLACE;              // some faces inside - interlace\r\n                        }\r\n                    }\r\n                    else {\r\n                        return Flatten.INTERLACE;                  // some faces inside - interlace\r\n                    }\r\n                }\r\n                else if (bvThisInOther === Flatten.INSIDE) {\r\n                    return numInsideThis === 0 ? Flatten.INSIDE : Flatten.INTERLACE;\r\n                }\r\n            }\r\n        }\r\n\r\n        toJSON() {\r\n            return this.edges.map(edge => edge.toJSON());\r\n        }\r\n\r\n        svg() {\r\n            let svgStr = `\\nM${this.first.start.x},${this.first.start.y}`;\r\n\r\n            for (let edge of this) {\r\n                svgStr += edge.svg();\r\n            }\r\n\r\n            svgStr += ` z`;\r\n            return svgStr;\r\n        }\r\n\r\n    };\r\n};","/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing an edge of polygon. Edge shape may be Segment or Arc.\r\n     * Each edge contains references to the next and previous edges in the face of the polygon.\r\n     *\r\n     * @type {Edge}\r\n     */\r\n    Flatten.Edge = class Edge {\r\n        /**\r\n         * Construct new instance of edge\r\n         * @param {Shape} shape Shape of type Segment of Arc\r\n         */\r\n        constructor(shape) {\r\n            /**\r\n             * Shape of the edge: Segment or Arc\r\n             */\r\n            this.shape = shape;\r\n            /**\r\n             * Pointer to the next edge in the face\r\n             */\r\n            this.next;\r\n            /**\r\n             * Pointer to the previous edge in the face\r\n             */\r\n            this.prev;\r\n            /**\r\n             * Pointer to the face containing this edge\r\n             * @type {Face}\r\n             */\r\n            this.face;\r\n            /**\r\n             * \"Arc distance\" from the face start\r\n             * @type {number}\r\n             */\r\n            this.arc_length = 0;\r\n            /**\r\n             * Start inclusion flag (inside/outside/boundary)\r\n             * @type {Boolean}\r\n             */\r\n            this.bvStart = undefined;\r\n            /**\r\n             * End inclusion flag (inside/outside/boundary)\r\n             * @type {Boolean}\r\n             */\r\n            this.bvEnd = undefined;\r\n            /**\r\n             * Edge inclusion flag (Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY)\r\n             * @type {*}\r\n             */\r\n            this.bv = undefined;\r\n            /**\r\n             * Overlap flag for boundary edge (Flatten.OVERLAP_SAME/Flatten.OVERLAP_OPPOSITE)\r\n             * @type {*}\r\n             */\r\n            this.overlap = undefined;\r\n        }\r\n\r\n        /**\r\n         * Get edge start point\r\n         */\r\n        get start() {\r\n            return this.shape.start;\r\n        }\r\n\r\n        /**\r\n         * Get edge end point\r\n         */\r\n        get end() {\r\n            return this.shape.end;\r\n        }\r\n\r\n        /**\r\n         * Get edge length\r\n         */\r\n        get length() {\r\n            return this.shape.length;\r\n        }\r\n\r\n        /**\r\n         * Get bounding box of the edge\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return this.shape.box;\r\n        }\r\n\r\n        /**\r\n         * Get middle point of the edge\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            return this.shape.middle();\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to the edge, false otherwise\r\n         * @param {Point} pt - test point\r\n         */\r\n        contains(pt) {\r\n            return this.shape.contains(pt);\r\n        }\r\n\r\n        /**\r\n         * Set inclusion flag of the edge with respect to another polygon\r\n         * Inclusion flag is one of Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY\r\n         * @param polygon\r\n         */\r\n        setInclusion(polygon) {\r\n            if (this.bv !== undefined) return this.bv;\r\n\r\n            if (this.bvStart === undefined) {\r\n                this.bvStart = Flatten.ray_shoot(polygon, this.start);\r\n            }\r\n            if (this.bvEnd === undefined) {\r\n                this.bvEnd = Flatten.ray_shoot(polygon, this.end);\r\n            }\r\n            /* At least one end outside - the whole edge outside */\r\n            if (this.bvStart === Flatten.OUTSIDE || this.bvEnd == Flatten.OUTSIDE) {\r\n                this.bv = Flatten.OUTSIDE;\r\n            }\r\n            /* At least one end inside - the whole edge inside */\r\n            else if (this.bvStart === Flatten.INSIDE || this.bvEnd == Flatten.INSIDE) {\r\n                this.bv = Flatten.INSIDE;\r\n            }\r\n            /* Both are boundary - check the middle point */\r\n            else {\r\n                let bvMiddle = Flatten.ray_shoot(polygon, this.middle());\r\n                this.bv = bvMiddle;\r\n            }\r\n            return this.bv;\r\n        }\r\n\r\n        /**\r\n         * Set overlapping between two coincident boundary edges\r\n         * Overlapping flag is one of Flatten.OVERLAP_SAME or Flatten.OVERLAP_OPPOSITE\r\n         * @param edge\r\n         */\r\n        setOverlap(edge) {\r\n            let flag = undefined;\r\n            let shape1 = this.shape;\r\n            let shape2 = edge.shape;\r\n\r\n            if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Segment) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n            else if (shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Arc) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.counterClockwise === shape2.counterClockwise &&\r\n                    shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.counterClockwise !== shape2.counterClockwise &&\r\n                    shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n            else if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Arc ||\r\n                shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Segment) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n\r\n            /* Do not update overlap flag if already set on previous chain */\r\n            if (this.overlap === undefined) this.overlap = flag;\r\n            if (edge.overlap === undefined) edge.overlap = flag;\r\n        }\r\n\r\n        svg() {\r\n            if (this.shape instanceof Flatten.Segment) {\r\n                return ` L${this.shape.end.x},${this.shape.end.y}`;\r\n            }\r\n            else if (this.shape instanceof  Flatten.Arc) {\r\n                let arc = this.shape;\r\n                let largeArcFlag;\r\n                let sweepFlag = arc.counterClockwise ? \"1\" : \"0\";\r\n\r\n                // Draw full circe arc as special case: split it into two half-circles\r\n                if (Flatten.Utils.EQ(arc.sweep, 2*Math.PI)) {\r\n                    let sign = arc.counterClockwise ? 1 : -1;\r\n                    let halfArc1 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle, arc.startAngle + sign*Math.PI, arc.counterClockwise);\r\n                    let halfArc2 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle + sign*Math.PI, arc.endAngle, arc.counterClockwise);\r\n\r\n                    largeArcFlag = \"0\";\r\n\r\n                    return ` A${halfArc1.r},${halfArc1.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc1.end.x},${halfArc1.end.y}\r\n                    A${halfArc2.r},${halfArc2.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc2.end.x},${halfArc2.end.y}`\r\n                }\r\n                else {\r\n                    largeArcFlag = arc.sweep <= Math.PI ? \"0\" : \"1\";\r\n\r\n                    return ` A${arc.r},${arc.r} 0 ${largeArcFlag},${sweepFlag} ${arc.end.x},${arc.end.y}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        toJSON() {\r\n            let json = this.shape.clone();\r\n            // json.name = this.shape.constructor.name;          // not pass webpack minification\r\n            json.name = this.shape instanceof  Flatten.Segment ? \"segment\" : \"arc\";\r\n            return json;\r\n        }\r\n    };\r\n};","/**\r\n * Created by Alex Bol on 3/7/2017.\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class Box represent bounding box of the shape\r\n     * @type {Box}\r\n     */\r\n    Flatten.Box = class Box {\r\n        /**\r\n         *\r\n         * @param {number} xmin - minimal x coordinate\r\n         * @param {number} ymin - minimal y coordinate\r\n         * @param {number} xmax - maximal x coordinate\r\n         * @param {number} ymax - maximal y coordinate\r\n         */\r\n        constructor(xmin=undefined, ymin=undefined, xmax=undefined, ymax=undefined) {\r\n            /**\r\n             * Minimal x coordinate\r\n             * @type {number}\r\n             */\r\n            this.xmin = xmin;\r\n            /**\r\n             * Minimal y coordinate\r\n             * @type {number}\r\n             */\r\n            this.ymin = ymin;\r\n            /**\r\n             * Maximal x coordinate\r\n             * @type {number}\r\n             */\r\n            this.xmax = xmax;\r\n            /**\r\n             * Maximal y coordinate\r\n             * @type {number}\r\n             */\r\n            this.ymax = ymax;\r\n        }\r\n\r\n        /**\r\n         * Clones and returns new instance of box\r\n         * @returns {Box}\r\n         */\r\n        clone() {\r\n            return new Box(this.xmin, this.ymin, this.xmax, this.ymax);\r\n        }\r\n\r\n        /**\r\n         * Property low need for interval tree interface\r\n         * @returns {Point}\r\n         */\r\n        get low() {\r\n            return new Flatten.Point(this.xmin, this.ymin);\r\n        }\r\n\r\n        /**\r\n         * Property high need for interval tree interface\r\n         * @returns {Point}\r\n         */\r\n        get high() {\r\n            return new Flatten.Point(this.xmax, this.ymax);\r\n        }\r\n\r\n        /**\r\n         * Property max returns the box itself !\r\n         * @returns {Box}\r\n         */\r\n        get max() {\r\n            return this.clone();\r\n        }\r\n\r\n        /**\r\n         * Returns true if not intersected with other box\r\n         * @param {Box} other_box - other box to test\r\n         * @returns {boolean}\r\n         */\r\n        notIntersect(other_box) {\r\n            return (\r\n                this.xmax < other_box.xmin ||\r\n                this.xmin > other_box.xmax ||\r\n                this.ymax < other_box.ymin ||\r\n                this.ymin > other_box.ymax\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Returns true if intersected with other box\r\n         * @param {Box} other_box - Query box\r\n         * @returns {boolean}\r\n         */\r\n        intersect(other_box) {\r\n            return !this.notIntersect(other_box);\r\n        }\r\n\r\n        /**\r\n         * Returns new box merged with other box\r\n         * @param {Box} other_box - Other box to merge with\r\n         * @returns {Box}\r\n         */\r\n        merge(other_box) {\r\n            return new Box(\r\n                this.xmin === undefined ? other_box.xmin : Math.min(this.xmin, other_box.xmin),\r\n                this.ymin === undefined ? other_box.ymin : Math.min(this.ymin, other_box.ymin),\r\n                this.xmax === undefined ? other_box.xmax : Math.max(this.xmax, other_box.xmax),\r\n                this.ymax === undefined ? other_box.ymax : Math.max(this.ymax, other_box.ymax)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Defines predicate \"less than\" between two boxes. Need for interval index\r\n         * @param {Box} other_box - other box\r\n         * @returns {boolean} - true if this box less than other box, false otherwise\r\n         */\r\n        less_than(other_box) {\r\n            if (this.low.lessThan(other_box.low))\r\n                return true;\r\n            if (this.low.equalTo(other_box.low) && this.high.lessThan(other_box.high))\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this box is equal to other box, false otherwise\r\n         * @param {Box} other_box - query box\r\n         * @returns {boolean}\r\n         */\r\n        equal_to(other_box) {\r\n            return (this.low.equalTo(other_box.low) && this.high.equalTo(other_box.high));\r\n        }\r\n\r\n        output() {\r\n            return this.clone();\r\n        }\r\n\r\n        maximal_val(box1, box2) {\r\n            // return pt1.lessThan(pt2) ? pt2.clone() : pt1.clone();\r\n            return box1.merge(box2);\r\n        }\r\n\r\n        val_less_than(pt1, pt2) {\r\n            return pt1.lessThan(pt2);\r\n        }\r\n\r\n        /**\r\n         * Set new values to the box object\r\n         * @param {number} xmin - miminal x coordinate\r\n         * @param {number} ymin - minimal y coordinate\r\n         * @param {number} xmax - maximal x coordinate\r\n         * @param {number} ymax - maximal y coordinate\r\n         */\r\n        set(xmin, ymin, xmax, ymax) {\r\n            this.xmin = xmin;\r\n            this.ymin = ymin;\r\n            this.xmax = xmax;\r\n            this.ymax = ymax;\r\n        }\r\n    };\r\n};\r\n","/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a circular arc\r\n     * @type {Arc}\r\n     */\r\n    Flatten.Arc = class Arc {\r\n        /**\r\n         *\r\n         * @param {Point} pc - arc center\r\n         * @param {number} r - arc radius\r\n         * @param {number} startAngle - start angle in radians from 0 to 2*PI\r\n         * @param {number} endAngle - end angle in radians from 0 to 2*PI\r\n         * @param {boolean} counterClockwise - arc direction, true - clockwise (or {@link Flatten.CCW}), false - counter clockwise (or {@link Flatten.CW)}\r\n         */\r\n        constructor(pc=new Flatten.Point(), r=1, startAngle=0, endAngle=2*Math.PI, counterClockwise=true) {\r\n            this.pc = pc.clone();\r\n            this.r = r;\r\n            this.startAngle = startAngle;\r\n            this.endAngle = endAngle;\r\n            this.counterClockwise = counterClockwise;\r\n        }\r\n\r\n        /**\r\n         * Return new instance of arc\r\n         * @returns {Arc}\r\n         */\r\n        clone() {\r\n            return new Flatten.Arc(this.pc.clone(), this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n        }\r\n\r\n        /**\r\n         * Get sweep angle in radians. Sweep angle is non-negative number from 0 to 2*PI\r\n         * @returns {number}\r\n         */\r\n        get sweep() {\r\n            if (Flatten.Utils.EQ(this.startAngle, this.endAngle))\r\n                return 0.0;\r\n            if (Flatten.Utils.EQ(Math.abs(this.startAngle - this.endAngle), Flatten.PIx2)) {\r\n                return Flatten.PIx2;\r\n            }\r\n            let sweep;\r\n            if (this.counterClockwise) {\r\n                sweep = Flatten.Utils.GT(this.endAngle, this.startAngle) ?\r\n                    this.endAngle - this.startAngle : this.endAngle - this.startAngle + Flatten.PIx2;\r\n            } else {\r\n                sweep = Flatten.Utils.GT(this.startAngle, this.endAngle) ?\r\n                    this.startAngle - this.endAngle : this.startAngle - this.endAngle + Flatten.PIx2;\r\n            }\r\n\r\n            if ( Flatten.Utils.GT(sweep, Flatten.PIx2) ) {\r\n                sweep -= Flatten.PIx2;\r\n            }\r\n            if ( Flatten.Utils.LT(sweep, 0) ) {\r\n                sweep += Flatten.PIx2;\r\n            }\r\n            return sweep;\r\n        }\r\n\r\n        /**\r\n         * Get start point of arc\r\n         * @returns {Point}\r\n         */\r\n        get start() {\r\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n            return p0.rotate(this.startAngle, this.pc);\r\n        }\r\n\r\n        /**\r\n         * Get end point of arc\r\n         * @returns {Point}\r\n         */\r\n        get end() {\r\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n            return p0.rotate(this.endAngle, this.pc);\r\n        }\r\n\r\n        /**\r\n         * Get center of arc\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return this.pc.clone();\r\n        }\r\n\r\n        get vertices() {\r\n            return [this.start.clone(), this.end.clone()];\r\n        }\r\n\r\n        /**\r\n         * Get arc length\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return Math.abs(this.sweep*this.r);\r\n        }\r\n\r\n        /**\r\n         * Get bounding box of the arc\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            let func_arcs = this.breakToFunctional();\r\n            let box = func_arcs.reduce( (acc, arc) => acc.merge(arc.start.box), new Flatten.Box() );\r\n            box = box.merge(this.end.box);\r\n            return box;\r\n        }\r\n\r\n        /**\r\n         * Returns true if arc contains point, false otherwise\r\n         * @param {Point} pt - point to test\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            // first check if  point on circle (pc,r)\r\n            if (!Flatten.Utils.EQ(this.pc.distanceTo(pt)[0], this.r))\r\n                return false;\r\n\r\n            // point on circle\r\n\r\n            if (pt.equalTo(this.start))\r\n                return true;\r\n\r\n            let angle = new Flatten.Vector(this.pc, pt).slope;\r\n            let test_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise);\r\n            return Flatten.Utils.LE(test_arc.length, this.length);\r\n        }\r\n\r\n        /**\r\n         * When given point belongs to arc, return array of two arcs split by this point. If points is incident\r\n         * to start or end point of the arc, return clone of the arc. If point does not belong to the arcs, return\r\n         * empty array.\r\n         * @param {Point} pt Query point\r\n         * @returns {Arc[]}\r\n         */\r\n        split(pt) {\r\n            if (!this.contains(pt))\r\n                return [];\r\n\r\n            if (Flatten.Utils.EQ_0(this.sweep))\r\n                return [this.clone()];\r\n\r\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\r\n                return [this.clone()];\r\n\r\n            let angle = new Flatten.Vector(this.pc, pt).slope;\r\n\r\n            return [\r\n                new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise),\r\n                new Flatten.Arc(this.pc, this.r, angle, this.endAngle, this.counterClockwise)\r\n            ]\r\n        }\r\n\r\n        /**\r\n         * Return middle point of the arc\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            let endAngle = this.counterClockwise === Flatten.CCW ? this.startAngle + this.sweep/2 : this.startAngle - this.sweep/2;\r\n            let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\r\n            return arc.end;\r\n        }\r\n\r\n        /**\r\n         * Returns chord height (\"sagitta\") of the arc\r\n         * @returns {number}\r\n         */\r\n        chordHeight() {\r\n            return  (1.0 - Math.cos(Math.abs(this.sweep/2.0))) * this.r;\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between arc and other shape\r\n         * @param {Shape} shape Shape of the one of supported types Line, Circle, Segment, Arc <br/>\r\n         * TODO: support Polygon and Planar Set\r\n         * @returns {Points[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Arc.intersectArc2Circle(this, shape);\r\n            }\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Arc.intersectArc2Arc(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from arc to shape and return array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from arc to shape\r\n         * @returns {Segment} shortest segment between arc and shape (started at arc, ended at shape)\r\n\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2arc(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [dist, shortest_segment] = Distance.arc2circle(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [dist, shortest_segment] = Distance.arc2line(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [dist, shortest_segment] = Distance.segment2arc(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.arc2arc(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Breaks arc in extreme point 0, pi/2, pi, 3*pi/2 and returns array of sub-arcs\r\n         * @returns {Arcs[]}\r\n         */\r\n        breakToFunctional() {\r\n            let func_arcs_array = [];\r\n            let angles = [0, Math.PI/2, 2*Math.PI/2, 3*Math.PI/2];\r\n            let pts = [\r\n                this.pc.translate(this.r,0),\r\n                this.pc.translate(0,this.r),\r\n                this.pc.translate(-this.r,0),\r\n                this.pc.translate(0,-this.r)\r\n            ];\r\n\r\n            // If arc contains extreme point,\r\n            // create test arc started at start point and ended at this extreme point\r\n            let test_arcs = [];\r\n            for (let i=0; i < 4; i++) {\r\n                if (pts[i].on(this)) {\r\n                    test_arcs.push(new Flatten.Arc(this.pc, this.r, this.startAngle, angles[i], this.counterClockwise));\r\n                }\r\n            }\r\n\r\n            if (test_arcs.length == 0) {                  // arc does contain any extreme point\r\n                func_arcs_array.push(this.clone());\r\n            }\r\n            else {                                        // arc passes extreme point\r\n                // sort these arcs by length\r\n                test_arcs.sort((arc1, arc2) => arc1.length - arc2.length);\r\n\r\n                for (let i = 0; i < test_arcs.length; i++) {\r\n                    let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                    let new_arc;\r\n                    if (prev_arc) {\r\n                        new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                    }\r\n                    else {\r\n                        new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                    }\r\n                    if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                        func_arcs_array.push(new_arc.clone());\r\n                    }\r\n                }\r\n\r\n                // add last sub arc\r\n                let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                let new_arc;\r\n                if (prev_arc) {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, this.endAngle, this.counterClockwise);\r\n                }\r\n                else {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n                }\r\n                if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                    func_arcs_array.push(new_arc.clone());\r\n                }\r\n            }\r\n            return func_arcs_array;\r\n        }\r\n\r\n        /**\r\n         * Return tangent unit vector in the start point in the direction from start to end\r\n         * @returns {Vector}\r\n         */\r\n        tangentInStart() {\r\n            let vec = new Flatten.Vector(this.pc, this.start);\r\n            let angle = this.counterClockwise ? Math.PI/2. : -Math.PI/2.;\r\n            let tangent = vec.rotate(angle).normalize();\r\n            return tangent;\r\n        }\r\n\r\n        /**\r\n         * Return tangent unit vector in the end point in the direction from end to start\r\n         * @returns {Vector}\r\n         */\r\n        tangentInEnd() {\r\n            let vec = new Flatten.Vector(this.pc, this.end);\r\n            let angle = this.counterClockwise ? -Math.PI/2. : Math.PI/2.;\r\n            let tangent = vec.rotate(angle).normalize();\r\n            return tangent;\r\n        }\r\n\r\n        /**\r\n         * Returns new arc with swapped start and end angles and reversed direction\r\n         * @returns {Arc}\r\n         */\r\n        reverse() {\r\n            return new Arc(this.pc, this.r, this.endAngle, this.startAngle, !this.counterClockwise);\r\n        }\r\n\r\n        static intersectArc2Arc(arc1, arc2) {\r\n            var ip = [];\r\n\r\n            if (arc1.box.notIntersect(arc2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Special case: overlapping arcs\r\n            // May return up to 4 intersection points\r\n            if (arc1.pc.equalTo(arc2.pc) && Flatten.Utils.EQ(arc1.r, arc2.r)) {\r\n                let pt;\r\n\r\n                pt = arc1.start;\r\n                if (pt.on(arc2))\r\n                    ip.push(pt);\r\n\r\n                pt = arc1.end;\r\n                if (pt.on(arc2))\r\n                    ip.push(pt);\r\n\r\n                pt = arc2.start;\r\n                if (pt.on(arc1)) ip.push(pt);\r\n\r\n                pt = arc2.end;\r\n                if (pt.on(arc1)) ip.push(pt);\r\n\r\n                return ip;\r\n            }\r\n\r\n            // Common case\r\n            let circle1 = new Flatten.Circle(arc1.pc, arc1.r);\r\n            let circle2 = new Flatten.Circle(arc2.pc, arc2.r);\r\n            let ip_tmp =  circle1.intersect(circle2);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc1) && pt.on(arc2)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectArc2Circle(arc, circle) {\r\n            let ip = [];\r\n\r\n            if (arc.box.notIntersect(circle.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Case when arc center incident to circle center\r\n            // Return arc's end points as 2 intersection points\r\n            if (circle.pc.equalTo(arc.pc) && Flatten.Utils.EQ(circle.r, arc.r)) {\r\n                ip.push(arc.start);\r\n                ip.push(arc.end);\r\n                return ip;\r\n            }\r\n\r\n            // Common case\r\n            let circle1 = circle;\r\n            let circle2 = new Flatten.Circle(arc.pc, arc.r);\r\n            let ip_tmp = circle1.intersect(circle2);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        definiteIntegral(ymin=0) {\r\n            let f_arcs = this.breakToFunctional();\r\n            let area = f_arcs.reduce( (acc, arc) => acc + arc.circularSegmentDefiniteIntegral(ymin), 0.0 );\r\n            return area;\r\n        }\r\n\r\n        circularSegmentDefiniteIntegral(ymin) {\r\n            let line = new Flatten.Line(this.start, this.end);\r\n            let onLeftSide = this.pc.leftTo(line);\r\n            let segment = new Flatten.Segment(this.start, this.end);\r\n            let areaTrapez = segment.definiteIntegral(ymin);\r\n            let areaCircularSegment = this.circularSegmentArea();\r\n            let area = onLeftSide ? areaTrapez - areaCircularSegment : areaTrapez + areaCircularSegment;\r\n            return area;\r\n        }\r\n\r\n        circularSegmentArea() {\r\n            return (0.5*this.r*this.r*(this.sweep - Math.sin(this.sweep)))\r\n        }\r\n\r\n        /**\r\n         * Return string to draw arc in svg\r\n         * @param {Object} attrs - json structure with attributes of svg path element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"3\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {stroke:\"black\", strokeWidth:\"3\", fill:\"none\"}) {\r\n            let largeArcFlag = this.sweep <= Math.PI ? \"0\" : \"1\";\r\n            let sweepFlag = this.counterClockwise ? \"1\" : \"0\";\r\n            let {stroke, strokeWidth, fill} = attrs;\r\n\r\n            if (Flatten.Utils.EQ(this.sweep, 2*Math.PI)) {\r\n                let circle = new Flatten.Circle(this.pc, this.r);\r\n                return circle.svg(attrs);\r\n            }\r\n            else {\r\n                return `\\n<path d=\"M${this.start.x},${this.start.y}\r\n                             A${this.r},${this.r} 0 ${largeArcFlag},${sweepFlag} ${this.end.x},${this.end.y}\"\r\n                    stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${fill}\"/>`\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create arc equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.arc = (...args) => new Flatten.Arc(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function (Flatten) {\r\n    /**\r\n     * Class representing a segment\r\n     * @type {Segment}\r\n     */\r\n    Flatten.Segment = class Segment {\r\n        /**\r\n         *\r\n         * @param {Point} ps - start point\r\n         * @param {Point} pe - end point\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Start point\r\n             * @type {Point}\r\n             */\r\n            this.ps = new Flatten.Point();\r\n            /**\r\n             * End Point\r\n             * @type {Point}\r\n             */\r\n            this.pe = new Flatten.Point();\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Array && args[0].length == 4) {\r\n                let coords = args[0];\r\n                this.ps = new Flatten.Point(coords[0], coords[1]);\r\n                this.pe = new Flatten.Point(coords[2], coords[3]);\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2 && args[0] instanceof Flatten.Point && args[1] instanceof Flatten.Point) {\r\n                this.ps = args[0].clone();\r\n                this.pe = args[1].clone();\r\n                return;\r\n            }\r\n\r\n            if (args.length == 4) {\r\n                this.ps = new Flatten.Point(args[0], args[1]);\r\n                this.pe = new Flatten.Point(args[2], args[3]);\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone copies segment and returns a new instance\r\n         * @returns {Segment}\r\n         */\r\n        clone() {\r\n            return new Flatten.Segment(this.start, this.end);\r\n        }\r\n\r\n        /**\r\n         * Start point\r\n         * @returns {Point}\r\n         */\r\n        get start() {\r\n            return this.ps;\r\n        }\r\n\r\n        /**\r\n         * End point\r\n         * @returns {Point}\r\n         */\r\n        get end() {\r\n            return this.pe;\r\n        }\r\n\r\n\r\n        /**\r\n         * Returns array of start and end point\r\n         * @returns [Point,Point]\r\n         */\r\n        get vertices() {\r\n            return [this.ps.clone(), this.pe.clone()];\r\n        }\r\n\r\n        /**\r\n         * Length of a segment\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return this.start.distanceTo(this.end)[0];\r\n        }\r\n\r\n        /**\r\n         * Slope of the line - angle to axe x in radians from 0 to 2PI\r\n         * @returns {number}\r\n         */\r\n        get slope() {\r\n            let vec = new Flatten.Vector(this.start, this.end);\r\n            return vec.slope;\r\n        }\r\n\r\n        /**\r\n         * Bounding box\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(\r\n                Math.min(this.start.x, this.end.x),\r\n                Math.min(this.start.y, this.end.y),\r\n                Math.max(this.start.x, this.end.x),\r\n                Math.max(this.start.y, this.end.y)\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Returns true if segment contains point\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            return Flatten.Utils.EQ_0(this.distanceToPoint(pt));\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between segment and other shape\r\n         * @param {Shape} shape - Shape of the one of supported types Line, Circle, Segment, Arc <br/>\r\n         * TODO: support Polygon and Planar Set\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Line) {\r\n                return Segment.intersectSegment2Line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return Segment.intersectSegment2Segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Segment.intersectSegment2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Segment.intersectSegment2Arc(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from segment to shape and return as array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from segment to shape\r\n         * @returns {Segment} shortest segment between segment and shape (started at segment, ended at shape)\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2segment(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [dist, shortest_segment] = Distance.segment2circle(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [dist, shortest_segment] = Distance.segment2line(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [dist, shortest_segment] = Distance.segment2segment(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.segment2arc(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns unit vector in the direction from start to end\r\n         * @returns {Vector}\r\n         */\r\n        tangentInStart() {\r\n            let vec = new Flatten.Vector(this.start, this.end);\r\n            return vec.normalize();\r\n        }\r\n\r\n        /**\r\n         * Return unit vector in the direction from end to start\r\n         * @returns {Vector}\r\n         */\r\n        tangentInEnd() {\r\n            let vec = new Flatten.Vector(this.end, this.start);\r\n            return vec.normalize();\r\n        }\r\n\r\n        /**\r\n         * Returns new segment with swapped start and end points\r\n         * @returns {Segment}\r\n         */\r\n        reverse() {\r\n            return new Segment(this.end, this.start);\r\n        }\r\n\r\n        /**\r\n         * When point belongs to segment, return array of two segments split by given point,\r\n         * if point is inside segment. Returns clone of this segment if query point is incident\r\n         * to start or end point of the segment. Returns empty array if point does not belong to segment\r\n         * @param {Point} pt Query point\r\n         * @returns {Segment[]}\r\n         */\r\n        split(pt) {\r\n            if (!this.contains(pt))\r\n                return [];\r\n\r\n            if (this.start.equalTo(this.end))\r\n                return [this.clone()];\r\n\r\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\r\n                return [this];\r\n\r\n            return [\r\n                new Flatten.Segment(this.start, pt),\r\n                new Flatten.Segment(pt, this.end)\r\n            ]\r\n        }\r\n\r\n        /**\r\n         * Return middle point of the segment\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            return new Flatten.Point((this.start.x + this.end.x)/2, (this.start.y + this.end.y)/2);\r\n        }\r\n\r\n        distanceToPoint(pt) {\r\n            let [dist, ...rest] = Flatten.Distance.point2segment(pt, this);\r\n            return dist;\r\n        };\r\n\r\n        definiteIntegral(ymin = 0.0) {\r\n            let dx = this.end.x - this.start.x;\r\n            let dy1 = this.start.y - ymin;\r\n            let dy2 = this.end.y - ymin;\r\n            return ( dx * (dy1 + dy2) / 2 );\r\n        }\r\n\r\n        static intersectSegment2Line(seg, line) {\r\n            let ip = [];\r\n            let zero_segment = Flatten.Utils.EQ_0(seg.length);\r\n\r\n            // Boundary cases\r\n            if (seg.ps.on(line)) {\r\n                ip.push(seg.ps);\r\n            }\r\n            // If both ends lay on line, return two intersection points\r\n            if (seg.pe.on(line) && !zero_segment) {\r\n                ip.push(seg.pe);\r\n            }\r\n\r\n            if (ip.length > 0) {\r\n                return ip;          // done, intersection found\r\n            }\r\n\r\n            // Not a boundary case, check if both points are on the same side and\r\n            // hence there is no intersection\r\n            if (seg.ps.leftTo(line) && seg.pe.leftTo(line) ||\r\n                !seg.ps.leftTo(line) && !seg.pe.leftTo(line)) {\r\n                return ip;\r\n            }\r\n\r\n            // Calculate intersection between lines\r\n            let line1 = new Flatten.Line(seg.ps, seg.pe);\r\n            return line1.intersect(line);\r\n        }\r\n\r\n        static intersectSegment2Segment(seg1, seg2) {\r\n            let ip = [];\r\n\r\n            // quick reject\r\n            if (seg1.box.notIntersect(seg2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line1 = new Flatten.Line(seg1.ps, seg1.pe);\r\n            let line2 = new Flatten.Line(seg2.ps, seg2.pe);\r\n\r\n            // Check overlapping between segments in case of incidence\r\n            // If segments touching, add one point. If overlapping, add two points\r\n            if (line1.incidentTo(line2)) {\r\n                if (seg1.ps.on(seg2)) {\r\n                    ip.push(seg1.ps);\r\n                }\r\n                if (seg1.pe.on(seg2)) {\r\n                    ip.push(seg1.pe);\r\n                }\r\n                if (seg2.ps.on(seg1) && !seg2.ps.equalTo(seg1.ps) && !seg2.ps.equalTo(seg1.pe)) {\r\n                    ip.push(seg2.ps);\r\n                }\r\n                if (seg2.pe.on(seg1) && !seg2.pe.equalTo(seg1.ps) && !seg2.pe.equalTo(seg1.pe)) {\r\n                    ip.push(seg2.pe);\r\n                }\r\n            }\r\n            else {                /* not incident - parallel or intersect */\r\n                // Calculate intersection between lines\r\n                let new_ip = line1.intersect(line2);\r\n                if (new_ip.length > 0 && new_ip[0].on(seg1) && new_ip[0].on(seg2)) {\r\n                    ip.push(new_ip[0]);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        static intersectSegment2Circle(segment, circle) {\r\n            let ips = [];\r\n\r\n            if (segment.box.notIntersect(circle.box)) {\r\n                return ips;\r\n            }\r\n\r\n            let line = new Flatten.Line(segment.ps, segment.pe);\r\n\r\n            let ips_tmp = line.intersect(circle);\r\n\r\n            for (let ip of ips_tmp) {\r\n                if (ip.on(segment)) {\r\n                    ips.push(ip);\r\n                }\r\n            }\r\n\r\n            return ips;\r\n        }\r\n\r\n        static intersectSegment2Arc(segment, arc) {\r\n            let ip = [];\r\n\r\n            if (segment.box.notIntersect(arc.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line = new Flatten.Line(segment.ps, segment.pe);\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n            let ip_tmp = line.intersect(circle);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(segment) && pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n\r\n        }\r\n\r\n        /**\r\n         * Return string to draw segment in svg\r\n         * @param {Object} attrs - Object with attributes for svg path element,\r\n         * like \"stroke\", \"strokeWidth\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"3\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {stroke: \"black\", strokeWidth: \"3\"}) {\r\n            let {stroke, strokeWidth} = attrs;\r\n            return `\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" />`;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shortcut method to create new segment\r\n     */\r\n    Flatten.segment = (...args) => new Flatten.Segment(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/6/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Arc,vector} = Flatten;\r\n    /**\r\n     * Class representing a circle\r\n     * @type {Circle}\r\n     */\r\n    Flatten.Circle = class Circle {\r\n        /**\r\n         *\r\n         * @param {Point} pc - circle center point\r\n         * @param {number} r - circle radius\r\n         */\r\n        constructor(pc, r) {\r\n            /**\r\n             * Circle center\r\n             * @type {Point}\r\n             */\r\n            this.pc = pc;\r\n            /**\r\n             * Circle radius\r\n             * @type {number}\r\n             */\r\n            this.r = r;\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new instance of a Circle\r\n         * @returns {Circle}\r\n         */\r\n        clone() {\r\n            return new Flatten.Circle(this.pc.clone(), this.r);\r\n        }\r\n\r\n        /**\r\n         * Circle center\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return this.pc;\r\n        }\r\n\r\n        /**\r\n         * Circle bounding box\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(\r\n                this.pc.x - this.r,\r\n                this.pc.y - this.r,\r\n                this.pc.x + this.r,\r\n                this.pc.y + this.r\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Return true if circle contains point\r\n         * @param {Point} pt - test point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            return Flatten.Utils.LE(pt.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        /**\r\n         * Transform circle to closed arc\r\n         * @param {boolean} counterclockwise\r\n         * @returns {Arc}\r\n         */\r\n        toArc(counterclockwise=true) {\r\n            return new Flatten.Arc(this.center, this.r, Math.PI, -Math.PI, counterclockwise);\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between circle and other shape\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Circle.intersectCirle2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return shape.intersect(this);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from circle to shape and return array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from circle to shape\r\n         * @returns {Segment} shortest segment between circle and shape (started at circle, ended at shape)\r\n\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n            let {point2circle, circle2circle, circle2line, segment2circle, arc2circle} = Distance;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [distance, shortest_segment] = point2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [distance, shortest_segment] = circle2circle(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [distance, shortest_segment] = circle2line(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [distance, shortest_segment] = segment2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [distance, shortest_segment] = arc2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        static intersectCirle2Circle(circle1, circle2) {\r\n            let ip = [];\r\n\r\n            if (circle1.box.notIntersect(circle2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let vec = new Flatten.Vector(circle1.pc, circle2.pc);\r\n\r\n            let r1 = circle1.r;\r\n            let r2 = circle2.r;\r\n\r\n            // Degenerated circle\r\n            if (Flatten.Utils.EQ_0(r1) || Flatten.Utils.EQ_0(r2))\r\n                return ip;\r\n\r\n            // In case of equal circles return one leftmost point\r\n            if (Flatten.Utils.EQ_0(vec.x) && Flatten.Utils.EQ_0(vec.y) && Flatten.Utils.EQ(r1, r2)) {\r\n                ip.push(circle1.pc.translate(-r1, 0));\r\n                return ip;\r\n            }\r\n\r\n            let dist = circle1.pc.distanceTo(circle2.pc)[0];\r\n\r\n            if (Flatten.Utils.GT(dist, r1 + r2))               // circles too far, no intersections\r\n                return ip;\r\n\r\n            if (Flatten.Utils.LT(dist, Math.abs(r1 - r2)))     // one circle is contained within another, no intersections\r\n                return ip;\r\n\r\n            // Normalize vector.\r\n            vec.x /= dist;\r\n            vec.y /= dist;\r\n\r\n            let pt;\r\n\r\n            // Case of touching from outside or from inside - single intersection point\r\n            // TODO: check this specifically not sure if correct\r\n            if (Flatten.Utils.EQ(dist, r1 + r2) || Flatten.Utils.EQ(dist, Math.abs(r1 - r2))) {\r\n                pt = circle1.pc.translate(r1*vec.x, r1*vec.y);\r\n                ip.push(pt);\r\n                return ip;\r\n            }\r\n\r\n            // Case of two intersection points\r\n\r\n            // Distance from first center to center of common chord:\r\n            //   a = (r1^2 - r2^2 + d^2) / 2d\r\n            // Separate for better accuracy\r\n            let a = (r1*r1)/(2*dist) - (r2*r2)/(2*dist) + dist/2;\r\n\r\n            let mid_pt = circle1.pc.translate(a*vec.x, a*vec.y);\r\n            let h = Math.sqrt(r1*r1 - a*a);\r\n            // let norm;\r\n\r\n            // norm = vec.rotate90CCW().multiply(h);\r\n            pt = mid_pt.translate(vec.rotate90CCW().multiply(h));\r\n            ip.push(pt);\r\n\r\n            // norm = vec.rotate90CW();\r\n            pt = mid_pt.translate(vec.rotate90CW().multiply(h));\r\n            ip.push(pt);\r\n\r\n            return ip;\r\n        }\r\n\r\n        /**\r\n         * Return string to draw circle in svg\r\n         * @param {Object} attrs - json structure with attributes of svg circle element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"3\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {stroke:\"black\",strokeWidth:\"3\",fill:\"none\"}) {\r\n            let {stroke, strokeWidth, fill} = attrs;\r\n            return `\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\" stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${fill}\" />`;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shortcut to create new circle\r\n     * @param args\r\n     */\r\n    Flatten.circle = (...args) => new Flatten.Circle(...args);\r\n};","/**\r\n * Created by Alex Bol on 2/20/2017.\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a line\r\n     * @type {Line}\r\n     */\r\n    Flatten.Line = class Line {\r\n        /**\r\n         * Line may be constructed by point and normal vector or by two points that a line passes through\r\n         * @param {Point} pt - point that a line passes through\r\n         * @param {Vector|Point} norm - normal vector to a line or second point a line passes through\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Point a line passes through\r\n             * @type {Point}\r\n             */\r\n            this.pt = new Flatten.Point();\r\n            /**\r\n             * Normal unit vector to a line\r\n             * @type {Vector}\r\n             */\r\n            this.norm = new Flatten.Vector(0,1);\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2) {\r\n                let a1 = args[0];\r\n                let a2 = args[1];\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                    this.pt = a1;\r\n                    this.norm = Line.points2norm(a1, a2);\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Vector) {\r\n                    if (Flatten.Utils.EQ_0(a2.x) && Flatten.Utils.EQ_0(a2.y)) {\r\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                    }\r\n                    this.pt = a1.clone();\r\n                    this.norm = a2.clone();\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Vector && a2 instanceof Flatten.Point) {\r\n                    if (Flatten.Utils.EQ_0(a1.x) && Flatten.Utils.EQ_0(a1.y)) {\r\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                    }\r\n                    this.pt = a2.clone();\r\n                    this.norm = a1.clone();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Returns cloned new instance of a line\r\n         * @returns {Line}\r\n         */\r\n        clone() {\r\n            return new Flatten.Line(this.pt, this.norm);\r\n        }\r\n\r\n        /**\r\n         * Slope of the line - angle in radians between line and axe x from 0 to 2PI\r\n         * @returns {number} - slope of the line\r\n         */\r\n        get slope() {\r\n            let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\r\n            return vec.slope;\r\n        }\r\n\r\n        /**\r\n         * Get coefficients [A,B,C] of a standard line equation in the form Ax + By = C\r\n         * @code [A, B, C] = line.standard\r\n         * @returns {number[]} - array of coefficients\r\n         */\r\n        get standard() {\r\n            let A = this.norm.x;\r\n            let B = this.norm.y;\r\n            let C = this.norm.dot(this.pt);\r\n\r\n            return [A,B,C];\r\n        }\r\n\r\n        /**\r\n         * Return true if parallel or incident to other line\r\n         * @param {Line} other_line - line to check\r\n         * @returns {boolean}\r\n         */\r\n        parallelTo(other_line) {\r\n            return Flatten.Utils.EQ_0(this.norm.cross(other_line.norm));\r\n        }\r\n\r\n        /**\r\n         * Returns true if incident to other line\r\n         * @param {Line} other_line - line to check\r\n         * @returns {boolean}\r\n         */\r\n        incidentTo(other_line) {\r\n            return ( (this.norm.equalTo(other_line.norm) || this.norm.equalTo(other_line.norm.invert())) &&\r\n                this.pt.on(other_line));\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to line\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            if (this.pt.equalTo(pt)) {\r\n                return true;\r\n            }\r\n            /* Line contains point if vector to point is orthogonal to the line normal vector */\r\n            let vec = new Flatten.Vector(this.pt, pt);\r\n            return Flatten.Utils.EQ_0(this.norm.dot(vec));\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points\r\n         * @param {Shape} shape - shape to intersect with of the type Line, Circle, Segment, Arc\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Line) {\r\n                return Line.intersectLine2Line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Line.intersectLine2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Line.intersectLine2Arc(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from line to shape and returns array [distance, shortest_segment]\r\n         * @param {Shape} shape Shape of the one of the types Point, Circle, Segment, Arc, Polygon\r\n         * @returns {Number}\r\n         * @returns {Segment}\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [distance, shortest_segment] = Distance.point2line(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [distance, shortest_segment] = Distance.circle2line(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [distance, shortest_segment] = Distance.segment2line(shape, this);\r\n                return [distance, shortest_segment.reverse()];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [distance, shortest_segment] = Distance.arc2line(shape, this);\r\n                return [distance, shortest_segment.reverse()];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n        }\r\n\r\n        static points2norm(pt1, pt2) {\r\n            if (pt1.equalTo(pt2)) {\r\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n            }\r\n            let vec = new Flatten.Vector(pt1, pt2);\r\n            let unit = vec.normalize();\r\n            return unit.rotate90CCW();\r\n        }\r\n\r\n        static intersectLine2Line(line1, line2) {\r\n            let ip = [];\r\n\r\n            let [A1, B1, C1] = line1.standard;\r\n            let [A2, B2, C2] = line2.standard;\r\n\r\n            /* Cramer's rule */\r\n            let det = A1*B2 - B1*A2;\r\n            let detX = C1*B2 - B1*C2;\r\n            let detY = A1*C2 - C1*A2;\r\n\r\n            if (!Flatten.Utils.EQ_0(det)) {\r\n                let new_ip = new Flatten.Point( detX/det, detY/det );\r\n                ip.push(new_ip);\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Circle(line, circle) {\r\n            let ip = [];\r\n            let prj = circle.pc.projectionOn(line);            // projection of circle center on line\r\n            let dist = circle.pc.distanceTo(prj)[0];              // distance from circle center to projection\r\n\r\n            if (Flatten.Utils.EQ(dist, circle.r)) {            // line tangent to circle - return single intersection point\r\n                ip.push(prj);\r\n            }\r\n            else if (Flatten.Utils.LT(dist, circle.r)) {       // return two intersection points\r\n                var delta = Math.sqrt(circle.r*circle.r - dist*dist);\r\n                var v_trans, pt;\r\n\r\n                v_trans = line.norm.rotate90CCW().multiply(delta);\r\n                pt = prj.translate(v_trans);\r\n                ip.push(pt);\r\n\r\n                v_trans = line.norm.rotate90CW().multiply(delta);\r\n                pt = prj.translate(v_trans);\r\n                ip.push(pt);\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Box(line, box) {\r\n            let pts = [\r\n                new Flatten.Point(box.xmin, box.ymin),\r\n                new Flatten.Point(box.xmax, box.ymin),\r\n                new Flatten.Point(box.xmax, box.ymax),\r\n                new Flatten.Point(box.xmin, box.ymax)\r\n            ];\r\n            let segs = [\r\n                new Flatten.Segment(pts[0], pts[1]),\r\n                new Flatten.Segment(pts[1], pts[2]),\r\n                new Flatten.Segment(pts[2], pts[3]),\r\n                new Flatten.Segment(pts[3], pts[0])\r\n            ];\r\n\r\n            let ips =  [];\r\n\r\n            for(let seg of segs) {\r\n                let ips_tmp = seg.intersect(line);\r\n                for (let ip of ips_tmp) {\r\n                    ips.push(ip);\r\n                }\r\n            };\r\n            return ips;\r\n        }\r\n\r\n        static intersectLine2Arc(line, arc) {\r\n            let ip = [];\r\n\r\n            if (Line.intersectLine2Box(line, arc.box).length == 0) {\r\n                return ip;\r\n            }\r\n\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n            let ip_tmp = line.intersect(circle);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create line equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.line = (...args) => new Flatten.Line(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a vector\r\n     * @type {Vector}\r\n     */\r\n    Flatten.Vector = class Vector {\r\n        /**\r\n         * Vector may be constructed by two points, or by two float numbers\r\n         * @param {Point} ps - start point\r\n         * @param {Point} pe - end point\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * x-coordinate of a vector (float number)\r\n             * @type {number}\r\n             */\r\n            this.x = 0;\r\n            /**\r\n             * y-coordinate of a vector (float number)\r\n             * @type {number}\r\n             */\r\n            this.y = 0;\r\n\r\n            /* return zero vector */\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2) {\r\n                let a1 = args[0];\r\n                let a2 = args[1];\r\n\r\n                if (typeof(a1) == \"number\" && typeof(a2) == \"number\") {\r\n                    this.x = a1;\r\n                    this.y = a2;\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                    this.x = a2.x - a1.x;\r\n                    this.y = a2.y - a1.y;\r\n                    return;\r\n                }\r\n\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new instance of Vector\r\n         * @returns {Vector}\r\n         */\r\n        clone() {\r\n            return new Vector(this.x, this.y);\r\n        }\r\n\r\n        /**\r\n         * Slope of the vector in radians from 0 to 2PI\r\n         * @returns {number}\r\n         */\r\n        get slope() {\r\n            let angle = Math.atan2(this.y, this.x);\r\n            if (angle<0) angle = 2*Math.PI + angle;\r\n            return angle;\r\n        }\r\n\r\n        /**\r\n         * Length of vector\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return Math.sqrt(this.dot(this));\r\n        }\r\n\r\n        /**\r\n         * Returns true if vectors are equal up to DP_TOL tolerance\r\n         * @param {Vector} v\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(v) {\r\n            return Flatten.Utils.EQ(this.x, v.x) && Flatten.Utils.EQ(this.y, v.y);\r\n        }\r\n\r\n        /**\r\n         * Returns new vector multiplied by scalar\r\n         * @param {number} scalar\r\n         * @returns {Vector}\r\n         */\r\n        multiply(scalar) {\r\n            return ( new Vector(scalar * this.x, scalar * this.y) );\r\n        }\r\n\r\n        /**\r\n         * Returns scalar product between two vectors <br/>\r\n         * <code>dot_product = (this * v)</code>\r\n         * @param {Vector} v Other vector\r\n         * @returns {number}\r\n         */\r\n        dot(v) {\r\n            return ( this.x * v.x + this.y * v.y );\r\n        }\r\n\r\n        /**\r\n         * Returns vector product (magnitude) between two vectors <br/>\r\n         * <code>cross_product = (this x v)</code>\r\n         * @param {Vector} v Other vector\r\n         * @returns {number}\r\n         */\r\n        cross(v) {\r\n            return ( this.x * v.y - this.y * v.x );\r\n        }\r\n\r\n        /**\r\n         * Returns unit vector.<br/>\r\n         * Throw error if given vector has zero length\r\n         * @returns {Vector}\r\n         */\r\n        normalize() {\r\n            if (!Flatten.Utils.EQ_0(this.length)) {\r\n                return ( new Vector(this.x / this.length, this.y / this.length) );\r\n            }\r\n            throw Flatten.Errors.ZERO_DIVISION;\r\n        }\r\n\r\n        /**\r\n         * Returns new vector rotated by given angle, positive angle defines rotation in counter clockwise direction\r\n         * @param {number} angle - Angle in radians\r\n         * @returns {Vector}\r\n         */\r\n        rotate(angle) {\r\n            let point = new Flatten.Point(this.x, this.y);\r\n            let rpoint = point.rotate(angle);\r\n            return new Flatten.Vector(rpoint.x, rpoint.y);\r\n        }\r\n\r\n        /**\r\n         * Returns vector rotated 90 degrees counter clockwise\r\n         * @returns {Vector}\r\n         */\r\n        rotate90CCW() {\r\n            return new Flatten.Vector(-this.y, this.x);\r\n        };\r\n\r\n        /**\r\n         * Returns vector rotated 90 degrees clockwise\r\n         * @returns {Vector}\r\n         */\r\n        rotate90CW() {\r\n            return new Flatten.Vector(this.y, -this.x);\r\n        };\r\n\r\n        /**\r\n         * Return inverted vector\r\n         * @returns {Vector}\r\n         */\r\n        invert() {\r\n            return new Flatten.Vector(-this.x, -this.y);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create vector equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.vector = (...args) => new Flatten.Vector(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n *\r\n * @param Flatten\r\n */\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     *\r\n     * Class representing a point\r\n     * @type {Point}\r\n     */\r\n    Flatten.Point = class Point {\r\n        /**\r\n         *\r\n         * @param {number} x - x-coordinate (float number)\r\n         * @param {number} y - y-coordinate (float number)\r\n         */\r\n        constructor(x = 0, y = 0) {\r\n            /**\r\n             * x-coordinate (float number)\r\n             * @type {number}\r\n             */\r\n            this.x = Number.isNaN(x) ? 0 : x;\r\n            /**\r\n             * y-coordinate (float number)\r\n             * @type {number}\r\n             */\r\n            this.y = Number.isNaN(y) ? 0: y;\r\n        }\r\n\r\n        /**\r\n         * Returns bounding box of a point\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(this.x, this.y, this.x, this.y);\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new copied instance of point\r\n         * @returns {Point}\r\n         */\r\n        clone() {\r\n            return new Flatten.Point(this.x, this.y);\r\n        }\r\n\r\n        get vertices() {\r\n            return [this.clone()];\r\n        }\r\n\r\n        /**\r\n         * Returns true if points are equal up to [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(pt) {\r\n            return Flatten.Utils.EQ(this.x, pt.x) && Flatten.Utils.EQ(this.y, pt.y);\r\n        }\r\n\r\n        /**\r\n         * Defines predicate \"less than\" between points. Returns true if the point is less than query points, false otherwise <br/>\r\n         * By definition point1 < point2 if {point1.y < point2.y || point1.y == point2.y && point1.x < point2.y <br/>\r\n         * Numeric values compared with [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        lessThan(pt) {\r\n            if (Flatten.Utils.LT(this.y, pt.y))\r\n                return true;\r\n            if (Flatten.Utils.EQ(this.y, pt.y) && Flatten.Utils.LT(this.x, pt.x))\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns new point rotated by given angle around given center point.\r\n         * If center point is omitted, rotates around zero point (0,0).\r\n         * Positive value of angle defines rotation in counter clockwise direction,\r\n         * negative angle defines rotation in clockwise clockwise direction\r\n         * @param {number} angle - angle in radians\r\n         * @param {Point} [center=(0,0)] center\r\n         * @returns {Point}\r\n         */\r\n        rotate(angle, center = {x:0, y:0}) {\r\n            var x_rot = center.x + (this.x - center.x) * Math.cos(angle) - (this.y - center.y) * Math.sin(angle);\r\n            var y_rot = center.y + (this.x - center.x) * Math.sin(angle) + (this.y - center.y) * Math.cos(angle);\r\n\r\n            return new Flatten.Point(x_rot, y_rot);\r\n        }\r\n\r\n        /**\r\n         * Returns new point translated by given vector.\r\n         * Translation vector may by also defined by a pair of numbers.\r\n         * @param {Vector} vector - Translation vector defined as Flatten.Vector or\r\n         * @param {number|number} - Translation vector defined as pair of numbers\r\n         * @returns {Point}\r\n         */\r\n        translate(...args) {\r\n            if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\r\n                return new Flatten.Point(this.x + args[0].x, this.y + args[0].y);\r\n            }\r\n\r\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                return new Flatten.Point(this.x + args[0], this.y + args[1]);\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Returns projection point on given line\r\n         * @param {Line} line Line this point be projected on\r\n         * @returns {Point}\r\n         */\r\n        projectionOn(line) {\r\n            if (this.equalTo(line.pt))                   // this point equal to line anchor point\r\n                return this.clone();\r\n\r\n            let vec = new Flatten.Vector(this, line.pt);\r\n            if (Flatten.Utils.EQ_0(vec.cross(line.norm)))    // vector to point from anchor point collinear to normal vector\r\n                return line.pt.clone();\r\n\r\n            let dist = vec.dot(line.norm);             // signed distance\r\n            let proj_vec = line.norm.multiply(dist);\r\n            return this.translate(proj_vec);\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to the \"left\" semi-plane, which means, point belongs to the same semi plane where line normal vector points to\r\n         * Return false if point belongs to the \"right\" semi-plane or to the line itself\r\n         * @param {Line} line Query line\r\n         * @returns {boolean}\r\n         */\r\n        leftTo(line) {\r\n            let vec = new Flatten.Vector(line.pt, this);\r\n            let onLeftSemiPlane = Flatten.Utils.GT(vec.dot(line.norm), 0);\r\n            return onLeftSemiPlane;\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from point to shape and return as array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from point to shape\r\n         * @returns {Segment} shortest segment between point and shape (started at point, ended at shape)\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Point) {\r\n                let dx = shape.x - this.x;\r\n                let dy = shape.y - this.y;\r\n                return [Math.sqrt(dx*dx + dy*dy), new Flatten.Segment(this, shape)];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Distance.point2line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Distance.point2circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return Distance.point2segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                // let [dist, ...rest] = Distance.point2arc(this, shape);\r\n                // return dist;\r\n                return Distance.point2arc(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                // let [dist, ...rest] = Distance.point2polygon(this, shape);\r\n                // return dist;\r\n                return Distance.point2polygon(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                return Distance.shape2planarSet(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true if point is on a shape, false otherwise\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon\r\n         * @returns {boolean}\r\n         */\r\n        on(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.equalTo(shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof  Flatten.Segment) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return shape.contains(this);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return string to draw point in svg as circle with radius \"r\" <br/>\r\n         * Defaults attrs is an object:\r\n         * {\r\n         *    r:\"5\",\r\n         *    stroke:\"black\",\r\n         *    strokeWidth:\"1\",\r\n         *    fill:\"red\"\r\n         * }\r\n         * @param {Object} attrs - Attributes of svg circle element: \"r\", \"stroke\", \"strokeWidth\", \"fill\"\r\n         * @returns {String}\r\n         */\r\n        svg(attrs = {r:\"5\",stroke:\"black\",strokeWidth:\"1\",fill:\"red\"}) {\r\n            let {r, stroke, strokeWidth, fill} = attrs;\r\n            return `\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${r}\" stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${fill}\" />`;\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Function to create point equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.point = (...args) => new Flatten.Point(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\nlet Interval = class Interval {\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    get max() {\r\n        return this.high;\r\n    }\r\n\r\n    interval(low, high) {\r\n        return new Interval(low, high);\r\n    }\r\n\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    maximal_val(val1, val2) {\r\n        return Math.max(val1, val2);\r\n    }\r\n\r\n    val_less_than(val1, val2 ) {     // trait to compare max property with item ?\r\n        return val1 < val2;\r\n    }\r\n};\r\n\r\nmodule.exports = Interval;","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n'use strict';\r\n\r\n// let defaultTraits = require('../utils/numeric_traits');\r\nlet Interval = require('../classes/interval');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('../utils/constants');\r\n\r\nlet Node = class Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be       instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        return this.item.key.less_than(other_node.item.key);\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        let value_equal = true;\r\n        if (this.item.value && other_node.item.value) {\r\n            value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n        }\r\n        return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key.clone();\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let high = this.left.max.high ? this.left.max.high : this.left.max;\r\n        return val_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let low = this.right.max.low ? this.right.max.low : this.right.item.key.low;\r\n        return val_less_than(search_node.item.key.high, low);\r\n    }\r\n};\r\n\r\nmodule.exports = Node;\r\n\r\n","/**\r\n * Created by Alex Bol on 3/12/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\n// require(\"babel-polyfill\");\r\n\r\nlet IntervalTree = require('flatten-interval-tree');\r\n\r\nmodule.exports = function (Flatten) {\r\n    /**\r\n     * Class representing a planar set - a generic container with ability to keep and retrieve shapes and\r\n     * perform spatial queries. Planar set is an extension of Set container, so it supports\r\n     * Set properties and methods\r\n     */\r\n    Flatten.PlanarSet = class PlanarSet extends Set {\r\n        /**\r\n         * Create new empty instance of PlanarSet\r\n         */\r\n        constructor() {\r\n            super();\r\n            this.index = new IntervalTree();\r\n        }\r\n\r\n        /**\r\n         * Add new shape to planar set and to its spatial index.<br/>\r\n         * If shape already exist, it will not be added again.\r\n         * This happens with no error, it is possible to use <i>size</i> property to check if\r\n         * a shape was actually added.<br/>\r\n         * Method returns planar set object updated and may be chained\r\n         * @param {Shape} shape - shape to be added, should have valid <i>box</i> property\r\n         * @returns {PlanarSet}\r\n         */\r\n        add(shape) {\r\n            let size = this.size;\r\n            super.add(shape);\r\n            // size not changed - item not added, probably trying to add same item twice\r\n            if (this.size > size) {\r\n                let node = this.index.insert(shape.box, shape);\r\n            }\r\n            return this;         // in accordance to Set.add interface\r\n        }\r\n\r\n        /**\r\n         * Delete shape from planar set. Returns true if shape was actually deleted, false otherwise\r\n         * @param {Shape} shape - shape to be deleted\r\n         * @returns {boolean}\r\n         */\r\n        delete(shape) {\r\n            let deleted = super.delete(shape);\r\n            if (deleted) {\r\n                this.index.remove(shape.box, shape);\r\n            }\r\n            return deleted;\r\n        }\r\n\r\n        // update(shape) {\r\n        //     if (super.has(shape)) {\r\n        //         this.delete(shape);\r\n        //     }\r\n        //     this.add(shape);\r\n        //\r\n        //     return this;\r\n        // }\r\n\r\n        clear() {\r\n\r\n        }\r\n\r\n        /**\r\n         * 2d range search in planar set.<br/>\r\n         * Returns array of all shapes in planar set which bounding box is intersected with query box\r\n         * @param {Box} box - query box\r\n         * @returns {Shapes[]}\r\n         */\r\n        search(box) {\r\n            let resp = this.index.search(box);\r\n            return resp;\r\n        }\r\n\r\n        /**\r\n         * Point location test. Returns array of shapes which contains given point\r\n         * @param {Point} point - query point\r\n         * @returns {Array}\r\n         */\r\n        hit(point) {\r\n            let box = new Flatten.Box(point.x - 1, point.y - 1, point.x + 1, point.y + 1);\r\n            let resp = this.index.search(box);\r\n            return resp.filter((shape) => point.on(shape));\r\n        }\r\n\r\n        /**\r\n         * Returns svg string to draw all shapes in planar set\r\n         * @returns {String}\r\n         */\r\n        svg() {\r\n            let svgcontent = [...this].reduce((acc, shape) => acc + shape.svg(), \"\");\r\n            return svgcontent;\r\n        }\r\n    }\r\n};\r\n\r\n","/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\nmodule.exports = {\r\n    ILLEGAL_PARAMETERS: new ReferenceError('Illegal Parameters'),\r\n    ZERO_DIVISION: new Error('Zero division')\r\n};\r\n\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\nconst DP_TOL = 0.000001;\r\nconst DECIMALS = 3;\r\n\r\nmodule.exports = {\r\n    DP_TOL: DP_TOL,\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    EQ_0: function(x) {\r\n        return ( (x) < DP_TOL && (x) > -DP_TOL );\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    EQ: function(x,y) {\r\n        return ( (x)-(y) <  DP_TOL && (x)-(y) > -DP_TOL );\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    GT: (x,y) => {\r\n        return ( (x)-(y) >  DP_TOL );\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    GE: (x,y) => {\r\n        return ( (x)-(y) > -DP_TOL );\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    LT: (x,y) => {\r\n        return ( (x)-(y) < -DP_TOL )\r\n    },\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    LE: (x,y) => {\r\n        return ( (x)-(y) <  DP_TOL );\r\n    }\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n'use strict';\r\n\r\nlet Utils = require(\"./utils/utils\");\r\nlet Errors = require(\"./utils/errors\");\r\n\r\n/**\r\n * FlattenJS - library for 2d geometry\r\n * @type {Flatten}\r\n */\r\nlet Flatten = class Flatten {\r\n    constructor() {\r\n        this.version = \"0.0.1\";\r\n        this.DP_TOL = Utils.DP_TOL;\r\n        this.CCW = true;\r\n        this.CW = false;\r\n        this.ORIENTATION = {CCW:-1, CW:1, NOT_ORIENTABLE: 0};\r\n        this.PIx2 = 2 * Math.PI;\r\n        this.PI_2 = 0.5 * Math.PI;\r\n        this.Utils = Utils;\r\n        this.Errors = Errors;\r\n        this.INSIDE = 1;\r\n        this.OUTSIDE = 0;\r\n        this.BOUNDARY = 2;\r\n        this.CONTAINS = 3;\r\n        this.INTERLACE = 4;\r\n        this.CLIP_INSIDE = 1;\r\n        this.CLIP_OUTSIDE = 0;\r\n        this.BOOLEAN_UNION = 1;\r\n        this.BOOLEAN_INTERSECT = 2;\r\n        this.BOOLEAN_SUBTRACT = 3;\r\n        this.OVERLAP_SAME = 1;\r\n        this.OVERLAP_OPPOSITE = 2;\r\n    }\r\n};\r\n\r\nlet f = new Flatten();\r\n\r\nrequire(\"./data_structures/planar_set\")(f);\r\nrequire(\"./classes/point\")(f);\r\nrequire(\"./classes/vector\")(f);\r\nrequire(\"./classes/line\")(f);\r\nrequire(\"./classes/circle\")(f);\r\nrequire(\"./classes/segment\")(f);\r\nrequire(\"./classes/arc\")(f);\r\nrequire(\"./classes/box\")(f);\r\nrequire(\"./classes/edge\")(f);\r\nrequire(\"./classes/face\")(f);\r\nrequire(\"./classes/ray\")(f);\r\nrequire(\"./algorithms/ray_shooting\")(f);\r\nrequire(\"./classes/polygon\")(f);\r\nrequire(\"./algorithms/distance\")(f);\r\n\r\nmodule.exports = f;\r\n","/**\r\n * Created by Alex Bol on 12/02/2018.\r\n */\r\n\"use strict\";\r\nlet Flatten = require(\"flatten-js\");\r\n// let Flatten = require(\"flatten-js/dist/flatten.min\");\r\nlet {Polygon, Segment, Arc} = Flatten;\r\n\r\nconst NOT_VERTEX = 0;\r\nconst START_VERTEX = 1;\r\nconst END_VERTEX = 2;\r\n\r\n/**\r\n * Class BooleanOp implements boolean operations on polygons\r\n */\r\nclass BooleanOp {\r\n    static booleanOp(operands) {\r\n        let res_poly = new Polygon();\r\n        for (let [wrk_poly, op] of operands) {\r\n            res_poly = BooleanOp.booleanOpBinary(res_poly, wrk_poly, op);\r\n        }\r\n        return res_poly;\r\n    }\r\n\r\n    static booleanOpBinary(res_poly, wrk_poly, op) {\r\n        return BooleanOp.clip(res_poly, wrk_poly, op);\r\n    }\r\n\r\n    /**\r\n     * Unify two polygons polygons and returns new polygon. <br/>\r\n     * Point belongs to the resulted polygon if it belongs to the first OR to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static unify(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, Flatten.BOOLEAN_UNION);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Subtract second polygon from the first and returns new polygon\r\n     * Point belongs to the resulted polygon if it belongs to the first polygon AND NOT to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static subtract(polygon1, polygon2) {\r\n        let wrk_poly = polygon2.clone();\r\n        let wrk_poly_reversed = wrk_poly.reverse();\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, wrk_poly_reversed, Flatten.BOOLEAN_SUBTRACT);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Intersect two polygons and returns new polygon\r\n     * Point belongs to the resultes polygon is it belongs to the first AND to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static intersect(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, Flatten.BOOLEAN_INTERSECT);\r\n        return res_poly;\r\n    }\r\n\r\n    static arrange(polygon1, polygon2) {\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(polygon1, polygon2);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(polygon1, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(polygon2, intersections.int_points2_sorted);\r\n    }\r\n\r\n    static clip(polygon1, polygon2, op) {\r\n        let res_poly = polygon1.clone();\r\n        let wrk_poly = polygon2.clone();\r\n\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(res_poly, wrk_poly);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n        // filter duplicated intersection points\r\n        BooleanOp.filterDuplicatedIntersections(intersections);\r\n\r\n        // remove not relevant not intersected faces from res_polygon\r\n        // if op == UNION, remove faces that are included in wrk_polygon without intersection\r\n        // if op == INTERSECT, remove faces that are not included into wrk_polygon\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(res_poly, wrk_poly, op, intersections.int_points1);\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(wrk_poly, res_poly, op, intersections.int_points2);\r\n\r\n        // initialize inclusion flags for edges incident to intersections\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points1);\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points2);\r\n\r\n        // calculate inclusion flags only for edges incident to intersections\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points1, polygon2);\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points2, polygon1);\r\n\r\n        // TODO: fix bondary conflicts\r\n\r\n        // Set overlapping flags for boundary chains: SAME or OPPOSITE\r\n        BooleanOp.setOverlappingFlags(intersections);\r\n\r\n        // remove not relevant chains between intersection points\r\n        BooleanOp.removeNotRelevantChains(res_poly, op, intersections.int_points1_sorted, true);\r\n        BooleanOp.removeNotRelevantChains(wrk_poly, op, intersections.int_points2_sorted, false);\r\n\r\n        // add edges of wrk_poly into the edge container of res_poly\r\n        BooleanOp.copyWrkToRes(res_poly, wrk_poly, op, intersections.int_points2);\r\n\r\n        // swap links from res_poly to wrk_poly and vice versa\r\n        BooleanOp.swapLinks(res_poly, wrk_poly, intersections);\r\n\r\n        // remove old faces\r\n        BooleanOp.removeOldFaces(res_poly, intersections.int_points1);\r\n        BooleanOp.removeOldFaces(wrk_poly, intersections.int_points2);\r\n\r\n        // restore faces\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points1, intersections.int_points2);\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points2, intersections.int_points1);\r\n\r\n        return res_poly;\r\n    }\r\n\r\n    static getIntersections(polygon1, polygon2) {\r\n        let intersections = {\r\n            int_points1: [],\r\n            int_points2: []\r\n        };\r\n\r\n        // calculate intersections\r\n        for (let edge1 of polygon1.edges) {\r\n\r\n            // request edges of polygon2 in the box of edge1\r\n            let resp = polygon2.edges.search(edge1.box);\r\n\r\n            // for each edge2 in response\r\n            for (let edge2 of resp) {\r\n\r\n                // calculate intersections between edge1 and edge2\r\n                let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                // for each intersection point\r\n                for (let pt of ip) {\r\n                    BooleanOp.addToIntPoints(edge1, pt, intersections.int_points1);\r\n                    BooleanOp.addToIntPoints(edge2, pt, intersections.int_points2);\r\n                }\r\n            }\r\n        }\r\n        return intersections;\r\n    }\r\n\r\n    static addToIntPoints(edge, pt, int_points) {\r\n        let id = int_points.length;\r\n        let split = edge.shape.split(pt);\r\n        if (split.length === 0) return;     // Means point does not belong to edge\r\n        let len = 0;\r\n        if (split.length === 1) {           // Edge was not split\r\n            if (edge.shape.start.equalTo(pt)) {\r\n                len = 0;\r\n            }\r\n            else if (edge.shape.end.equalTo(pt)) {\r\n                len = edge.shape.length;\r\n            }\r\n        }\r\n        else {                             // Edge was split into to edges\r\n            len = split[0].length;\r\n        }\r\n        let is_vertex = NOT_VERTEX;\r\n        if (Flatten.Utils.EQ(len, 0)) {\r\n            is_vertex |= START_VERTEX;\r\n        }\r\n        if (Flatten.Utils.EQ(len, edge.shape.length)) {\r\n            is_vertex |= END_VERTEX;\r\n        }\r\n        // Fix intersection point which is end point of the last edge\r\n        let arc_length = (is_vertex & END_VERTEX) && edge.next.arc_length === 0 ? 0 : edge.arc_length + len;\r\n\r\n        int_points.push({\r\n            id: id,\r\n            pt: pt,\r\n            arc_length: arc_length,\r\n            edge_before: edge,\r\n            edge_after: undefined,\r\n            face: edge.face,\r\n            is_vertex: is_vertex\r\n        });\r\n    }\r\n\r\n    static sortIntersections(intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        // augment intersections with new sorted arrays\r\n        // intersections.int_points1_sorted = intersections.int_points1.slice().sort(BooleanOp.compareFn);\r\n        // intersections.int_points2_sorted = intersections.int_points2.slice().sort(BooleanOp.compareFn);\r\n        intersections.int_points1_sorted = BooleanOp.getSortedArray(intersections.int_points1);\r\n        intersections.int_points2_sorted = BooleanOp.getSortedArray(intersections.int_points2);\r\n    }\r\n\r\n    static getSortedArray(int_points) {\r\n        let faceMap = new Map;\r\n        let id = 0;\r\n        // Create integer id's for faces\r\n        for (let ip of int_points) {\r\n            if (!faceMap.has(ip.face)) {\r\n                faceMap.set(ip.face, id);\r\n                id++;\r\n            }\r\n        }\r\n        // Augment intersection points with face id's\r\n        for (let ip of int_points) {\r\n            ip.faceId = faceMap.get(ip.face);\r\n        }\r\n        // Clone and sort\r\n        let int_points_sorted = int_points.slice().sort(BooleanOp.compareFn);\r\n        return int_points_sorted;\r\n    }\r\n\r\n    static compareFn(ip1, ip2) {\r\n        // compare face id's\r\n        if (ip1.faceId < ip2.faceId) {\r\n            return -1;\r\n        }\r\n        if (ip1.faceId > ip2.faceId) {\r\n            return 1;\r\n        }\r\n        // same face - compare arc_length\r\n        if (Flatten.Utils.LT(ip1.arc_length, ip2.arc_length)) {\r\n            return -1;\r\n        }\r\n        if (Flatten.Utils.GT(ip1.arc_length, ip2.arc_length)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static splitByIntersections(polygon, int_points) {\r\n        let {Polygon, Segment, Arc} = Flatten;\r\n        if (!int_points) return;\r\n        for (let int_point of int_points) {\r\n            let edge = int_point.edge_before;\r\n\r\n            // recalculate vertex flag: it may be changed after previous split\r\n            if (edge.shape.start.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= START_VERTEX;\r\n            }\r\n            if (edge.shape.end.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= END_VERTEX;\r\n            }\r\n\r\n            if (int_point.is_vertex & START_VERTEX) {  // nothing to split\r\n                int_point.edge_before = edge.prev;\r\n                int_point.is_vertex = END_VERTEX;\r\n                continue;\r\n            }\r\n            if (int_point.is_vertex & END_VERTEX) {    // nothing to split\r\n                continue;\r\n            }\r\n\r\n            let newEdge = polygon.addVertex(int_point.pt, edge);\r\n            int_point.edge_before = newEdge;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_after = int_point.edge_before.next;\r\n        }\r\n    }\r\n\r\n    static filterDuplicatedIntersections(intersections) {\r\n        if (intersections.int_points1.length < 2) return;\r\n\r\n        let do_squeeze = false;\r\n\r\n        let int_point_ref1 = intersections.int_points1_sorted[0];\r\n        let int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n        for (let i = 1; i < intersections.int_points1_sorted.length; i++) {\r\n            let int_point_cur1 = intersections.int_points1_sorted[i];\r\n\r\n            if (!Flatten.Utils.EQ(int_point_cur1.arc_length, int_point_ref1.arc_length)) {\r\n                int_point_ref1 = int_point_cur1;\r\n                int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n                continue;\r\n            }\r\n\r\n            /* Same length: int_point_cur1->arc_len == int_point_ref1->arc_len */\r\n            /* Ensure this is intersection between same edges from the same face */\r\n            let int_point_cur2 = intersections.int_points2[int_point_cur1.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        int_point_ref2 = intersections.int_points2_sorted[0];\r\n        int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n        for (let i = 1; i < intersections.int_points2_sorted.length; i++) {\r\n            let int_point_cur2 = intersections.int_points2_sorted[i];\r\n\r\n            if (int_point_cur2.id == -1) continue;\r\n            /* already deleted */\r\n\r\n            if (int_point_ref2.id == -1 || /* can't be reference if already deleted */\r\n                !(Flatten.Utils.EQ(int_point_cur2.arc_length, int_point_ref2.arc_length))) {\r\n                int_point_ref2 = int_point_cur2;\r\n                int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n                continue;\r\n            }\r\n\r\n            let int_point_cur1 = intersections.int_points1[int_point_cur2.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        if (do_squeeze) {\r\n            intersections.int_points1 = intersections.int_points1.filter((int_point) => int_point.id >= 0);\r\n            intersections.int_points2 = intersections.int_points2.filter((int_point) => int_point.id >= 0);\r\n\r\n            // update id's\r\n            intersections.int_points1.forEach((int_point, index) => int_point.id = index);\r\n            intersections.int_points2.forEach((int_point, index) => int_point.id = index);\r\n\r\n            // re-create sorted\r\n            intersections.int_points1_sorted = [];\r\n            intersections.int_points2_sorted = [];\r\n            BooleanOp.sortIntersections(intersections);\r\n        }\r\n    }\r\n\r\n    static removeNotRelevantNotIntersectedFaces(poly1, poly2, op, int_points1) {\r\n        let toBeDeleted = [];\r\n        for (let face of poly1.faces) {\r\n            if (!int_points1.find((ip) => ip.face === face)) {\r\n                let rel = face.getRelation(poly2);\r\n                if (op === Flatten.BOOLEAN_UNION && rel === Flatten.INSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n                else if (op === Flatten.BOOLEAN_INTERSECT && rel === Flatten.OUTSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < toBeDeleted.length; i++) {\r\n            poly1.deleteFace(toBeDeleted[i]);\r\n        }\r\n    }\r\n\r\n    static initializeInclusionFlags(int_points) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvStart = undefined;\r\n            int_point.edge_before.bvEnd = undefined;\r\n            int_point.edge_before.bv = undefined;\r\n            int_point.edge_before.overlap = undefined;\r\n\r\n            int_point.edge_after.bvStart = undefined;\r\n            int_point.edge_after.bvEnd = undefined;\r\n            int_point.edge_after.bv = undefined;\r\n            int_point.edge_after.overlap = undefined;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvEnd = Flatten.BOUNDARY;\r\n            int_point.edge_after.bvStart = Flatten.BOUNDARY;\r\n        }\r\n    }\r\n\r\n    static calculateInclusionFlags(int_points, polygon) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.setInclusion(polygon);\r\n            int_point.edge_after.setInclusion(polygon);\r\n        }\r\n    }\r\n\r\n    static setOverlappingFlags(intersections) {\r\n        let cur_face = undefined;\r\n        let first_int_point_in_face = undefined;\r\n        let next_int_point1 = undefined;\r\n        let num_int_points = intersections.int_points1.length;\r\n\r\n        for (let i = 0; i < num_int_points; i++) {\r\n            let cur_int_point1 = intersections.int_points1_sorted[i];\r\n\r\n            // Find boundary chain in the polygon1\r\n            if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n                first_int_point_in_face = i;\r\n                cur_face = cur_int_point1.face;\r\n            }\r\n\r\n            if (i + 1 === num_int_points) {                                         // last int point in array\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else if (intersections.int_points1_sorted[i + 1].face !== cur_face) {   // last int point in chain\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else {                                                                // not a last point in chain\r\n                next_int_point1 = intersections.int_points1_sorted[i + 1];\r\n            }\r\n\r\n            let edge_from1 = cur_int_point1.edge_after;\r\n            let edge_to1 = next_int_point1.edge_before;\r\n\r\n            if (!(edge_from1.bv === Flatten.BOUNDARY && edge_to1.bv === Flatten.BOUNDARY))      // not a boundary chain - skip\r\n                continue;\r\n\r\n            if (edge_from1 !== edge_to1)                    //  one edge chain    TODO: support complex case\r\n                continue;\r\n\r\n\r\n            /* Find boundary chain in polygon2 between same intersection points */\r\n            let cur_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n            let next_int_point2 = intersections.int_points2[next_int_point1.id];\r\n\r\n            let edge_from2 = cur_int_point2.edge_after;\r\n            let edge_to2 = next_int_point2.edge_before;\r\n\r\n            /* if [edge_from2..edge_to2] is not a boundary chain, invert it */\r\n            /* check also that chain consist of one or two edges */\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2)) {\r\n                cur_int_point2 = intersections.int_points2[next_int_point1.id];\r\n                next_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n\r\n                edge_from2 = cur_int_point2.edge_after;\r\n                edge_to2 = next_int_point2.edge_before;\r\n            }\r\n\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2))\r\n                continue;                           // not an overlapping chain - skip   TODO: fix boundary conflict\r\n\r\n            // Set overlapping flag - one-to-one case\r\n            edge_from1.setOverlap(edge_from2);\r\n        }\r\n    }\r\n\r\n    static removeNotRelevantChains(polygon, op, int_points, is_res_polygon) {\r\n        if (!int_points) return;\r\n        for (let i = 0; i < int_points.length; i++) {\r\n            // TODO: Support claster of duplicated points with same <x,y> came from different faces\r\n\r\n            let int_point_current = int_points[i];\r\n            // Get next int point from the same face that current\r\n            let int_point_next;\r\n            if (i < int_points.length - 1 && int_points[i + 1].face === int_point_current.face) {\r\n                int_point_next = int_points[i + 1];   // get next point from same face\r\n            }\r\n            else {                                  // get first point from the same face\r\n                for (int_point_next of int_points) {\r\n                    if (int_point_next.face === int_point_current.face) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let edge_from = int_point_current.edge_after;\r\n            let edge_to = int_point_next.edge_before;\r\n\r\n            let face = int_point_current.face;\r\n\r\n            if ((edge_from.bv === Flatten.INSIDE && edge_to.bv === Flatten.INSIDE && op === Flatten.BOOLEAN_UNION) ||\r\n                (edge_from.bv === Flatten.OUTSIDE && edge_to.bv === Flatten.OUTSIDE && op === Flatten.BOOLEAN_INTERSECT) ||\r\n                ((edge_from.bv === Flatten.OUTSIDE || edge_to.bv === Flatten.OUTSIDE) && op === Flatten.BOOLEAN_SUBTRACT && !is_res_polygon) ||\r\n                ((edge_from.bv === Flatten.INSIDE || edge_to.bv === Flatten.INSIDE) && op === Flatten.BOOLEAN_SUBTRACT && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_SAME) && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_OPPOSITE) )) {\r\n\r\n                polygon.removeChain(face, edge_from, edge_to);\r\n\r\n                int_point_current.edge_after = undefined;\r\n                int_point_next.edge_before = undefined;\r\n            }\r\n        }\r\n    };\r\n\r\n    static copyWrkToRes(res_polygon, wrk_polygon, op, int_points) {\r\n        for (let face of wrk_polygon.faces) {\r\n            for (let edge of face) {\r\n                res_polygon.edges.add(edge);\r\n            }\r\n            // If union - add face from wrk_polygon that is not intersected with res_polygon\r\n            if (op === Flatten.BOOLEAN_UNION &&\r\n                int_points && int_points.find((ip) => (ip.face === face)) === undefined) {\r\n                res_polygon.addFace(face.first, face.last);\r\n            }\r\n        }\r\n    }\r\n\r\n    static swapLinks(res_polygon, wrk_polygon, intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        for (let i = 0; i < intersections.int_points1.length; i++) {\r\n            let int_point1 = intersections.int_points1[i];\r\n            let int_point2 = intersections.int_points2[i];\r\n\r\n            // Simple case - find continuation on the other polygon\r\n\r\n            // Process edge from res_polygon\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // swap need\r\n                if (int_point2.edge_before === undefined && int_point2.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point1.edge_before.next = int_point2.edge_after;\r\n                    int_point2.edge_after.prev = int_point1.edge_before;\r\n\r\n                    // Fill in missed links in intersection points\r\n                    int_point1.edge_after = int_point2.edge_after;\r\n                    int_point2.edge_before = int_point1.edge_before;\r\n                }\r\n            }\r\n            // Process edge from wrk_polygon\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // swap need\r\n                if (int_point1.edge_before === undefined && int_point1.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point2.edge_before.next = int_point1.edge_after;\r\n                    int_point1.edge_after.prev = int_point2.edge_before;\r\n\r\n                    // Complete missed links\r\n                    int_point2.edge_after = int_point1.edge_after;\r\n                    int_point1.edge_before = int_point2.edge_before;\r\n                }\r\n            }\r\n\r\n            // Continuation not found - complex case\r\n            // Continuation will be found on the same polygon.\r\n            // It happens when intersection point is actually touching point\r\n            // Polygon1\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points1_sorted) {\r\n                    if (int_point === int_point1) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point1.pt)) {\r\n                            // Connect edges\r\n                            int_point1.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point1.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point1.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point1.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Polygon2\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points2_sorted) {\r\n                    if (int_point === int_point2) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point2.pt)) {\r\n                            // Connect edges\r\n                            int_point2.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point2.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point2.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point2.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Sanity check that no dead ends left\r\n    }\r\n\r\n    static removeOldFaces(polygon, int_points) {\r\n        for (let int_point of int_points) {\r\n            polygon.faces.delete(int_point.face);\r\n            int_point.face = undefined;\r\n            if (int_point.edge_before)\r\n                int_point.edge_before.face = undefined;\r\n            if (int_point.edge_after)\r\n                int_point.edge_after.face = undefined;\r\n        }\r\n    }\r\n\r\n    static restoreFaces(polygon, int_points, other_int_points) {\r\n        // For each intersection point - create new chain\r\n        for (let int_point of int_points) {\r\n            if (int_point.edge_before === undefined || int_point.edge_after === undefined)  // completely deleted\r\n                continue;\r\n            if (int_point.face)            // already restored\r\n                continue;\r\n\r\n            if (int_point.edge_after.face || int_point.edge_before.face)        // Chain already created. Possible case in duplicated intersection points\r\n                continue;\r\n\r\n            let first = int_point.edge_after;      // face start\r\n            let last = int_point.edge_before;      // face end;\r\n\r\n            let face = polygon.addFace(first, last);\r\n\r\n            // Mark intersection points from the newly create face\r\n            // to avoid multiple creation of the same face\r\n            // Chain number was assigned to each edge of new face in addFace function\r\n            for (let int_point_tmp of int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n            // Mark other intersection points as well\r\n            for (let int_point_tmp of other_int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = BooleanOp;"],"sourceRoot":""}