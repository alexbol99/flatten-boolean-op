{"version":3,"sources":["webpack://flatten-boolean-op/webpack/universalModuleDefinition","webpack://flatten-boolean-op/webpack/bootstrap","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/utils/constants.js","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/index.js","webpack://flatten-boolean-op/./node_modules/flatten-js/algorithms/distance.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/polygon.js","webpack://flatten-boolean-op/./node_modules/flatten-js/algorithms/ray_shooting.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/ray.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/face.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/edge.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/box.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/arc.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/segment.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/circle.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/line.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/vector.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/point.js","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/classes/interval.js","webpack://flatten-boolean-op/./node_modules/flatten-interval-tree/classes/node.js","webpack://flatten-boolean-op/./node_modules/flatten-js/data_structures/planar_set.js","webpack://flatten-boolean-op/./node_modules/flatten-js/classes/matrix.js","webpack://flatten-boolean-op/./node_modules/flatten-js/utils/errors.js","webpack://flatten-boolean-op/./node_modules/flatten-js/utils/utils.js","webpack://flatten-boolean-op/./node_modules/flatten-js/index.js","webpack://flatten-boolean-op/./index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","Node","nil_node","[object Object]","this","size","count","tree_walk","keys","res","node","push","item","output","isEmpty","undefined","insert_node","tree_insert","recalc_max","search_node","tree_search","delete_node","tree_delete","interval","resp_nodes","tree_search_interval","resp","forEach","visitor","node_current","parent","update_max","current_node","parent_node","less_than","left","right","insert_fixup","uncle_node","color","rotate_left","rotate_right","cut_node","fix_node","tree_successor","copy_data","delete_fixup","brother_node","equal_to","not_intersect_left_subtree","intersect","not_intersect_right_subtree","node_min","node_max","node_successor","local_minimum","x","y","action","height","heightLeft","heightRight","testBlackHeightProperty","Error","IntervalTree","Flatten","Polygon","Point","Segment","Arc","Circle","Line","Ray","Vector","vector","Distance","pt1","pt2","distanceTo","pt","line","closest_point","projectionOn","length","circle","dist2center","shortest_dist","center","Utils","EQ_0","toArc","start","dist","Math","abs","v","pc","normalize","multiply","translate","segment","equalTo","end","point2point","v_seg","v_ps2pt","v_pe2pt","start_sp","dot","end_sp","GE","v_unit","tangentInStart","cross","arc","shortest_segment","dist_and_segment","point2circle","on","sort","seg","ip","point2line","seg1","seg2","intersectSegment2Segment","point2segment","ps","pe","dist_from_start","shortest_segment_from_start","dist_from_end","shortest_segment_from_end","LT","dist_from_center","shortest_segment_from_center","dist_from_projection","shortest_segment_from_projection","dist_tmp","segment_tmp","point2arc","reverse","circle1","circle2","arc1","arc2","ip1","ip2","circle2circle","point","polygon","min_dist_and_segment","Number","POSITIVE_INFINITY","edge","edges","shape","polygon1","polygon2","edge1","edge2","box1","box2","mindist_x","max","xmin","xmax","mindist_y","ymin","ymax","mindist","box","merge","dx","dy","level","min_stop","tree","maxdist","box2box_minmax","Edge","insert","new_level_left","map","isNil","filter","new_level_right","new_level","LE","minmax_tree_process_level","set","index","squared_min_stop","min_dist_and_segment_new","stop","minmax_tree_calc_distance","sqrt","low","distance","PlanarSet","minmax_tree","d1","d2","GT","shape1","shape2","Face","Box","ray_shoot","faces","reduce","acc","face","vertices","args","add","delete","edgeFrom","edgeTo","next","remove","deleteFace","shapes","split","newEdge","edgeBefore","prev","clone","addFace","signedArea","rel","INSIDE","BOUNDARY","point2polygon","shape2polygon","shape2planarSet","contains","intersectLine2Polygon","intersectShape2Polygon","intersectPolygon2Polygon","valid","isSimple","vec","newPolygon","angle","rotate","matrix","Matrix","transform","not_intersect","resp_edges","search","attrs","stroke","strokeWidth","fill","fillRule","fillOpacity","id","className","id_str","class_str","svgStr","svg","toJSON","OUTSIDE","ray","norm","intersections","i1","i2","counter","intersection","prev_tangent","tangentInEnd","prev_point","cur_tangent","cur_point","prev_on_the_left","leftTo","cur_on_the_left","next_tangent","next_point","next_on_the_left","EQ","Errors","ILLEGAL_PARAMETERS","intersectRay2Segment","intersectRay2Arc","ip_tmp","first","last","_box","_orientation","Array","every","segments","points2segments","shapes2face","flattenShapes","flattenShape","setArcLength","iterator","done","face_edges","points","append","arc_length","edgeAfter","edge_tmp","orientation","sArea","definiteIntegral","area","ORIENTATION","NOT_ORIENTABLE","CCW","CW","getSelfIntersections","exitOnFirst","int_points","bvStart","bvEnd","bv","overlap","middle","bvMiddle","flag","OVERLAP_SAME","OVERLAP_OPPOSITE","counterClockwise","largeArcFlag","sweepFlag","sweep","PI","sign","halfArc1","startAngle","halfArc2","endAngle","high","other_box","min","lessThan","width","PIx2","breakToFunctional","slope","test_arc","cos","intersectArc2Circle","intersectArc2Arc","arc2circle","arc2line","segment2arc","arc2arc","func_arcs_array","angles","pts","test_arcs","new_arc","prev_arc","newStart","newEnd","newCenter","arcSE","circularSegmentDefiniteIntegral","onLeftSide","areaTrapez","areaCircularSegment","circularSegmentArea","sin","assign","coords","distanceToPoint","intersectSegment2Line","intersectSegment2Circle","intersectSegment2Arc","segment2circle","segment2line","segment2segment","rest","isZeroLength","line1","line2","incidentTo","new_ip","ips","ips_tmp","counterclockwise","intersectCirle2Circle","circle2line","r1","r2","a","mid_pt","h","rotate90CCW","rotate90CW","a1","a2","points2norm","standard","other_line","parallelTo","intersectLine2Line","intersectLine2Circle","intersectLine2Arc","intersectLine2Box","find","A1","B1","C1","A2","B2","C2","det","detX","detY","prj","v_trans","delta","segs","arr","atan2","scalar","ZERO_DIVISION","rpoint","norm1","norm2","x_rot","y_rot","proj_vec","Interval","other_interval","val1","val2","isNaN","other_node","value_equal","maximal_val","val_less_than","Set","super","deleted","clear","b","tx","ty","other_matrix","sx","sy","ReferenceError","DP_TOL","f","CONTAINS","INTERLACE","NOT_VERTEX","START_VERTEX","END_VERTEX","BooleanOp","operands","res_poly","wrk_poly","op","booleanOpBinary","clip","BOOLEAN_UNION","wrk_poly_reversed","BOOLEAN_SUBTRACT","BOOLEAN_INTERSECT","getIntersections","sortIntersections","splitByIntersections","int_points1_sorted","int_points2_sorted","filterDuplicatedIntersections","removeNotRelevantNotIntersectedFaces","int_points1","int_points2","initializeInclusionFlags","calculateInclusionFlags","setOverlappingFlags","removeNotRelevantChains","copyWrkToRes","swapLinks","removeOldFaces","restoreFaces","addToIntPoints","len","is_vertex","edge_before","edge_after","getSortedArray","faceMap","Map","has","faceId","slice","compareFn","int_point","addVertex","do_squeeze","int_point_ref1","int_point_ref2","int_point_cur1","int_point_cur2","poly1","poly2","is_res_polygon","toBeDeleted","setInclusion","cur_face","first_int_point_in_face","next_int_point1","num_int_points","cur_int_point1","edge_from1","edge_to1","cur_int_point2","next_int_point2","edge_from2","edge_to2","setOverlap","int_point_current","int_point_next","first_int_point_in_face_num","next_int_point_num","int_points_from_pull_start","int_points_from_pull_num","intPointsPullCount","int_points_to_pull_start","int_points_to_pull_num","edge_from","edge_to","removeChain","k","cur_int_point_num","int_points_pull_num","res_polygon","wrk_polygon","int_point1","int_point2","other_int_points","int_point_tmp"],"mappings":"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","file":"flatten-boolean-op.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flatten-boolean-op\"] = factory();\n\telse\n\t\troot[\"flatten-boolean-op\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n    RB_TREE_COLOR_RED: 0,\r\n    RB_TREE_COLOR_BLACK: 1\r\n};","/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n'use strict';\r\n\r\nlet Node = require('./classes/node');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('./utils/constants');\r\n\r\nlet nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree may store items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply array of numeric [low,high] values <br />\r\n * If interval is an object, it should implement and expose methods less_than, equals_to, intersect and others,\r\n * see documentation {link}\r\n * @type {IntervalTree}\r\n */\r\nlet IntervalTree = class IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.key.output()));\r\n        return res;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return (this.root == null || this.root == nil_node);\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param key - interval object or array of two numbers [low, high]\r\n     * @param value - value representing any object (optional)\r\n     * @returns {Node} - returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, nil_node, nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - value object to be checked\r\n     * @returns {boolean} - true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param key - interval correspondent to keys stored in the tree\r\n     * @param value - - value object\r\n     * @returns {boolean} - true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param interval - search interval, or array [low, high]\r\n     * @returns {Array}\r\n     */\r\n    search(interval) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        let resp = [];\r\n        resp_nodes.forEach((node) => {\r\n            if (node.item.value) {         // if there are values, return only values\r\n                resp.push(node.item.value);\r\n            }\r\n            else {                         // otherwise, return keys\r\n                resp.push(node.item.key.output());\r\n            }\r\n        }, []);\r\n        return resp;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    };\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == nil_node || delete_node.right == nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        /*if (fix_node != nil_node) {*/\r\n            fix_node.parent = cut_node.parent;\r\n        /*}*/\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (/*fix_node != nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != nil_node) {\r\n            // if (node->left != nil_node && node->left->max >= low) {\r\n            if (node.left != nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != nil_node && node->low <= high) {\r\n            if (node.right != nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.toArray());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n};\r\n\r\nmodule.exports = IntervalTree;\r\n","\"use strict\";\r\n\r\nlet IntervalTree = require('flatten-interval-tree');\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Polygon, Point, Segment, Arc, Circle, Line, Ray, Vector} = Flatten;\r\n\r\n    let {vector} = Flatten;\r\n\r\n    Flatten.Distance = class Distance {\r\n        /**\r\n         * Calculate distance and shortest segment between points\r\n         * @param pt1\r\n         * @param pt2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2point(pt1, pt2) {\r\n            return pt1.distanceTo(pt2);\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and line\r\n         * @param pt\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2line(pt, line) {\r\n            let closest_point = pt.projectionOn(line);\r\n            let vec = vector(pt, closest_point);\r\n            return [vec.length, new Segment(pt, closest_point)];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and circle\r\n         * @param pt\r\n         * @param circle\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2circle(pt, circle) {\r\n            let [dist2center, shortest_dist] = pt.distanceTo(circle.center);\r\n            if (Flatten.Utils.EQ_0(dist2center)) {\r\n                return [circle.r, new Segment(pt, circle.toArc().start)];\r\n            }\r\n            else {\r\n                let dist = Math.abs(dist2center - circle.r);\r\n                let v = vector(circle.pc, pt).normalize().multiply(circle.r);\r\n                let closest_point = circle.pc.translate(v);\r\n                return [dist, new Segment(pt, closest_point)];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and segment\r\n         * @param pt\r\n         * @param segment\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2segment(pt, segment) {\r\n            /* Degenerated case of zero-length segment */\r\n            if (segment.start.equalTo(segment.end)) {\r\n                return  Distance.point2point(pt, segment.start);\r\n            }\r\n\r\n            let v_seg = new Flatten.Vector(segment.start, segment.end);\r\n            let v_ps2pt = new Flatten.Vector(segment.start, pt);\r\n            let v_pe2pt = new Flatten.Vector(segment.end, pt);\r\n            let start_sp = v_seg.dot(v_ps2pt);\r\n            /* dot product v_seg * v_ps2pt */\r\n            let end_sp = -v_seg.dot(v_pe2pt);\r\n            /* minus dot product v_seg * v_pe2pt */\r\n\r\n            let dist;\r\n            let closest_point;\r\n            if (Flatten.Utils.GE(start_sp, 0) && Flatten.Utils.GE(end_sp, 0)) {    /* point inside segment scope */\r\n                let v_unit = segment.tangentInStart(); // new Flatten.Vector(v_seg.x / this.length, v_seg.y / this.length);\r\n                /* unit vector ||v_unit|| = 1 */\r\n                dist = Math.abs(v_unit.cross(v_ps2pt));\r\n                /* dist = abs(v_unit x v_ps2pt) */\r\n                closest_point = segment.start.translate(v_unit.multiply(v_unit.dot(v_ps2pt)));\r\n                return [dist, new Segment(pt, closest_point)];\r\n            }\r\n            else if (start_sp < 0) {                             /* point is out of scope closer to ps */\r\n                return pt.distanceTo(segment.start);\r\n            }\r\n            else {                                               /* point is out of scope closer to pe */\r\n                return pt.distanceTo(segment.end);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and arc\r\n         * @param pt\r\n         * @param arc\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2arc(pt, arc) {\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n            let dist_and_segment = [];\r\n            let dist, shortest_segment;\r\n            [dist, shortest_segment] = Distance.point2circle(pt, circle);\r\n            if (shortest_segment.end.on(arc)) {\r\n                dist_and_segment.push(Distance.point2circle(pt, circle));\r\n            }\r\n            dist_and_segment.push( Distance.point2point(pt, arc.start) );\r\n            dist_and_segment.push( Distance.point2point(pt, arc.end) );\r\n\r\n            Distance.sort(dist_and_segment);\r\n\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and line\r\n         * @param seg\r\n         * @param line\r\n         * @returns {Number | Segment}\r\n         */\r\n        static segment2line(seg, line) {\r\n            let ip = seg.intersect(line);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\r\n            }\r\n            let dist_and_segment = [];\r\n            dist_and_segment.push(Distance.point2line(seg.start, line));\r\n            dist_and_segment.push(Distance.point2line(seg.end, line));\r\n\r\n            Distance.sort( dist_and_segment );\r\n            return dist_and_segment[0];\r\n\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two segments\r\n         * @param seg1\r\n         * @param seg2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2segment(seg1, seg2) {\r\n            let ip = Segment.intersectSegment2Segment(seg1, seg2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0],ip[0])];   // distance = 0, closest point is the first point\r\n            }\r\n\r\n            // Seg1 and seg2 not intersected\r\n            let dist_and_segment = [];\r\n\r\n            dist_and_segment.push(Distance.point2segment(seg2.start, seg1));\r\n            dist_and_segment.push(Distance.point2segment(seg2.end, seg1));\r\n            dist_and_segment.push(Distance.point2segment(seg1.start, seg2));\r\n            dist_and_segment.push(Distance.point2segment(seg1.end, seg2));\r\n\r\n            Distance.sort( dist_and_segment );\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and circle\r\n         * @param seg\r\n         * @param circle\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2circle(seg, circle) {\r\n            /* Case 1 Segment and circle intersected. Return the first point and zero distance */\r\n            let ip = seg.intersect(circle);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // No intersection between segment and circle\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius\r\n             * And projection point belong to segment\r\n              * Then measure again distance from projection to circle and return it */\r\n            let line = new Flatten.Line(seg.ps, seg.pe);\r\n            let [dist, shortest_segment] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist, circle.r) && shortest_segment.end.on(seg)) {\r\n                return Distance.point2circle(shortest_segment.end, circle);\r\n            }\r\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n            else {\r\n                let [dist_from_start, shortest_segment_from_start] = Distance.point2circle(seg.start, circle);\r\n                let [dist_from_end, shortest_segment_from_end] = Distance.point2circle(seg.end, circle);\r\n                return Flatten.Utils.LT(dist_from_start, dist_from_end) ?\r\n                    [dist_from_start, shortest_segment_from_start] :\r\n                    [dist_from_end, shortest_segment_from_end];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between segment and arc\r\n         * @param seg\r\n         * @param arc\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static segment2arc(seg, arc) {\r\n            /* Case 1 Segment and arc intersected. Return the first point and zero distance */\r\n            let ip = seg.intersect(arc);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // No intersection between segment and arc\r\n            let line = new Flatten.Line(seg.ps, seg.pe);\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n             * projection point belongs to segment AND\r\n               * distance from projection point to circle belongs to arc  =>\r\n               * return this distance from projection to circle */\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist_from_center, circle.r) && shortest_segment_from_center.end.on(seg)) {\r\n                let [dist_from_projection, shortest_segment_from_projection] =\r\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\r\n                if (shortest_segment_from_projection.end.on(arc)) {\r\n                    return [dist_from_projection, shortest_segment_from_projection];\r\n                }\r\n            }\r\n            /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n            let dist_and_segment = [];\r\n            dist_and_segment.push(Distance.point2arc(seg.start, arc));\r\n            dist_and_segment.push(Distance.point2arc(seg.end, arc));\r\n\r\n            let dist_tmp, segment_tmp;\r\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.start, seg);\r\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2segment(arc.end, seg);\r\n            dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n            Distance.sort(dist_and_segment);\r\n            return dist_and_segment[0];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two circles\r\n         * @param circle1\r\n         * @param circle2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static circle2circle(circle1, circle2) {\r\n            let ip = circle1.intersect(circle2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            // Case 1. Concentric circles. Convert to arcs and take distance between two arc starts\r\n            if (circle1.center.equalTo(circle2.center)) {\r\n                let arc1 = circle1.toArc();\r\n                let arc2 = circle2.toArc();\r\n                return Distance.point2point(arc1.start, arc2.start);\r\n            }\r\n            else {\r\n                // Case 2. Not concentric circles\r\n                let line = new Line(circle1.center, circle2.center);\r\n                let ip1 = line.intersect(circle1);\r\n                let ip2 = line.intersect(circle2);\r\n\r\n                let dist_and_segment = [];\r\n\r\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[0]));\r\n                dist_and_segment.push(Distance.point2point(ip1[0], ip2[1]));\r\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[0]));\r\n                dist_and_segment.push(Distance.point2point(ip1[1], ip2[1]));\r\n\r\n                Distance.sort(dist_and_segment);\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two circles\r\n         * @param circle\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static circle2line(circle, line) {\r\n            let ip = circle.intersect(line);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            let [dist, shortest_segment] = Distance.point2circle(shortest_segment_from_center.end, circle);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between arc and line\r\n         * @param arc\r\n         * @param line\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2line(arc, line) {\r\n            /* Case 1 Line and arc intersected. Return the first point and zero distance */\r\n            let ip = line.intersect(arc);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle = new Flatten.Circle(arc.center, arc.r);\r\n\r\n            /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n             * projection point belongs to segment AND\r\n               * distance from projection point to circle belongs to arc  =>\r\n               * return this distance from projection to circle */\r\n            let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n            if (Flatten.Utils.GE(dist_from_center, circle.r)) {\r\n                let [dist_from_projection, shortest_segment_from_projection] =\r\n                    Distance.point2circle(shortest_segment_from_center.end, circle);\r\n                if (shortest_segment_from_projection.end.on(arc)) {\r\n                    return [dist_from_projection, shortest_segment_from_projection];\r\n                }\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n                dist_and_segment.push( Distance.point2line(arc.start, line) );\r\n                dist_and_segment.push( Distance.point2line(arc.end, line) );\r\n\r\n                Distance.sort(dist_and_segment);\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between arc and circle\r\n         * @param arc\r\n         * @param circle2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2circle(arc, circle2) {\r\n            let ip = arc.intersect(circle2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle1 = new Flatten.Circle(arc.center, arc.r);\r\n\r\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n            if (shortest_segment.start.on(arc)) {\r\n                return [dist, shortest_segment];\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n\r\n                dist_and_segment.push(Distance.point2circle(arc.start, circle2));\r\n                dist_and_segment.push(Distance.point2circle(arc.end, circle2));\r\n\r\n                Distance.sort(dist_and_segment);\r\n\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two arcs\r\n         * @param arc1\r\n         * @param arc2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static arc2arc(arc1, arc2) {\r\n            let ip = arc1.intersect(arc2);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let circle1 = new Flatten.Circle(arc1.center, arc1.r);\r\n            let circle2 = new Flatten.Circle(arc2.center, arc2.r);\r\n\r\n            let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n            if (shortest_segment.start.on(arc1) && shortest_segment.end.on(arc2)) {\r\n                return [dist, shortest_segment];\r\n            }\r\n            else {\r\n                let dist_and_segment = [];\r\n\r\n                let dist_tmp, segment_tmp;\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.start, arc2);\r\n                if (segment_tmp.end.on(arc2)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc1.end, arc2);\r\n                if (segment_tmp.end.on(arc2)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.start, arc1);\r\n                if (segment_tmp.end.on(arc1)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2arc(arc2.end, arc1);\r\n                if (segment_tmp.end.on(arc1)) {\r\n                    dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n                }\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.start);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.end);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.start);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.end);\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n                Distance.sort(dist_and_segment);\r\n\r\n                return dist_and_segment[0];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between point and polygon\r\n         * @param point\r\n         * @param polygon\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static point2polygon(point, polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = (edge.shape instanceof Segment) ?\r\n                    Distance.point2segment(point, edge.shape) : Distance.point2arc(point, edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static shape2polygon(shape, polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = shape.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n/*\r\n        static arc2polygon(arc, polygon) {\r\n            let ip = arc.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = arc.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static line2polygon(line, polygon) {\r\n            let ip = line.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = line.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static circle2polygon(circle, polygon) {\r\n            let ip = circle.intersect(polygon);\r\n            if (ip.length > 0) {\r\n                return [0, new Segment(ip[0], ip[0])];\r\n            }\r\n\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Segment()];\r\n            for (let edge of polygon.edges) {\r\n                let [dist, shortest_segment] = circle.distanceTo(edge.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n*/\r\n\r\n        /**\r\n         * Calculate distance and shortest segment between two polygons\r\n         * @param polygon1\r\n         * @param polygon2\r\n         * @returns {Number | Segment} - distance and shortest segment\r\n         */\r\n        static polygon2polygon(polygon1, polygon2) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n            for (let edge1 of polygon1.edges) {\r\n                for (let edge2 of polygon2.edges) {\r\n                    let [dist, shortest_segment] = edge1.shape.distanceTo(edge2.shape);\r\n                    if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                        min_dist_and_segment = [dist, shortest_segment];\r\n                    }\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        /**\r\n         * Returns [mindist, maxdist] array of squared minimal and maximal distance between boxes\r\n         * Minimal distance by x is\r\n         *    (box2.xmin - box1.xmax), if box1 is left to box2\r\n         *    (box1.xmin - box2.xmax), if box2 is left to box1\r\n         *    0,                       if box1 and box2 are intersected by x\r\n         * Minimal distance by y is defined in the same way\r\n         *\r\n         * Maximal distance is estimated as a sum of squared dimensions of the merged box\r\n         *\r\n         * @param box1\r\n         * @param box2\r\n         * @returns {Number | Number} - minimal and maximal distance\r\n         */\r\n        static box2box_minmax(box1, box2) {\r\n            let mindist_x = Math.max( Math.max(box1.xmin - box2.xmax, 0), Math.max(box2.xmin - box1.xmax, 0) );\r\n            let mindist_y = Math.max( Math.max(box1.ymin - box2.ymax, 0), Math.max(box2.ymin - box1.ymax, 0) );\r\n            let mindist = mindist_x*mindist_x + mindist_y*mindist_y;\r\n\r\n            let box = box1.merge(box2);\r\n            let dx = box.xmax - box.xmin;\r\n            let dy = box.ymax - box.ymin;\r\n            let maxdist = dx*dx + dy*dy;\r\n\r\n            return [mindist, maxdist];\r\n        }\r\n\r\n        static minmax_tree_process_level(shape, level, min_stop, tree) {\r\n            // Calculate minmax distance to each shape in current level\r\n            // Insert result into the interval tree for further processing\r\n            // update min_stop with maxdist, it will be the new stop distance\r\n            let mindist, maxdist;\r\n            for (let node of level) {\r\n\r\n                // [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n                // if (Flatten.Utils.GT(mindist, min_stop))\r\n                //     continue;\r\n\r\n                // Estimate min-max dist to the shape stored in the node.item, using node.item.key which is shape's box\r\n                [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.item.key);\r\n                if (node.item.value instanceof Flatten.Edge) {\r\n                    tree.insert([mindist, maxdist], node.item.value.shape);\r\n                }\r\n                else {\r\n                    tree.insert([mindist, maxdist], node.item.value);\r\n                }\r\n                if (Flatten.Utils.LT(maxdist, min_stop)) {\r\n                    min_stop = maxdist;                       // this will be the new distance estimation\r\n                }\r\n            }\r\n\r\n            if (level.length === 0)\r\n                return min_stop;\r\n\r\n            // Calculate new level from left and right children of the current\r\n            let new_level_left = level.map(node => node.left.isNil() ? undefined : node.left ).filter(node => node !== undefined);\r\n            let new_level_right = level.map(node => node.right.isNil() ? undefined : node.right).filter(node => node !== undefined);\r\n            // Merge left and right subtrees and leave only relevant subtrees\r\n            let new_level = [...new_level_left, ...new_level_right].filter( node => {\r\n                // Node subtree quick reject, node.max is a subtree box\r\n                let [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n                return (Flatten.Utils.LE(mindist, min_stop));\r\n            });\r\n\r\n            min_stop = Distance.minmax_tree_process_level(shape, new_level, min_stop, tree);\r\n            return min_stop;\r\n        }\r\n\r\n        /**\r\n         * Calculates sorted tree of [mindist, maxdist] intervals between query shape\r\n         * and shapes of the planar set.\r\n         * @param shape\r\n         * @param set\r\n         */\r\n        static minmax_tree(shape, set, min_stop) {\r\n            let tree = new IntervalTree();\r\n            let level = [set.index.root];\r\n            let squared_min_stop = min_stop < Number.POSITIVE_INFINITY ? min_stop*min_stop : Number.POSITIVE_INFINITY;\r\n            squared_min_stop = Distance.minmax_tree_process_level(shape, level, squared_min_stop, tree);\r\n            return tree;\r\n        }\r\n\r\n        static minmax_tree_calc_distance(shape, node, min_dist_and_segment) {\r\n            let min_dist_and_segment_new, stop;\r\n            if (node != null && !node.isNil()) {\r\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.left, min_dist_and_segment);\r\n\r\n                if (stop) {\r\n                    return [min_dist_and_segment_new, stop];\r\n                }\r\n\r\n                if (Flatten.Utils.LT(min_dist_and_segment_new[0], Math.sqrt(node.item.key.low))) {\r\n                    return [min_dist_and_segment_new, true];   // stop condition\r\n                }\r\n\r\n                let [dist, shortest_segment] = Distance.distance(shape, node.item.value);\r\n                // console.log(dist)\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment_new[0])) {\r\n                    min_dist_and_segment_new = [dist, shortest_segment];\r\n                }\r\n\r\n                [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.right, min_dist_and_segment_new);\r\n\r\n                return [min_dist_and_segment_new, stop];\r\n            }\r\n\r\n            return [min_dist_and_segment, false];\r\n        }\r\n\r\n        /**\r\n         * Calculates distance between shape and Planar Set of shapes\r\n         * @param shape\r\n         * @param {PlanarSet} set\r\n         * @param {Number} min_stop\r\n         * @returns {*}\r\n         */\r\n        static shape2planarSet(shape, set, min_stop = Number.POSITIVE_INFINITY) {\r\n            let min_dist_and_segment = [min_stop, new Flatten.Segment()];\r\n            let stop = false;\r\n            if (set instanceof Flatten.PlanarSet) {\r\n                let tree = Distance.minmax_tree(shape, set, min_stop);\r\n                [min_dist_and_segment, stop] = Distance.minmax_tree_calc_distance(shape, tree.root, min_dist_and_segment);\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n\r\n        static sort(dist_and_segment) {\r\n            dist_and_segment.sort((d1, d2) => {\r\n                if (Flatten.Utils.LT(d1[0], d2[0])) {\r\n                    return -1;\r\n                }\r\n                if (Flatten.Utils.GT(d1[0], d2[0])) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        static distance(shape1, shape2) {\r\n            return shape1.distanceTo(shape2);\r\n        }\r\n    }\r\n};","/**\r\n * Created by Alex Bol on 3/15/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Edge, Face, PlanarSet, Box} = Flatten;\r\n    let {ray_shoot} = Flatten;\r\n    /**\r\n     * Class representing a polygon.<br/>\r\n     * Polygon in FlattenJS is a multipolygon comprised from a set of [faces]{@link Flatten.Face}. <br/>\r\n     * Face, in turn, is a closed loop of [edges]{@link Flatten.Edge}, where edge may be segment or circular arc<br/>\r\n     * @type {Polygon}\r\n     */\r\n    Flatten.Polygon = class Polygon {\r\n        /**\r\n         * Constructor creates new instance of polygon.<br/>\r\n         * New polygon is empty. Add face to the polygon using method <br/>\r\n         * <code>\r\n         *     polygon.addFace(Points[]|Segments[]|Arcs[])\r\n         * </code>\r\n         */\r\n        constructor() {\r\n            /**\r\n             * Container of faces (closed loops), may be empty\r\n             * @type {PlanarSet}\r\n             */\r\n            this.faces = new PlanarSet();\r\n            /**\r\n             * Container of edges\r\n             * @type {PlanarSet}\r\n             */\r\n            this.edges = new PlanarSet();\r\n        }\r\n\r\n        /**\r\n         * (Getter) Returns bounding box of the polygon\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return [...this.faces].reduce( (acc, face) => acc.merge(face.box), new Box() );\r\n        }\r\n\r\n        /**\r\n         * (Getter) Returns array of vertices\r\n         * @returns {Array}\r\n         */\r\n        get vertices() {\r\n            return [...this.edges].map( edge => edge.start);\r\n        }\r\n\r\n        /**\r\n         * Return true is polygon has no edges\r\n         * @returns {boolean}\r\n         */\r\n        isEmpty() {\r\n            return this.edges.size === 0;\r\n        }\r\n\r\n        /**\r\n         * Add new face to polygon. Returns added face\r\n         * @param {Points[]|Segments[]|Arcs[]} args - list of points or list of shapes (segments and arcs)\r\n         * which comprise a closed loop\r\n         * @returns {Face}\r\n         */\r\n        addFace(...args) {\r\n            let face = new Face(this, ...args);\r\n            this.faces.add(face);\r\n            return face;\r\n        }\r\n\r\n        /**\r\n         * Delete existing face from polygon\r\n         * @param {Face} face Face to be deleted\r\n         * @returns {boolean}\r\n         */\r\n        deleteFace(face) {\r\n            for (let edge of face) {\r\n                let deleted = this.edges.delete(edge);\r\n            }\r\n            let deleted = this.faces.delete(face);\r\n            return deleted;\r\n        }\r\n\r\n        /**\r\n         * Delete chain of edges from the face.\r\n         * @param {Face} face Face to remove chain\r\n         * @param {Edge} edgeFrom Start of the chain of edges to be removed\r\n         * @param {Edge} edgeTo End of the chain of edges to be removed\r\n         */\r\n        removeChain(face, edgeFrom, edgeTo) {\r\n            // Special case: all edges removed\r\n            if (edgeTo.next === edgeFrom) {\r\n                this.deleteFace(face);\r\n                return;\r\n            }\r\n            for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next ) {\r\n                face.remove(this.edges, edge);\r\n                // this.edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n                if (face.isEmpty()) {\r\n                    this.deleteFace(face);    // delete from PlanarSet of faces and update index\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add point as a new vertex and split edge. Point supposed to belong to an edge.\r\n         * When edge is split, new edge created from the start of the edge to the new vertex\r\n         * and inserted before current edge.\r\n         * Current edge is trimmed and updated. Method returns new edge added.\r\n         * @param {Edge} edge Edge to be split with new vertex and then trimmed from start\r\n         * @param {Point} pt Point to be added as a new vertex\r\n         * @returns {Edge}\r\n         */\r\n        addVertex(pt, edge) {\r\n            let shapes = edge.shape.split(pt);\r\n            if (shapes.length < 2) return;\r\n            let newEdge = new Flatten.Edge(shapes[0]);\r\n            let edgeBefore = edge.prev;\r\n\r\n            /* Insert first split edge into linked list after edgeBefore */\r\n            edge.face.insert(this.edges, newEdge, edgeBefore);\r\n\r\n            // Remove old edge from edges container and 2d index\r\n            this.edges.delete(edge);\r\n\r\n            // Update edge shape with second split edge keeping links\r\n            edge.shape = shapes[1];\r\n\r\n            // Add updated edge to the edges container and 2d index\r\n            this.edges.add(edge);\r\n\r\n            return newEdge;\r\n        }\r\n\r\n        reverse() {\r\n            for (let face of this.faces) {\r\n                face.reverse();\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * Create new copied instance of the polygon\r\n         * @returns {Polygon}\r\n         */\r\n        clone() {\r\n            let polygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.clone());\r\n                }\r\n                polygon.addFace(shapes);\r\n            }\r\n            return polygon;\r\n        }\r\n\r\n        /**\r\n         * Returns area of the polygon. Area of an island will be added, area of a hole will be subtracted\r\n         * @returns {number}\r\n         */\r\n        area() {\r\n            let signedArea = [...this.faces].reduce((acc,face) => acc + face.signedArea(), 0);\r\n            return Math.abs(signedArea);\r\n        }\r\n\r\n        /**\r\n         * Returns true if polygon contains point, including polygon boundary, false otherwise\r\n         * Point in polygon test based on ray shooting algorithm\r\n         * @param {Point} point - test point\r\n         * @returns {boolean}\r\n         */\r\n        contains(point) {\r\n            let rel = ray_shoot(this, point);\r\n            return (rel == Flatten.INSIDE || rel == Flatten.BOUNDARY) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * Return distance and shortest segment between polygon and other shape as array [distance, shortest_segment]\r\n         * @param {Shape} shape Shape of one of the types Point, Circle, Line, Segment, Arc or Polygon\r\n         * @returns {Number | Segment}\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2polygon(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle ||\r\n            shape instanceof Flatten.Line ||\r\n            shape instanceof Flatten.Segment ||\r\n            shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            /* this method is bit faster */\r\n            if (shape instanceof  Flatten.Polygon) {\r\n                let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n                let dist, shortest_segment;\r\n\r\n                for (let edge of this.edges) {\r\n                    // let [dist, shortest_segment] = Distance.shape2polygon(edge.shape, shape);\r\n                    let min_stop = min_dist_and_segment[0];\r\n                    [dist, shortest_segment] = Distance.shape2planarSet(edge.shape, shape.edges, min_stop);\r\n                    if (Flatten.Utils.LT(dist, min_stop)) {\r\n                        min_dist_and_segment = [dist, shortest_segment];\r\n                    }\r\n                }\r\n                return min_dist_and_segment;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return array of intersection points between polygon and other shape\r\n         * @param shape Shape of the one of supported types <br/>\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Polygon.intersectLine2Polygon(shape, this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle ||\r\n                shape instanceof Flatten.Segment ||\r\n                shape instanceof Flatten.Arc) {\r\n                return Polygon.intersectShape2Polygon(shape, this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Polygon.intersectPolygon2Polygon(shape, this);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return true if polygon is valid for boolean operations\r\n         * Polygon is valid if <br/>\r\n         * 1. All faces are simple polygons (there are no self-intersected polygons) <br/>\r\n         * 2. All faces are orientable and there is no island inside island or hole inside hole - TODO <br/>\r\n         * 3. There is no intersections between faces (excluding touching) - TODO <br/>\r\n         * @returns {boolean}\r\n         */\r\n        isValid() {\r\n            let valid = true;\r\n            // 1. Polygon is invalid if at least one face is not simple\r\n            for (let face of this.faces) {\r\n                if (!face.isSimple(this.edges)) {\r\n                    valid = false;\r\n                    break;\r\n                }\r\n            }\r\n            // 2. TODO: check if no island inside island and no hole inside hole\r\n            // 3. TODO: check the there is no intersection between faces\r\n            return valid;\r\n        }\r\n\r\n        /**\r\n         * Returns new polygon translated by vector vec\r\n         * @param {Vector} vec\r\n         * @returns {Polygon}\r\n         */\r\n        translate(vec) {\r\n            let newPolygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.translate(vec));\r\n                }\r\n                newPolygon.addFace(shapes);\r\n            }\r\n            return newPolygon;\r\n        }\r\n\r\n        /**\r\n         * Return new polygon rotated by given angle around given point\r\n         * If point omitted, rotate around origin (0,0)\r\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n         * @param {number} angle - rotation angle in radians\r\n         * @param {Point} center - rotation center, default is (0,0)\r\n         * @returns {Polygon} - new rotated polygon\r\n         */\r\n        rotate(angle=0, center=new Flatten.Point()) {\r\n            let newPolygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.rotate(angle, center));\r\n                }\r\n                newPolygon.addFace(shapes);\r\n            }\r\n            return newPolygon;\r\n        }\r\n\r\n        /**\r\n         * Return new polygon transformed using affine transformation matrix\r\n         * @param {Matrix} matrix - affine transformation matrix\r\n         * @returns {Polygon} - new polygon\r\n         */\r\n        transform(matrix = new Flatten.Matrix()) {\r\n            let newPolygon = new Polygon();\r\n            for (let face of this.faces) {\r\n                let shapes = [];\r\n                for (let edge of face) {\r\n                    shapes.push(edge.shape.transform(matrix));\r\n                }\r\n                newPolygon.addFace(shapes);\r\n            }\r\n            return newPolygon;\r\n        }\r\n\r\n        static intersectShape2Polygon(shape, polygon) {\r\n            let ip = [];\r\n\r\n            if ( polygon.isEmpty() || shape.box.not_intersect(polygon.box) ) {\r\n                return ip;\r\n            }\r\n\r\n            let resp_edges = polygon.edges.search(shape.box);\r\n\r\n            for (let edge of resp_edges) {\r\n                for (let pt of shape.intersect(edge.shape)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Polygon(line, polygon) {\r\n            let ip = [];\r\n\r\n            if ( polygon.isEmpty() ) {\r\n                return ip;\r\n            }\r\n\r\n            for (let edge of polygon.edges) {\r\n                for (let pt of line.intersect(edge.shape)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        static intersectPolygon2Polygon(polygon1, polygon2) {\r\n            let ip = [];\r\n\r\n            if (polygon1.isEmpty() || polygon2.isEmpty()) {\r\n                return ip;\r\n            }\r\n\r\n            if (polygon1.box.not_intersect(polygon2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            for (let edge1 of polygon1.edges) {\r\n                for (let pt of Polygon.intersectShape2Polygon(edge1.shape, polygon2)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        /**\r\n         * Return string to draw polygon in svg\r\n         * @param attrs  - json structure with attributes for svg path element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\", \"fillRule\", \"fillOpacity\"\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"lightcyan\", fillRule:\"evenodd\", fillOpacity: \"1\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, fill, fillRule, fillOpacity, id, className} = attrs;\r\n            // let restStr = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            let svgStr = `\\n<path stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"lightcyan\"}\" fill-rule=\"${fillRule || \"evenodd\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} d=\"`;\r\n            for (let face of this.faces) {\r\n                svgStr += face.svg();\r\n            }\r\n            svgStr += `\" >\\n</path>`;\r\n            return svgStr;\r\n        }\r\n\r\n        /**\r\n         * Returns JSON object. This method defines how data will be\r\n         * serialized when called JSON.stringify method with this object\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return [...this.faces].map(face => face.toJSON());\r\n        }\r\n    }\r\n};","\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Polygon, Point, Segment, Arc, Line, Ray} = Flatten;\r\n\r\n    Flatten.ray_shoot = function(polygon, point) {\r\n        let contains = undefined;\r\n\r\n        // if (!(polygon instanceof Polygon && point instanceof Point)) {\r\n        //     throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        // }\r\n\r\n        // 1. Quick reject\r\n        if (polygon.box.not_intersect(point.box)) {\r\n            return Flatten.OUTSIDE;\r\n        }\r\n\r\n        let ray = new Ray(point);\r\n        let line = new Line(ray.pt, ray.norm);\r\n\r\n        // 2. Locate relevant edges of the polygon\r\n        let resp_edges = polygon.edges.search(ray.box);\r\n\r\n        if (resp_edges.length == 0) {\r\n            return Flatten.OUTSIDE;\r\n        }\r\n\r\n        // 3. Calculate intersections\r\n        let intersections = [];\r\n        for (let edge of resp_edges) {\r\n            for (let ip of ray.intersect(edge.shape)) {\r\n\r\n                // If intersection is equal to query point then point lays on boundary\r\n                if (ip.equalTo(point)) {\r\n                    return Flatten.BOUNDARY;\r\n                }\r\n\r\n                intersections.push({\r\n                    pt: ip,\r\n                    edge: edge\r\n                });\r\n            }\r\n        }\r\n\r\n        // 4. Sort intersection in x-ascending order\r\n        intersections.sort( (i1, i2) => {\r\n            if (Flatten.Utils.LT(i1.pt.x, i2.pt.x)) {\r\n                return -1;\r\n            }\r\n            if (Flatten.Utils.GT(i1.pt.x, i2.pt.x)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        // 5. Count real intersections, exclude touching\r\n        let counter = 0;\r\n\r\n        for (let i=0; i < intersections.length; i++) {\r\n            let intersection = intersections[i];\r\n            if (intersection.pt.equalTo(intersection.edge.shape.start)) {\r\n                /* skip same point between same edges if already counted */\r\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\r\n                    intersection.edge.prev === intersections[i-1].edge) {\r\n                    continue;\r\n                }\r\n                let prev_edge = intersection.edge.prev;\r\n                let prev_tangent = prev_edge.shape.tangentInEnd();\r\n                let prev_point = intersection.pt.translate(prev_tangent);\r\n\r\n                let cur_tangent = intersection.edge.shape.tangentInStart();\r\n                let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n                let prev_on_the_left = prev_point.leftTo(line);\r\n                let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n                if ( (prev_on_the_left && !cur_on_the_left) || (!prev_on_the_left && cur_on_the_left) ) {\r\n                    counter++;\r\n                }\r\n            }\r\n            else if (intersection.pt.equalTo(intersection.edge.shape.end)) {\r\n                /* skip same point between same edges if already counted */\r\n                if (i > 0 && intersection.pt.equalTo(intersections[i-1].pt) &&\r\n                    intersection.edge.next === intersections[i-1].edge) {\r\n                    continue;\r\n                }\r\n                let next_edge = intersection.edge.next;\r\n                let next_tangent = next_edge.shape.tangentInStart();\r\n                let next_point = intersection.pt.translate(next_tangent);\r\n\r\n                let cur_tangent = intersection.edge.shape.tangentInEnd();\r\n                let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n                let next_on_the_left = next_point.leftTo(line);\r\n                let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n                if ( (next_on_the_left && !cur_on_the_left) || (!next_on_the_left && cur_on_the_left) ) {\r\n                    counter++;\r\n                }\r\n            }\r\n            else {        /* intersection point is not a coincident with a vertex */\r\n                if (intersection.edge.shape instanceof Segment) {\r\n                    counter++;\r\n                }\r\n                else {\r\n                    /* Check if ray does not touch the curve in the extremal (top or bottom) point */\r\n                    let box = intersection.edge.shape.box;\r\n                    if ( !(Flatten.Utils.EQ(intersection.pt.y, box.ymin) ||\r\n                            Flatten.Utils.EQ(intersection.pt.y, box.ymax)) ) {\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 6. Odd or even?\r\n        contains = counter % 2 == 1 ? Flatten.INSIDE : Flatten.OUTSIDE;\r\n\r\n        return contains;\r\n    };\r\n};","\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Point, Segment, Line, Circle, Arc, Box, Vector} = Flatten;\r\n    /**\r\n     * Class representing a horizontal ray, used by ray shooting algorithm\r\n     * @type {Ray}\r\n     */\r\n    Flatten.Ray = class Ray {\r\n        /**\r\n         * Construct ray by setting start point\r\n         * @param {Point} pt - start point\r\n         */\r\n        constructor(...args) {\r\n            this.pt = new Point();\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Point) {\r\n                this.pt = args[0].clone();\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                this.pt = new Point(args[0], args[1]);\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Returns copied instance of the ray object\r\n         * @returns {Ray}\r\n         */\r\n        clone() {\r\n            return new Ray(this.pt);\r\n        }\r\n\r\n        /**\r\n         * Returns half-infinite bounding box of the ray\r\n         * @returns {Box} - bounding box\r\n         */\r\n        get box() {\r\n            return new Box(\r\n                this.pt.x,\r\n                this.pt.y,\r\n                Number.POSITIVE_INFINITY,\r\n                this.pt.y\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Return ray start point\r\n         * @returns {Point} - ray start point\r\n         */\r\n        get start() {\r\n            return this.pt;\r\n        }\r\n\r\n        /**\r\n         * Return ray normal vector (0,1) - horizontal ray\r\n         * @returns {Vector} - ray normal vector\r\n         */\r\n        get norm() {\r\n            return new Vector(0,1);\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between ray and segment or arc\r\n         * @param {Segment|Arc} - Shape to intersect with ray\r\n         * @returns {Array} array of intersection points\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Segment) {\r\n                return this.intersectRay2Segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Arc) {\r\n                return this.intersectRay2Arc(this, shape);\r\n            }\r\n        }\r\n\r\n        intersectRay2Segment(ray, segment) {\r\n            let ip = [];\r\n\r\n            if (ray.box.not_intersect(segment.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line = new Line(ray.start, ray.norm);\r\n            let ip_tmp = line.intersect(segment);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            /* If there were two intersection points between line and ray,\r\n            and now there is exactly one left, it means ray starts between these points\r\n            and there is another intersection point - start of the ray */\r\n            if (ip_tmp.length == 2 && ip.length == 1 && ray.start.on(line)) {\r\n                ip.push(ray.start);\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        intersectRay2Arc(ray, arc) {\r\n            let ip = [];\r\n\r\n            if (ray.box.not_intersect(arc.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let line = new Line(ray.start, ray.norm);\r\n            let ip_tmp = line.intersect(arc);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n    };\r\n\r\n    Flatten.ray = (...args) => new Flatten.Ray(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function (Flatten) {\r\n    let {Point, Segment, Arc, Box, Edge} = Flatten;\r\n    /**\r\n     * Class representing a face (closed loop) in a [polygon]{@link Flatten.Polygon} object.\r\n     * Face is a circular bidirectional linked list of [edges]{@link Flatten.Edge}.\r\n     * Face object cannot be instantiated with a constructor.\r\n     * Instead, use [polygon.addFace()]{@link Flatten.Polygon#addFace} method.\r\n     * <br/>\r\n     * Note, that face only set entry point to the linked list of edges but does not contain edges by itself.\r\n     * Container of edges is a property of the polygon object. <br/>\r\n     *\r\n     * @example\r\n     * // Face implements \"next\" iterator which enables to iterate edges in for loop:\r\n     * for (let edge of face) {\r\n     *      console.log(edge.shape.length)     // do something\r\n     * }\r\n     *\r\n     * // Instead, it is possible to iterate edges as linked list, starting from face.first:\r\n     * let edge = face.first;\r\n     * do {\r\n     *   console.log(edge.shape.length);   // do something\r\n     *   edge = edge.next;\r\n     * } while (edge != face.first)\r\n     */\r\n    Flatten.Face = class Face {\r\n        constructor(polygon, ...args) {\r\n            /**\r\n             * Reference to the first edge in face\r\n             */\r\n            this.first;\r\n            /**\r\n             * Reference to the last edge in face\r\n             */\r\n            this.last;\r\n\r\n            this._box = undefined;  // new Box();\r\n            this._orientation = undefined;\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            /* If passed an array it supposed to be:\r\n             1) array of shapes that performs close loop or\r\n             2) array of points that performs set of vertices\r\n             */\r\n            if (args.length == 1) {\r\n                if (args[0] instanceof Array) {\r\n                    // let argsArray = args[0];\r\n                    let shapes = args[0];  // argsArray[0];\r\n                    if (shapes.length == 0)\r\n                        return;\r\n\r\n                    if (shapes.every((shape) => {\r\n                            return shape instanceof Point\r\n                        })) {\r\n                        let segments = Face.points2segments(shapes);\r\n                        this.shapes2face(polygon.edges, segments);\r\n                    }\r\n                    else if (shapes.every((shape) => {\r\n                            return (shape instanceof Segment || shape instanceof Arc)\r\n                        })) {\r\n                        this.shapes2face(polygon.edges, shapes);\r\n                    }\r\n                    // this is from JSON.parse object\r\n                    else if (shapes.every((shape) => {\r\n                            return (shape.name === \"segment\" || shape.name === \"arc\")\r\n                        })) {\r\n                        let flattenShapes = [];\r\n                        for (let shape of shapes) {\r\n                            let flattenShape;\r\n                            if (shape.name === \"segment\") {\r\n                                flattenShape = new Segment(shape);\r\n                            }\r\n                            else {\r\n                                flattenShape = new Arc(shape);\r\n                            }\r\n                            flattenShapes.push(flattenShape);\r\n                        }\r\n                        this.shapes2face(polygon.edges, flattenShapes);\r\n                    }\r\n                }\r\n                /* Create new face and copy edges into polygon.edges set */\r\n                else if (args[0] instanceof Face) {\r\n                    let face = args[0];\r\n                    this.first = face.first;\r\n                    this.last = face.last;\r\n                    for (let edge of face) {\r\n                        polygon.edges.add(edge);\r\n                    }\r\n                }\r\n            }\r\n            /* If passed two edges, consider them as start and end of the face loop */\r\n            /* THIS METHOD WILL BE USED BY BOOLEAN OPERATIONS */\r\n            /* Assume that edges already copied to polygon.edges set in the clip algorithm !!! */\r\n            if (args.length == 2 && args[0] instanceof Edge && args[1] instanceof Edge) {\r\n                this.first = args[0];                          // first edge in face or undefined\r\n                this.last = args[1];                           // last edge in face or undefined\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n                // set arc length\r\n                this.setArcLength();\r\n                /*\r\n                 let edge = this.first;\r\n                 edge.arc_length = 0;\r\n                 edge = edge.next;\r\n                 while (edge !== this.first) {\r\n                 edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                 edge = edge.next;\r\n                 }\r\n                 */\r\n\r\n                // this.box = this.getBox();\r\n                // this.orientation = this.getOrientation();      // face direction cw or ccw\r\n            }\r\n        }\r\n\r\n        [Symbol.iterator]() {\r\n            let edge = undefined;\r\n            return {\r\n                next: () => {\r\n                    let value = edge ? edge : this.first;\r\n                    let done = this.first ? (edge ? edge === this.first : false) : true;\r\n                    edge = value ? value.next : undefined;\r\n                    return {value: value, done: done};\r\n                }\r\n            };\r\n        };\r\n\r\n        /**\r\n         * Return array of edges from first to last\r\n         * @returns {Array}\r\n         */\r\n        get edges() {\r\n            let face_edges = [];\r\n            for (let edge of this) {\r\n                face_edges.push(edge);\r\n            }\r\n            return face_edges;\r\n        }\r\n\r\n        /**\r\n         * Return number of edges in the face\r\n         * @returns {number}\r\n         */\r\n        get size() {\r\n            let counter = 0;\r\n            for (let edge of this) {\r\n                counter++;\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Return bounding box of the face\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            if (this._box === undefined) {\r\n                let box = new Flatten.Box();\r\n                for (let edge of this) {\r\n                    box = box.merge(edge.box);\r\n                }\r\n                this._box = box;\r\n            }\r\n            return this._box;\r\n        }\r\n\r\n        static points2segments(points) {\r\n            let segments = [];\r\n            for (let i = 0; i < points.length; i++) {\r\n                segments.push(new Segment(points[i], points[(i + 1) % points.length]));\r\n            }\r\n            return segments;\r\n        }\r\n\r\n        shapes2face(edges, shapes) {\r\n            for (let shape of shapes) {\r\n                let edge = new Edge(shape);\r\n                this.append(edges, edge);\r\n                // this.box = this.box.merge(shape.box);\r\n                // edges.add(edge);\r\n            }\r\n            // this.orientation = this.getOrientation();              // face direction cw or ccw\r\n        }\r\n\r\n        /**\r\n         * Returns true if face is empty, false otherwise\r\n         * @returns {boolean}\r\n         */\r\n        isEmpty() {\r\n            return (this.first === undefined && this.last === undefined)\r\n        }\r\n\r\n        /**\r\n         * Append given edge after the last edge (and before the first edge). <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} edge - Edge to be appended to the linked list\r\n         */\r\n        append(edges, edge) {\r\n            if (this.first === undefined) {\r\n                edge.prev = edge;\r\n                edge.next = edge;\r\n                this.first = edge;\r\n                this.last = edge;\r\n                edge.arc_length = 0;\r\n            }\r\n            else {\r\n                // append to end\r\n                edge.prev = this.last;\r\n                this.last.next = edge;\r\n\r\n                // update edge to be last\r\n                this.last = edge;\r\n\r\n                // restore circular links\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n                // set arc length\r\n                edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n            }\r\n            edge.face = this;\r\n\r\n            edges.add(edge);      // Add new edges into edges container\r\n        }\r\n\r\n        /**\r\n         * Insert edge newEdge into the linked list after the edge edgeBefore <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} newEdge - Edge to be inserted into linked list\r\n         * @param {Edge} edgeBefore - Edge to insert newEdge after it\r\n         */\r\n        insert(edges, newEdge, edgeBefore) {\r\n            if (this.first === undefined) {\r\n                newEdge.prev = newEdge;\r\n                newEdge.next = newEdge;\r\n                this.first = newEdge;\r\n                this.last = newEdge;\r\n            }\r\n            else {\r\n                /* set links to new edge */\r\n                let edgeAfter = edgeBefore.next;\r\n                edgeBefore.next = newEdge;\r\n                edgeAfter.prev = newEdge;\r\n\r\n                /* set links from new edge */\r\n                newEdge.prev = edgeBefore;\r\n                newEdge.next = edgeAfter;\r\n\r\n                /* extend chain if new edge added after last edge */\r\n                if (this.last === edgeBefore)\r\n                    this.first = newEdge;\r\n            }\r\n            newEdge.face = this;\r\n\r\n            // set arc length\r\n            if (newEdge.prev === this.last) {\r\n                newEdge.arc_length = 0;\r\n            }\r\n            else {\r\n                newEdge.arc_length = newEdge.prev.arc_length + newEdge.prev.length;\r\n            }\r\n\r\n            edges.add(newEdge);      // Add new edges into edges container\r\n        }\r\n\r\n        /**\r\n         * Remove the given edge from the linked list of the face <br/>\r\n         * This method mutates current object and does not return any value\r\n         * @param {PlanarSet} edges - Container of edges\r\n         * @param {Edge} edge - Edge to be removed\r\n         */\r\n        remove(edges, edge) {\r\n            // special case if last edge removed\r\n            if (edge === this.first && edge === this.last) {\r\n                this.first = undefined;\r\n                this.last = undefined;\r\n            }\r\n            else {\r\n                // update linked list\r\n                edge.prev.next = edge.next;\r\n                edge.next.prev = edge.prev;\r\n                // update first if need\r\n                if (edge === this.first) {\r\n                    this.first = edge.next;\r\n                }\r\n                // update last if need\r\n                if (edge === this.last) {\r\n                    this.last = edge.prev;\r\n                }\r\n            }\r\n            edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n        }\r\n\r\n        /**\r\n         * Reverse orientation of the face: first edge become last and vice a verse,\r\n         * all edges starts and ends swapped, direction of arcs inverted.\r\n         */\r\n        reverse() {\r\n            // collect edges in revert order with reverted shapes\r\n            let edges = [];\r\n            let edge_tmp = this.last;\r\n            do {\r\n                // reverse shape\r\n                edge_tmp.shape = edge_tmp.shape.reverse();\r\n                edges.push(edge_tmp);\r\n                edge_tmp = edge_tmp.prev;\r\n            } while (edge_tmp !== this.last);\r\n\r\n            // restore linked list\r\n            this.first = undefined;\r\n            this.last = undefined;\r\n            for (let edge of edges) {\r\n                if (this.first === undefined) {\r\n                    edge.prev = edge;\r\n                    edge.next = edge;\r\n                    this.first = edge;\r\n                    this.last = edge;\r\n                    edge.arc_length = 0;\r\n                }\r\n                else {\r\n                    // append to end\r\n                    edge.prev = this.last;\r\n                    this.last.next = edge;\r\n\r\n                    // update edge to be last\r\n                    this.last = edge;\r\n\r\n                    // restore circular links\r\n                    this.last.next = this.first;\r\n                    this.first.prev = this.last;\r\n\r\n                    // set arc length\r\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                }\r\n            }\r\n\r\n            // Recalculate orientation, if set\r\n            if (this._orientation !== undefined) {\r\n                this._orientation = undefined;\r\n                this._orientation = this.orientation();\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Set arc_length property for each of the edges in the face.\r\n         * Arc_length of the edge it the arc length from the first edge of the face\r\n         */\r\n        setArcLength() {\r\n            for (let edge of this) {\r\n                if (edge === this.first) {\r\n                    edge.arc_length = 0.0;\r\n                }\r\n                else {\r\n                    edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n                }\r\n                edge.face = this;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns the absolute value of the area of the face\r\n         * @returns {number}\r\n         */\r\n        area() {\r\n            return Math.abs(this.signedArea());\r\n        }\r\n\r\n        /**\r\n         * Returns signed area of the simple face.\r\n         * Face is simple if it has no self intersections that change its orientation.\r\n         * Then the area will be positive if the orientation of the face is clockwise,\r\n         * and negative if orientation is counterclockwise.\r\n         * It may be zero if polygon is degenerated.\r\n         * @returns {number}\r\n         */\r\n        signedArea() {\r\n            let sArea = 0;\r\n            let ymin = this.box.ymin;\r\n            for (let edge of this) {\r\n                sArea += edge.shape.definiteIntegral(ymin);\r\n            }\r\n            return sArea;\r\n        }\r\n\r\n        /**\r\n         * Return face orientation: one of Flatten.ORIENTATION.CCW, Flatten.ORIENTATION.CW, Flatten.ORIENTATION.NOT_ORIENTABLE <br/>\r\n         * According to Green theorem the area of a closed curve may be calculated as double integral,\r\n         * and the sign of the integral will be defined by the direction of the curve.\r\n         * When the integral (\"signed area\") will be negative, direction is counter clockwise,\r\n         * when positive - clockwise and when it is zero, polygon is not orientable.\r\n         * See {@link https://mathinsight.org/greens_theorem_find_area}\r\n         * @returns {number}\r\n         */\r\n        orientation() {\r\n            if (this._orientation === undefined) {\r\n                let area = this.signedArea();\r\n                if (Flatten.Utils.EQ_0(area)) {\r\n                    this._orientation = Flatten.ORIENTATION.NOT_ORIENTABLE;\r\n                }\r\n                else if (Flatten.Utils.LT(area, 0)) {\r\n                    this._orientation = Flatten.ORIENTATION.CCW;\r\n                }\r\n                else {\r\n                    this._orientation = Flatten.ORIENTATION.CW;\r\n                }\r\n            }\r\n            return this._orientation;\r\n        }\r\n\r\n        /**\r\n         * Returns true if face of the polygon is simple (no self-intersection points found)\r\n         * NOTE: this method is incomplete because it doe not exclude touching points\r\n         * Real self intersection inverts orientation of the polygon.\r\n         * But this is also good enough for the demonstration of the idea\r\n         * @param {Edges} edges - reference to polygon.edges to provide search index\r\n         * @returns {boolean}\r\n         */\r\n        isSimple(edges) {\r\n            let ip = Face.getSelfIntersections(this, edges, true);\r\n            return ip.length == 0;\r\n        }\r\n\r\n        static getSelfIntersections(face, edges, exitOnFirst = false) {\r\n            let int_points = [];\r\n\r\n            // calculate intersections\r\n            for (let edge1 of face) {\r\n\r\n                // request edges of polygon in the box of edge1\r\n                let resp = edges.search(edge1.box);\r\n\r\n                // for each edge2 in response\r\n                for (let edge2 of resp) {\r\n\r\n                    // Skip itself\r\n                    if (edge1 === edge2)\r\n                        continue;\r\n\r\n                    // Skip next and previous edge if both are segment (if one of them arc - calc intersection)\r\n                    if (edge1.shape instanceof Flatten.Segment && edge2.shape instanceof Flatten.Segment &&\r\n                        (edge1.next === edge2 || edge1.prev === edge2))\r\n                        continue;\r\n\r\n                    // calculate intersections between edge1 and edge2\r\n                    let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                    // for each intersection point\r\n                    for (let pt of ip) {\r\n\r\n                        // skip start-end connections\r\n                        if (pt.equalTo(edge1.start) && pt.equalTo(edge2.end) && edge2 === edge1.prev)\r\n                            continue;\r\n                        if (pt.equalTo(edge1.end) && pt.equalTo(edge2.start) && edge2 === edge1.next)\r\n                            continue;\r\n\r\n                        int_points.push(pt);\r\n\r\n                        if (exitOnFirst)\r\n                            break;\r\n                    }\r\n\r\n                    if (int_points.length > 0 && exitOnFirst)\r\n                        break;\r\n                }\r\n\r\n                if (int_points.length > 0 && exitOnFirst)\r\n                    break;\r\n\r\n            }\r\n            return int_points;\r\n        }\r\n\r\n        toJSON() {\r\n            return this.edges.map(edge => edge.toJSON());\r\n        }\r\n\r\n        /**\r\n         * Returns string to be assigned to \"d\" attribute inside defined \"path\"\r\n         * @returns {string}\r\n         */\r\n        svg() {\r\n            let svgStr = `\\nM${this.first.start.x},${this.first.start.y}`;\r\n            for (let edge of this) {\r\n                svgStr += edge.svg();\r\n            }\r\n            svgStr += ` z`;\r\n            return svgStr;\r\n        }\r\n\r\n    };\r\n};","/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing an edge of polygon. Edge shape may be Segment or Arc.\r\n     * Each edge contains references to the next and previous edges in the face of the polygon.\r\n     *\r\n     * @type {Edge}\r\n     */\r\n    Flatten.Edge = class Edge {\r\n        /**\r\n         * Construct new instance of edge\r\n         * @param {Shape} shape Shape of type Segment of Arc\r\n         */\r\n        constructor(shape) {\r\n            /**\r\n             * Shape of the edge: Segment or Arc\r\n             */\r\n            this.shape = shape;\r\n            /**\r\n             * Pointer to the next edge in the face\r\n             */\r\n            this.next;\r\n            /**\r\n             * Pointer to the previous edge in the face\r\n             */\r\n            this.prev;\r\n            /**\r\n             * Pointer to the face containing this edge\r\n             * @type {Face}\r\n             */\r\n            this.face;\r\n            /**\r\n             * \"Arc distance\" from the face start\r\n             * @type {number}\r\n             */\r\n            this.arc_length = 0;\r\n            /**\r\n             * Start inclusion flag (inside/outside/boundary)\r\n             * @type {Boolean}\r\n             */\r\n            this.bvStart = undefined;\r\n            /**\r\n             * End inclusion flag (inside/outside/boundary)\r\n             * @type {Boolean}\r\n             */\r\n            this.bvEnd = undefined;\r\n            /**\r\n             * Edge inclusion flag (Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY)\r\n             * @type {*}\r\n             */\r\n            this.bv = undefined;\r\n            /**\r\n             * Overlap flag for boundary edge (Flatten.OVERLAP_SAME/Flatten.OVERLAP_OPPOSITE)\r\n             * @type {*}\r\n             */\r\n            this.overlap = undefined;\r\n        }\r\n\r\n        /**\r\n         * Get edge start point\r\n         */\r\n        get start() {\r\n            return this.shape.start;\r\n        }\r\n\r\n        /**\r\n         * Get edge end point\r\n         */\r\n        get end() {\r\n            return this.shape.end;\r\n        }\r\n\r\n        /**\r\n         * Get edge length\r\n         */\r\n        get length() {\r\n            return this.shape.length;\r\n        }\r\n\r\n        /**\r\n         * Get bounding box of the edge\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return this.shape.box;\r\n        }\r\n\r\n        isSegment() {\r\n            return this.shape instanceof Flatten.Segment;\r\n        }\r\n\r\n        isArc() {\r\n            return this.shape instanceof Flatten.Arc;\r\n        }\r\n        /**\r\n         * Get middle point of the edge\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            return this.shape.middle();\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to the edge, false otherwise\r\n         * @param {Point} pt - test point\r\n         */\r\n        contains(pt) {\r\n            return this.shape.contains(pt);\r\n        }\r\n\r\n        /**\r\n         * Set inclusion flag of the edge with respect to another polygon\r\n         * Inclusion flag is one of Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY\r\n         * @param polygon\r\n         */\r\n        setInclusion(polygon) {\r\n            if (this.bv !== undefined) return this.bv;\r\n\r\n            if (this.bvStart === undefined) {\r\n                this.bvStart = Flatten.ray_shoot(polygon, this.start);\r\n            }\r\n            if (this.bvEnd === undefined) {\r\n                this.bvEnd = Flatten.ray_shoot(polygon, this.end);\r\n            }\r\n            /* At least one end outside - the whole edge outside */\r\n            if (this.bvStart === Flatten.OUTSIDE || this.bvEnd == Flatten.OUTSIDE) {\r\n                this.bv = Flatten.OUTSIDE;\r\n            }\r\n            /* At least one end inside - the whole edge inside */\r\n            else if (this.bvStart === Flatten.INSIDE || this.bvEnd == Flatten.INSIDE) {\r\n                this.bv = Flatten.INSIDE;\r\n            }\r\n            /* Both are boundary - check the middle point */\r\n            else {\r\n                let bvMiddle = Flatten.ray_shoot(polygon, this.middle());\r\n                this.bv = bvMiddle;\r\n            }\r\n            return this.bv;\r\n        }\r\n\r\n        /**\r\n         * Set overlapping between two coincident boundary edges\r\n         * Overlapping flag is one of Flatten.OVERLAP_SAME or Flatten.OVERLAP_OPPOSITE\r\n         * @param edge\r\n         */\r\n        setOverlap(edge) {\r\n            let flag = undefined;\r\n            let shape1 = this.shape;\r\n            let shape2 = edge.shape;\r\n\r\n            if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Segment) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n            else if (shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Arc) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.counterClockwise === shape2.counterClockwise &&\r\n                    shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.counterClockwise !== shape2.counterClockwise &&\r\n                    shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n            else if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Arc ||\r\n                shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Segment) {\r\n                if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_SAME;\r\n                }\r\n                else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\r\n                    flag = Flatten.OVERLAP_OPPOSITE;\r\n                }\r\n            }\r\n\r\n            /* Do not update overlap flag if already set on previous chain */\r\n            if (this.overlap === undefined) this.overlap = flag;\r\n            if (edge.overlap === undefined) edge.overlap = flag;\r\n        }\r\n\r\n        svg() {\r\n            if (this.shape instanceof Flatten.Segment) {\r\n                return ` L${this.shape.end.x},${this.shape.end.y}`;\r\n            }\r\n            else if (this.shape instanceof  Flatten.Arc) {\r\n                let arc = this.shape;\r\n                let largeArcFlag;\r\n                let sweepFlag = arc.counterClockwise ? \"1\" : \"0\";\r\n\r\n                // Draw full circe arc as special case: split it into two half-circles\r\n                if (Flatten.Utils.EQ(arc.sweep, 2*Math.PI)) {\r\n                    let sign = arc.counterClockwise ? 1 : -1;\r\n                    let halfArc1 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle, arc.startAngle + sign*Math.PI, arc.counterClockwise);\r\n                    let halfArc2 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle + sign*Math.PI, arc.endAngle, arc.counterClockwise);\r\n\r\n                    largeArcFlag = \"0\";\r\n\r\n                    return ` A${halfArc1.r},${halfArc1.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc1.end.x},${halfArc1.end.y}\r\n                    A${halfArc2.r},${halfArc2.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc2.end.x},${halfArc2.end.y}`\r\n                }\r\n                else {\r\n                    largeArcFlag = arc.sweep <= Math.PI ? \"0\" : \"1\";\r\n\r\n                    return ` A${arc.r},${arc.r} 0 ${largeArcFlag},${sweepFlag} ${arc.end.x},${arc.end.y}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        toJSON() {\r\n            return this.shape.toJSON();\r\n        }\r\n    };\r\n};","/**\r\n * Created by Alex Bol on 3/7/2017.\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class Box represent bounding box of the shape\r\n     * @type {Box}\r\n     */\r\n    Flatten.Box = class Box {\r\n        /**\r\n         *\r\n         * @param {number} xmin - minimal x coordinate\r\n         * @param {number} ymin - minimal y coordinate\r\n         * @param {number} xmax - maximal x coordinate\r\n         * @param {number} ymax - maximal y coordinate\r\n         */\r\n        constructor(xmin=undefined, ymin=undefined, xmax=undefined, ymax=undefined) {\r\n            /**\r\n             * Minimal x coordinate\r\n             * @type {number}\r\n             */\r\n            this.xmin = xmin;\r\n            /**\r\n             * Minimal y coordinate\r\n             * @type {number}\r\n             */\r\n            this.ymin = ymin;\r\n            /**\r\n             * Maximal x coordinate\r\n             * @type {number}\r\n             */\r\n            this.xmax = xmax;\r\n            /**\r\n             * Maximal y coordinate\r\n             * @type {number}\r\n             */\r\n            this.ymax = ymax;\r\n        }\r\n\r\n        /**\r\n         * Clones and returns new instance of box\r\n         * @returns {Box}\r\n         */\r\n        clone() {\r\n            return new Box(this.xmin, this.ymin, this.xmax, this.ymax);\r\n        }\r\n\r\n        /**\r\n         * Property low need for interval tree interface\r\n         * @returns {Point}\r\n         */\r\n        get low() {\r\n            return new Flatten.Point(this.xmin, this.ymin);\r\n        }\r\n\r\n        /**\r\n         * Property high need for interval tree interface\r\n         * @returns {Point}\r\n         */\r\n        get high() {\r\n            return new Flatten.Point(this.xmax, this.ymax);\r\n        }\r\n\r\n        /**\r\n         * Property max returns the box itself !\r\n         * @returns {Box}\r\n         */\r\n        get max() {\r\n            return this.clone();\r\n        }\r\n\r\n        /**\r\n         * Return center of the box\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return new Flatten.Point( (this.xmin + this.xmax)/2, (this.ymin + this.ymax)/2 );\r\n        }\r\n\r\n        /**\r\n         * Returns true if not intersected with other box\r\n         * @param {Box} other_box - other box to test\r\n         * @returns {boolean}\r\n         */\r\n        not_intersect(other_box) {\r\n            return (\r\n                this.xmax < other_box.xmin ||\r\n                this.xmin > other_box.xmax ||\r\n                this.ymax < other_box.ymin ||\r\n                this.ymin > other_box.ymax\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Returns true if intersected with other box\r\n         * @param {Box} other_box - Query box\r\n         * @returns {boolean}\r\n         */\r\n        intersect(other_box) {\r\n            return !this.not_intersect(other_box);\r\n        }\r\n\r\n        /**\r\n         * Returns new box merged with other box\r\n         * @param {Box} other_box - Other box to merge with\r\n         * @returns {Box}\r\n         */\r\n        merge(other_box) {\r\n            return new Box(\r\n                this.xmin === undefined ? other_box.xmin : Math.min(this.xmin, other_box.xmin),\r\n                this.ymin === undefined ? other_box.ymin : Math.min(this.ymin, other_box.ymin),\r\n                this.xmax === undefined ? other_box.xmax : Math.max(this.xmax, other_box.xmax),\r\n                this.ymax === undefined ? other_box.ymax : Math.max(this.ymax, other_box.ymax)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Defines predicate \"less than\" between two boxes. Need for interval index\r\n         * @param {Box} other_box - other box\r\n         * @returns {boolean} - true if this box less than other box, false otherwise\r\n         */\r\n        less_than(other_box) {\r\n            if (this.low.lessThan(other_box.low))\r\n                return true;\r\n            if (this.low.equalTo(other_box.low) && this.high.lessThan(other_box.high))\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns true if this box is equal to other box, false otherwise\r\n         * @param {Box} other_box - query box\r\n         * @returns {boolean}\r\n         */\r\n        equal_to(other_box) {\r\n            return (this.low.equalTo(other_box.low) && this.high.equalTo(other_box.high));\r\n        }\r\n\r\n        output() {\r\n            return this.clone();\r\n        }\r\n\r\n        maximal_val(box1, box2) {\r\n            // return pt1.lessThan(pt2) ? pt2.clone() : pt1.clone();\r\n            return box1.merge(box2);\r\n        }\r\n\r\n        val_less_than(pt1, pt2) {\r\n            return pt1.lessThan(pt2);\r\n        }\r\n\r\n        /**\r\n         * Set new values to the box object\r\n         * @param {number} xmin - miminal x coordinate\r\n         * @param {number} ymin - minimal y coordinate\r\n         * @param {number} xmax - maximal x coordinate\r\n         * @param {number} ymax - maximal y coordinate\r\n         */\r\n        set(xmin, ymin, xmax, ymax) {\r\n            this.xmin = xmin;\r\n            this.ymin = ymin;\r\n            this.xmax = xmax;\r\n            this.ymax = ymax;\r\n        }\r\n\r\n        /**\r\n         * Return string to draw circle in svg\r\n         * @param {Object} attrs - json structure with attributes of svg rectangle element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, fill, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n            let width = this.xmax - this.xmin;\r\n            let height = this.ymax - this.ymin;\r\n\r\n            return `\\n<rect x=\"${this.xmin}\" y=\"${this.ymin}\" width=${width} height=${height} stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`;\r\n        }\r\n    };\r\n};\r\n","/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a circular arc\r\n     * @type {Arc}\r\n     */\r\n    Flatten.Arc = class Arc {\r\n        /**\r\n         *\r\n         * @param {Point} pc - arc center\r\n         * @param {number} r - arc radius\r\n         * @param {number} startAngle - start angle in radians from 0 to 2*PI\r\n         * @param {number} endAngle - end angle in radians from 0 to 2*PI\r\n         * @param {boolean} counterClockwise - arc direction, true - clockwise, false - counter clockwise\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Arc center\r\n             * @type {Point}\r\n             */\r\n            this.pc = new Flatten.Point();\r\n            /**\r\n             * Arc radius\r\n             * @type {number}\r\n             */\r\n            this.r = 1;\r\n            /**\r\n             * Arc start angle in radians\r\n             * @type {number}\r\n             */\r\n            this.startAngle = 0;\r\n            /**\r\n             * Arc end angle in radians\r\n             * @type {number}\r\n             */\r\n            this.endAngle = 2*Math.PI;\r\n            /**\r\n             * Arc orientation\r\n             * @type {boolean}\r\n             */\r\n            this.counterClockwise = Flatten.CCW;\r\n\r\n            if (args.length == 0)\r\n                return;\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"arc\") {\r\n                let {pc, r, startAngle, endAngle, counterClockwise} = args[0];\r\n                this.pc = new Flatten.Point(pc.x, pc.y);\r\n                this.r = r;\r\n                this.startAngle = startAngle;\r\n                this.endAngle = endAngle;\r\n                this.counterClockwise = counterClockwise;\r\n                return;\r\n            }\r\n            else {\r\n                let [pc, r, startAngle, endAngle, counterClockwise] = [...args];\r\n                if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n                if (r !== undefined) this.r = r;\r\n                if (startAngle !== undefined) this.startAngle = startAngle;\r\n                if (endAngle!== undefined) this.endAngle = endAngle;\r\n                if (counterClockwise !== undefined) this.counterClockwise = counterClockwise;\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Return new instance of arc\r\n         * @returns {Arc}\r\n         */\r\n        clone() {\r\n            return new Flatten.Arc(this.pc.clone(), this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n        }\r\n\r\n        /**\r\n         * Get sweep angle in radians. Sweep angle is non-negative number from 0 to 2*PI\r\n         * @returns {number}\r\n         */\r\n        get sweep() {\r\n            if (Flatten.Utils.EQ(this.startAngle, this.endAngle))\r\n                return 0.0;\r\n            if (Flatten.Utils.EQ(Math.abs(this.startAngle - this.endAngle), Flatten.PIx2)) {\r\n                return Flatten.PIx2;\r\n            }\r\n            let sweep;\r\n            if (this.counterClockwise) {\r\n                sweep = Flatten.Utils.GT(this.endAngle, this.startAngle) ?\r\n                    this.endAngle - this.startAngle : this.endAngle - this.startAngle + Flatten.PIx2;\r\n            } else {\r\n                sweep = Flatten.Utils.GT(this.startAngle, this.endAngle) ?\r\n                    this.startAngle - this.endAngle : this.startAngle - this.endAngle + Flatten.PIx2;\r\n            }\r\n\r\n            if ( Flatten.Utils.GT(sweep, Flatten.PIx2) ) {\r\n                sweep -= Flatten.PIx2;\r\n            }\r\n            if ( Flatten.Utils.LT(sweep, 0) ) {\r\n                sweep += Flatten.PIx2;\r\n            }\r\n            return sweep;\r\n        }\r\n\r\n        /**\r\n         * Get start point of arc\r\n         * @returns {Point}\r\n         */\r\n        get start() {\r\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n            return p0.rotate(this.startAngle, this.pc);\r\n        }\r\n\r\n        /**\r\n         * Get end point of arc\r\n         * @returns {Point}\r\n         */\r\n        get end() {\r\n            let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n            return p0.rotate(this.endAngle, this.pc);\r\n        }\r\n\r\n        /**\r\n         * Get center of arc\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return this.pc.clone();\r\n        }\r\n\r\n        get vertices() {\r\n            return [this.start.clone(), this.end.clone()];\r\n        }\r\n\r\n        /**\r\n         * Get arc length\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return Math.abs(this.sweep*this.r);\r\n        }\r\n\r\n        /**\r\n         * Get bounding box of the arc\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            let func_arcs = this.breakToFunctional();\r\n            let box = func_arcs.reduce( (acc, arc) => acc.merge(arc.start.box), new Flatten.Box() );\r\n            box = box.merge(this.end.box);\r\n            return box;\r\n        }\r\n\r\n        /**\r\n         * Returns true if arc contains point, false otherwise\r\n         * @param {Point} pt - point to test\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            // first check if  point on circle (pc,r)\r\n            if (!Flatten.Utils.EQ(this.pc.distanceTo(pt)[0], this.r))\r\n                return false;\r\n\r\n            // point on circle\r\n\r\n            if (pt.equalTo(this.start))\r\n                return true;\r\n\r\n            let angle = new Flatten.Vector(this.pc, pt).slope;\r\n            let test_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise);\r\n            return Flatten.Utils.LE(test_arc.length, this.length);\r\n        }\r\n\r\n        /**\r\n         * When given point belongs to arc, return array of two arcs split by this point. If points is incident\r\n         * to start or end point of the arc, return clone of the arc. If point does not belong to the arcs, return\r\n         * empty array.\r\n         * @param {Point} pt Query point\r\n         * @returns {Arc[]}\r\n         */\r\n        split(pt) {\r\n            if (!this.contains(pt))\r\n                return [];\r\n\r\n            if (Flatten.Utils.EQ_0(this.sweep))\r\n                return [this.clone()];\r\n\r\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\r\n                return [this.clone()];\r\n\r\n            let angle = new Flatten.Vector(this.pc, pt).slope;\r\n\r\n            return [\r\n                new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise),\r\n                new Flatten.Arc(this.pc, this.r, angle, this.endAngle, this.counterClockwise)\r\n            ]\r\n        }\r\n\r\n        /**\r\n         * Return middle point of the arc\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            let endAngle = this.counterClockwise ? this.startAngle + this.sweep/2 : this.startAngle - this.sweep/2;\r\n            let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\r\n            return arc.end;\r\n        }\r\n\r\n        /**\r\n         * Returns chord height (\"sagitta\") of the arc\r\n         * @returns {number}\r\n         */\r\n        chordHeight() {\r\n            return  (1.0 - Math.cos(Math.abs(this.sweep/2.0))) * this.r;\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between arc and other shape\r\n         * @param {Shape} shape Shape of the one of supported types <br/>\r\n         * @returns {Points[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Arc.intersectArc2Circle(this, shape);\r\n            }\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Arc.intersectArc2Arc(this, shape);\r\n            }\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectShape2Polygon(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from arc to shape and return array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from arc to shape\r\n         * @returns {Segment} shortest segment between arc and shape (started at arc, ended at shape)\r\n\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2arc(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [dist, shortest_segment] = Distance.arc2circle(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [dist, shortest_segment] = Distance.arc2line(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [dist, shortest_segment] = Distance.segment2arc(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.arc2arc(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Breaks arc in extreme point 0, pi/2, pi, 3*pi/2 and returns array of sub-arcs\r\n         * @returns {Arcs[]}\r\n         */\r\n        breakToFunctional() {\r\n            let func_arcs_array = [];\r\n            let angles = [0, Math.PI/2, 2*Math.PI/2, 3*Math.PI/2];\r\n            let pts = [\r\n                this.pc.translate(this.r,0),\r\n                this.pc.translate(0,this.r),\r\n                this.pc.translate(-this.r,0),\r\n                this.pc.translate(0,-this.r)\r\n            ];\r\n\r\n            // If arc contains extreme point,\r\n            // create test arc started at start point and ended at this extreme point\r\n            let test_arcs = [];\r\n            for (let i=0; i < 4; i++) {\r\n                if (pts[i].on(this)) {\r\n                    test_arcs.push(new Flatten.Arc(this.pc, this.r, this.startAngle, angles[i], this.counterClockwise));\r\n                }\r\n            }\r\n\r\n            if (test_arcs.length == 0) {                  // arc does contain any extreme point\r\n                func_arcs_array.push(this.clone());\r\n            }\r\n            else {                                        // arc passes extreme point\r\n                // sort these arcs by length\r\n                test_arcs.sort((arc1, arc2) => arc1.length - arc2.length);\r\n\r\n                for (let i = 0; i < test_arcs.length; i++) {\r\n                    let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                    let new_arc;\r\n                    if (prev_arc) {\r\n                        new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                    }\r\n                    else {\r\n                        new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                    }\r\n                    if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                        func_arcs_array.push(new_arc.clone());\r\n                    }\r\n                }\r\n\r\n                // add last sub arc\r\n                let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                let new_arc;\r\n                if (prev_arc) {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, this.endAngle, this.counterClockwise);\r\n                }\r\n                else {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n                }\r\n                if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                    func_arcs_array.push(new_arc.clone());\r\n                }\r\n            }\r\n            return func_arcs_array;\r\n        }\r\n\r\n        /**\r\n         * Return tangent unit vector in the start point in the direction from start to end\r\n         * @returns {Vector}\r\n         */\r\n        tangentInStart() {\r\n            let vec = new Flatten.Vector(this.pc, this.start);\r\n            let angle = this.counterClockwise ? Math.PI/2. : -Math.PI/2.;\r\n            let tangent = vec.rotate(angle).normalize();\r\n            return tangent;\r\n        }\r\n\r\n        /**\r\n         * Return tangent unit vector in the end point in the direction from end to start\r\n         * @returns {Vector}\r\n         */\r\n        tangentInEnd() {\r\n            let vec = new Flatten.Vector(this.pc, this.end);\r\n            let angle = this.counterClockwise ? -Math.PI/2. : Math.PI/2.;\r\n            let tangent = vec.rotate(angle).normalize();\r\n            return tangent;\r\n        }\r\n\r\n        /**\r\n         * Returns new arc with swapped start and end angles and reversed direction\r\n         * @returns {Arc}\r\n         */\r\n        reverse() {\r\n            return new Arc(this.pc, this.r, this.endAngle, this.startAngle, !this.counterClockwise);\r\n        }\r\n\r\n        /**\r\n         * Returns new arc translated by vector vec\r\n         * @param {Vector} vec\r\n         * @returns {Segment}\r\n         */\r\n        translate(...args) {\r\n            let arc = this.clone();\r\n            arc.pc = this.pc.translate(...args);\r\n            return arc;\r\n        }\r\n\r\n        /**\r\n         * Return new segment rotated by given angle around given point\r\n         * If point omitted, rotate around origin (0,0)\r\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n         * @param {number} angle - rotation angle in radians\r\n         * @param {Point} center - center point, default is (0,0)\r\n         * @returns {Arc}\r\n         */\r\n        rotate(angle = 0, center = new Flatten.Point()) {\r\n            let m = new Flatten.Matrix();\r\n            m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\r\n            return this.transform(m);\r\n        }\r\n\r\n        /**\r\n         * Return new arc transformed using affine transformation matrix <br/>\r\n         * Note, that non-equal scaling by x and y (matrix[0] != matrix[3]) produce illegal result\r\n         * TODO: support non-equal scaling arc to ellipse or throw exception ?\r\n         * @param {Matrix} matrix - affine transformation matrix\r\n         * @returns {Arc}\r\n         */\r\n        transform(matrix = new Flatten.Matrix()) {\r\n            let newStart = this.start.transform(matrix);\r\n            let newEnd = this.end.transform(matrix);\r\n            let newCenter = this.pc.transform(matrix);\r\n            let arc = Arc.arcSE(newCenter, newStart, newEnd, this.counterClockwise);\r\n            return arc;\r\n        }\r\n\r\n        static arcSE(center, start, end, counterClockwise) {\r\n            let {vector} = Flatten;\r\n            let startAngle = vector(center,start).slope;\r\n            let endAngle = vector(center, end).slope;\r\n            if (Flatten.Utils.EQ(startAngle, endAngle)) {\r\n                endAngle += 2*Math.PI;\r\n                counterClockwise = true;\r\n            }\r\n            let r = vector(center, start).length;\r\n\r\n            return new Arc(center, r, startAngle, endAngle, counterClockwise);\r\n        }\r\n\r\n        static intersectArc2Arc(arc1, arc2) {\r\n            var ip = [];\r\n\r\n            if (arc1.box.not_intersect(arc2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Special case: overlapping arcs\r\n            // May return up to 4 intersection points\r\n            if (arc1.pc.equalTo(arc2.pc) && Flatten.Utils.EQ(arc1.r, arc2.r)) {\r\n                let pt;\r\n\r\n                pt = arc1.start;\r\n                if (pt.on(arc2))\r\n                    ip.push(pt);\r\n\r\n                pt = arc1.end;\r\n                if (pt.on(arc2))\r\n                    ip.push(pt);\r\n\r\n                pt = arc2.start;\r\n                if (pt.on(arc1)) ip.push(pt);\r\n\r\n                pt = arc2.end;\r\n                if (pt.on(arc1)) ip.push(pt);\r\n\r\n                return ip;\r\n            }\r\n\r\n            // Common case\r\n            let circle1 = new Flatten.Circle(arc1.pc, arc1.r);\r\n            let circle2 = new Flatten.Circle(arc2.pc, arc2.r);\r\n            let ip_tmp =  circle1.intersect(circle2);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc1) && pt.on(arc2)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectArc2Circle(arc, circle) {\r\n            let ip = [];\r\n\r\n            if (arc.box.not_intersect(circle.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Case when arc center incident to circle center\r\n            // Return arc's end points as 2 intersection points\r\n            if (circle.pc.equalTo(arc.pc) && Flatten.Utils.EQ(circle.r, arc.r)) {\r\n                ip.push(arc.start);\r\n                ip.push(arc.end);\r\n                return ip;\r\n            }\r\n\r\n            // Common case\r\n            let circle1 = circle;\r\n            let circle2 = new Flatten.Circle(arc.pc, arc.r);\r\n            let ip_tmp = circle1.intersect(circle2);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        definiteIntegral(ymin=0) {\r\n            let f_arcs = this.breakToFunctional();\r\n            let area = f_arcs.reduce( (acc, arc) => acc + arc.circularSegmentDefiniteIntegral(ymin), 0.0 );\r\n            return area;\r\n        }\r\n\r\n        circularSegmentDefiniteIntegral(ymin) {\r\n            let line = new Flatten.Line(this.start, this.end);\r\n            let onLeftSide = this.pc.leftTo(line);\r\n            let segment = new Flatten.Segment(this.start, this.end);\r\n            let areaTrapez = segment.definiteIntegral(ymin);\r\n            let areaCircularSegment = this.circularSegmentArea();\r\n            let area = onLeftSide ? areaTrapez - areaCircularSegment : areaTrapez + areaCircularSegment;\r\n            return area;\r\n        }\r\n\r\n        circularSegmentArea() {\r\n            return (0.5*this.r*this.r*(this.sweep - Math.sin(this.sweep)))\r\n        }\r\n\r\n        /**\r\n         * Return string to draw arc in svg\r\n         * @param {Object} attrs - json structure with attributes of svg path element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let largeArcFlag = this.sweep <= Math.PI ? \"0\" : \"1\";\r\n            let sweepFlag = this.counterClockwise ? \"1\" : \"0\";\r\n            let {stroke, strokeWidth, fill, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            if (Flatten.Utils.EQ(this.sweep, 2*Math.PI)) {\r\n                let circle = new Flatten.Circle(this.pc, this.r);\r\n                return circle.svg(attrs);\r\n            }\r\n            else {\r\n                return `\\n<path d=\"M${this.start.x},${this.start.y}\r\n                             A${this.r},${this.r} 0 ${largeArcFlag},${sweepFlag} ${this.end.x},${this.end.y}\"\r\n                    stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns JSON object. This method defines how data will be\r\n         * serialized when called JSON.stringify method with this object\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"arc\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create arc equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.arc = (...args) => new Flatten.Arc(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function (Flatten) {\r\n    /**\r\n     * Class representing a segment\r\n     * @type {Segment}\r\n     */\r\n    Flatten.Segment = class Segment {\r\n        /**\r\n         *\r\n         * @param {Point} ps - start point\r\n         * @param {Point} pe - end point\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Start point\r\n             * @type {Point}\r\n             */\r\n            this.ps = new Flatten.Point();\r\n            /**\r\n             * End Point\r\n             * @type {Point}\r\n             */\r\n            this.pe = new Flatten.Point();\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Array && args[0].length == 4) {\r\n                let coords = args[0];\r\n                this.ps = new Flatten.Point(coords[0], coords[1]);\r\n                this.pe = new Flatten.Point(coords[2], coords[3]);\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"segment\") {\r\n                let {ps,pe} = args[0];\r\n                this.ps = new Flatten.Point(ps.x, ps.y);\r\n                this.pe = new Flatten.Point(pe.x, pe.y);\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2 && args[0] instanceof Flatten.Point && args[1] instanceof Flatten.Point) {\r\n                this.ps = args[0].clone();\r\n                this.pe = args[1].clone();\r\n                return;\r\n            }\r\n\r\n            if (args.length == 4) {\r\n                this.ps = new Flatten.Point(args[0], args[1]);\r\n                this.pe = new Flatten.Point(args[2], args[3]);\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone copies segment and returns a new instance\r\n         * @returns {Segment}\r\n         */\r\n        clone() {\r\n            return new Flatten.Segment(this.start, this.end);\r\n        }\r\n\r\n        /**\r\n         * Start point\r\n         * @returns {Point}\r\n         */\r\n        get start() {\r\n            return this.ps;\r\n        }\r\n\r\n        /**\r\n         * End point\r\n         * @returns {Point}\r\n         */\r\n        get end() {\r\n            return this.pe;\r\n        }\r\n\r\n\r\n        /**\r\n         * Returns array of start and end point\r\n         * @returns [Point,Point]\r\n         */\r\n        get vertices() {\r\n            return [this.ps.clone(), this.pe.clone()];\r\n        }\r\n\r\n        /**\r\n         * Length of a segment\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return this.start.distanceTo(this.end)[0];\r\n        }\r\n\r\n        /**\r\n         * Slope of the line - angle to axe x in radians from 0 to 2PI\r\n         * @returns {number}\r\n         */\r\n        get slope() {\r\n            let vec = new Flatten.Vector(this.start, this.end);\r\n            return vec.slope;\r\n        }\r\n\r\n        /**\r\n         * Bounding box\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(\r\n                Math.min(this.start.x, this.end.x),\r\n                Math.min(this.start.y, this.end.y),\r\n                Math.max(this.start.x, this.end.x),\r\n                Math.max(this.start.y, this.end.y)\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Returns true if equals to query segment, false otherwise\r\n         * @param {Seg} seg - query segment\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(seg) {\r\n            return this.ps.equalTo(seg.ps) && this.pe.equalTo(seg.pe);\r\n        }\r\n\r\n        /**\r\n         * Returns true if segment contains point\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            return Flatten.Utils.EQ_0(this.distanceToPoint(pt));\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between segment and other shape\r\n         * @param {Shape} shape - Shape of the one of supported types <br/>\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Segment.intersectSegment2Line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return Segment.intersectSegment2Segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Segment.intersectSegment2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Segment.intersectSegment2Arc(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectShape2Polygon(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from segment to shape and return as array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from segment to shape\r\n         * @returns {Segment} shortest segment between segment and shape (started at segment, ended at shape)\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [dist, shortest_segment] = Distance.point2segment(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [dist, shortest_segment] = Distance.segment2circle(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [dist, shortest_segment] = Distance.segment2line(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [dist, shortest_segment] = Distance.segment2segment(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [dist, shortest_segment] = Distance.segment2arc(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [dist, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns unit vector in the direction from start to end\r\n         * @returns {Vector}\r\n         */\r\n        tangentInStart() {\r\n            let vec = new Flatten.Vector(this.start, this.end);\r\n            return vec.normalize();\r\n        }\r\n\r\n        /**\r\n         * Return unit vector in the direction from end to start\r\n         * @returns {Vector}\r\n         */\r\n        tangentInEnd() {\r\n            let vec = new Flatten.Vector(this.end, this.start);\r\n            return vec.normalize();\r\n        }\r\n\r\n        /**\r\n         * Returns new segment with swapped start and end points\r\n         * @returns {Segment}\r\n         */\r\n        reverse() {\r\n            return new Segment(this.end, this.start);\r\n        }\r\n\r\n        /**\r\n         * When point belongs to segment, return array of two segments split by given point,\r\n         * if point is inside segment. Returns clone of this segment if query point is incident\r\n         * to start or end point of the segment. Returns empty array if point does not belong to segment\r\n         * @param {Point} pt Query point\r\n         * @returns {Segment[]}\r\n         */\r\n        split(pt) {\r\n            if (!this.contains(pt))\r\n                return [];\r\n\r\n            if (this.start.equalTo(this.end))\r\n                return [this.clone()];\r\n\r\n            if (this.start.equalTo(pt) || this.end.equalTo(pt))\r\n                return [this];\r\n\r\n            return [\r\n                new Flatten.Segment(this.start, pt),\r\n                new Flatten.Segment(pt, this.end)\r\n            ]\r\n        }\r\n\r\n        /**\r\n         * Return middle point of the segment\r\n         * @returns {Point}\r\n         */\r\n        middle() {\r\n            return new Flatten.Point((this.start.x + this.end.x)/2, (this.start.y + this.end.y)/2);\r\n        }\r\n\r\n        distanceToPoint(pt) {\r\n            let [dist, ...rest] = Flatten.Distance.point2segment(pt, this);\r\n            return dist;\r\n        };\r\n\r\n        definiteIntegral(ymin = 0.0) {\r\n            let dx = this.end.x - this.start.x;\r\n            let dy1 = this.start.y - ymin;\r\n            let dy2 = this.end.y - ymin;\r\n            return ( dx * (dy1 + dy2) / 2 );\r\n        }\r\n\r\n        /**\r\n         * Returns new segment translated by vector vec\r\n         * @param {Vector} vec\r\n         * @returns {Segment}\r\n         */\r\n        translate(...args) {\r\n            return new Segment(this.ps.translate(...args), this.pe.translate(...args));\r\n        }\r\n\r\n        /**\r\n         * Return new segment rotated by given angle around given point\r\n         * If point omitted, rotate around origin (0,0)\r\n         * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n         * @param {number} angle - rotation angle in radians\r\n         * @param {Point} center - center point, default is (0,0)\r\n         * @returns {Segment}\r\n         */\r\n        rotate(angle = 0, center = new Flatten.Point()) {\r\n            let m = new Flatten.Matrix();\r\n            m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\r\n            return this.transform(m);\r\n        }\r\n\r\n        /**\r\n         * Return new segment transformed using affine transformation matrix\r\n         * @param {Matrix} matrix - affine transformation matrix\r\n         * @returns {Segment} - transformed segment\r\n         */\r\n        transform(matrix = new Flatten.Matrix()) {\r\n            return new Segment(this.ps.transform(matrix), this.pe.transform(matrix))\r\n        }\r\n\r\n        /**\r\n         * Returns true if segment start is equal to segment end up to DP_TOL\r\n         * @returns {boolean}\r\n         */\r\n        isZeroLength() {\r\n            return this.ps.equalTo(this.pe)\r\n        }\r\n\r\n        static intersectSegment2Line(seg, line) {\r\n            let ip = [];\r\n\r\n            // Boundary cases\r\n            if (seg.ps.on(line)) {\r\n                ip.push(seg.ps);\r\n            }\r\n            // If both ends lay on line, return two intersection points\r\n            if (seg.pe.on(line) && !seg.isZeroLength()) {\r\n                ip.push(seg.pe);\r\n            }\r\n\r\n            if (ip.length > 0) {\r\n                return ip;          // done, intersection found\r\n            }\r\n\r\n            // If zero-length segment and nothing found, return no intersections\r\n            if (seg.isZeroLength()) {\r\n                return ip;\r\n            }\r\n\r\n            // Not a boundary case, check if both points are on the same side and\r\n            // hence there is no intersection\r\n            if (seg.ps.leftTo(line) && seg.pe.leftTo(line) ||\r\n                !seg.ps.leftTo(line) && !seg.pe.leftTo(line)) {\r\n                return ip;\r\n            }\r\n\r\n            // Calculate intersection between lines\r\n            let line1 = new Flatten.Line(seg.ps, seg.pe);\r\n            return line1.intersect(line);\r\n        }\r\n\r\n        static intersectSegment2Segment(seg1, seg2) {\r\n            let ip = [];\r\n\r\n            // quick reject\r\n            if (seg1.box.not_intersect(seg2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Special case of seg1 zero length\r\n            if (seg1.isZeroLength()) {\r\n                if (seg1.ps.on(seg2)) {\r\n                    ip.push(seg1.ps);\r\n                }\r\n                return ip;\r\n            }\r\n\r\n            // Special case of seg2 zero length\r\n            if (seg2.isZeroLength()) {\r\n                if (seg2.ps.on(seg1)) {\r\n                    ip.push(seg2.ps);\r\n                }\r\n                return ip;\r\n            }\r\n\r\n            // Neither seg1 nor seg2 is zero length\r\n            let line1 = new Flatten.Line(seg1.ps, seg1.pe);\r\n            let line2 = new Flatten.Line(seg2.ps, seg2.pe);\r\n\r\n            // Check overlapping between segments in case of incidence\r\n            // If segments touching, add one point. If overlapping, add two points\r\n            if (line1.incidentTo(line2)) {\r\n                if (seg1.ps.on(seg2)) {\r\n                    ip.push(seg1.ps);\r\n                }\r\n                if (seg1.pe.on(seg2)) {\r\n                    ip.push(seg1.pe);\r\n                }\r\n                if (seg2.ps.on(seg1) && !seg2.ps.equalTo(seg1.ps) && !seg2.ps.equalTo(seg1.pe)) {\r\n                    ip.push(seg2.ps);\r\n                }\r\n                if (seg2.pe.on(seg1) && !seg2.pe.equalTo(seg1.ps) && !seg2.pe.equalTo(seg1.pe)) {\r\n                    ip.push(seg2.pe);\r\n                }\r\n            }\r\n            else {                /* not incident - parallel or intersect */\r\n                // Calculate intersection between lines\r\n                let new_ip = line1.intersect(line2);\r\n                if (new_ip.length > 0 && new_ip[0].on(seg1) && new_ip[0].on(seg2)) {\r\n                    ip.push(new_ip[0]);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n\r\n        static intersectSegment2Circle(segment, circle) {\r\n            let ips = [];\r\n\r\n            if (segment.box.not_intersect(circle.box)) {\r\n                return ips;\r\n            }\r\n\r\n            // Special case of zero length segment\r\n            if (segment.isZeroLength()) {\r\n                let [dist,shortest_segment] = segment.ps.distanceTo(circle.pc);\r\n                if (Flatten.Utils.EQ(dist, circle.r)) {\r\n                    ips.push(segment.ps);\r\n                }\r\n                return ips;\r\n            }\r\n\r\n            // Non zero-length segment\r\n            let line = new Flatten.Line(segment.ps, segment.pe);\r\n\r\n            let ips_tmp = line.intersect(circle);\r\n\r\n            for (let ip of ips_tmp) {\r\n                if (ip.on(segment)) {\r\n                    ips.push(ip);\r\n                }\r\n            }\r\n\r\n            return ips;\r\n        }\r\n\r\n        static intersectSegment2Arc(segment, arc) {\r\n            let ip = [];\r\n\r\n            if (segment.box.not_intersect(arc.box)) {\r\n                return ip;\r\n            }\r\n\r\n            // Special case of zero-length segment\r\n            if (segment.isZeroLength()) {\r\n                if (segment.ps.on(arc)) {\r\n                    ip.push(segment.ps);\r\n                }\r\n                return ip;\r\n            }\r\n\r\n            // Non-zero length segment\r\n            let line = new Flatten.Line(segment.ps, segment.pe);\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n            let ip_tmp = line.intersect(circle);\r\n\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(segment) && pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n            return ip;\r\n\r\n        }\r\n\r\n        /**\r\n         * Return string to draw segment in svg\r\n         * @param {Object} attrs - Object with attributes for svg path element,\r\n         * like \"stroke\", \"strokeWidth\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            return `\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" ${id_str} ${class_str} />`;\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns JSON object. This method defines how data will be\r\n         * serialized when called JSON.stringify method with this object\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"segment\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shortcut method to create new segment\r\n     */\r\n    Flatten.segment = (...args) => new Flatten.Segment(...args);\r\n};","/**\r\n * Created by Alex Bol on 3/6/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    let {Arc,vector} = Flatten;\r\n    /**\r\n     * Class representing a circle\r\n     * @type {Circle}\r\n     */\r\n    Flatten.Circle = class Circle {\r\n        /**\r\n         *\r\n         * @param {Point} pc - circle center point\r\n         * @param {number} r - circle radius\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Circle center\r\n             * @type {Point}\r\n             */\r\n            this.pc = new Flatten.Point();\r\n            /**\r\n             * Circle radius\r\n             * @type {number}\r\n             */\r\n            this.r = 1;\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"circle\") {\r\n                let {pc, r} = args[0];\r\n                this.pc = new Flatten.Point(pc);\r\n                this.r = r;\r\n                return;\r\n            }\r\n            else {\r\n                let [pc, r] = [...args];\r\n                if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n                if (r !== undefined) this.r = r;\r\n                return;\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new instance of a Circle\r\n         * @returns {Circle}\r\n         */\r\n        clone() {\r\n            return new Flatten.Circle(this.pc.clone(), this.r);\r\n        }\r\n\r\n        /**\r\n         * Circle center\r\n         * @returns {Point}\r\n         */\r\n        get center() {\r\n            return this.pc;\r\n        }\r\n\r\n        /**\r\n         * Circle bounding box\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(\r\n                this.pc.x - this.r,\r\n                this.pc.y - this.r,\r\n                this.pc.x + this.r,\r\n                this.pc.y + this.r\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Return true if circle contains point\r\n         * @param {Point} pt - test point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            return Flatten.Utils.LE(pt.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        /**\r\n         * Transform circle to closed arc\r\n         * @param {boolean} counterclockwise\r\n         * @returns {Arc}\r\n         */\r\n        toArc(counterclockwise=true) {\r\n            return new Flatten.Arc(this.center, this.r, Math.PI, -Math.PI, counterclockwise);\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points between circle and other shape\r\n         * @param {Shape} shape Shape of the one of supported types\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Circle.intersectCirle2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return shape.intersect(this);\r\n            }\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectShape2Polygon(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from circle to shape and return array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from circle to shape\r\n         * @returns {Segment} shortest segment between circle and shape (started at circle, ended at shape)\r\n\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n            let {point2circle, circle2circle, circle2line, segment2circle, arc2circle} = Distance;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [distance, shortest_segment] = point2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [distance, shortest_segment] = circle2circle(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                let [distance, shortest_segment] = circle2line(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [distance, shortest_segment] = segment2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [distance, shortest_segment] = arc2circle(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                let [dist, shortest_segment] = Distance.shape2planarSet(this, shape);\r\n                return [dist, shortest_segment];\r\n            }\r\n        }\r\n\r\n        static intersectCirle2Circle(circle1, circle2) {\r\n            let ip = [];\r\n\r\n            if (circle1.box.not_intersect(circle2.box)) {\r\n                return ip;\r\n            }\r\n\r\n            let vec = new Flatten.Vector(circle1.pc, circle2.pc);\r\n\r\n            let r1 = circle1.r;\r\n            let r2 = circle2.r;\r\n\r\n            // Degenerated circle\r\n            if (Flatten.Utils.EQ_0(r1) || Flatten.Utils.EQ_0(r2))\r\n                return ip;\r\n\r\n            // In case of equal circles return one leftmost point\r\n            if (Flatten.Utils.EQ_0(vec.x) && Flatten.Utils.EQ_0(vec.y) && Flatten.Utils.EQ(r1, r2)) {\r\n                ip.push(circle1.pc.translate(-r1, 0));\r\n                return ip;\r\n            }\r\n\r\n            let dist = circle1.pc.distanceTo(circle2.pc)[0];\r\n\r\n            if (Flatten.Utils.GT(dist, r1 + r2))               // circles too far, no intersections\r\n                return ip;\r\n\r\n            if (Flatten.Utils.LT(dist, Math.abs(r1 - r2)))     // one circle is contained within another, no intersections\r\n                return ip;\r\n\r\n            // Normalize vector.\r\n            vec.x /= dist;\r\n            vec.y /= dist;\r\n\r\n            let pt;\r\n\r\n            // Case of touching from outside or from inside - single intersection point\r\n            // TODO: check this specifically not sure if correct\r\n            if (Flatten.Utils.EQ(dist, r1 + r2) || Flatten.Utils.EQ(dist, Math.abs(r1 - r2))) {\r\n                pt = circle1.pc.translate(r1*vec.x, r1*vec.y);\r\n                ip.push(pt);\r\n                return ip;\r\n            }\r\n\r\n            // Case of two intersection points\r\n\r\n            // Distance from first center to center of common chord:\r\n            //   a = (r1^2 - r2^2 + d^2) / 2d\r\n            // Separate for better accuracy\r\n            let a = (r1*r1)/(2*dist) - (r2*r2)/(2*dist) + dist/2;\r\n\r\n            let mid_pt = circle1.pc.translate(a*vec.x, a*vec.y);\r\n            let h = Math.sqrt(r1*r1 - a*a);\r\n            // let norm;\r\n\r\n            // norm = vec.rotate90CCW().multiply(h);\r\n            pt = mid_pt.translate(vec.rotate90CCW().multiply(h));\r\n            ip.push(pt);\r\n\r\n            // norm = vec.rotate90CW();\r\n            pt = mid_pt.translate(vec.rotate90CW().multiply(h));\r\n            ip.push(pt);\r\n\r\n            return ip;\r\n        }\r\n\r\n        /**\r\n         * Return string to draw circle in svg\r\n         * @param {Object} attrs - json structure with attributes of svg circle element,\r\n         * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n         * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n         * @returns {string}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {stroke, strokeWidth, fill, fillOpacity, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n            return `\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} />`;\r\n        }\r\n\r\n        /**\r\n         * Returns JSON object. This method defines how data will be\r\n         * serialized when called JSON.stringify method with this object\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"circle\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shortcut to create new circle\r\n     * @param args\r\n     */\r\n    Flatten.circle = (...args) => new Flatten.Circle(...args);\r\n};","/**\r\n * Created by Alex Bol on 2/20/2017.\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a line\r\n     * @type {Line}\r\n     */\r\n    Flatten.Line = class Line {\r\n        /**\r\n         * Line may be constructed by point and normal vector or by two points that a line passes through\r\n         * @param {Point} pt - point that a line passes through\r\n         * @param {Vector|Point} norm - normal vector to a line or second point a line passes through\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * Point a line passes through\r\n             * @type {Point}\r\n             */\r\n            this.pt = new Flatten.Point();\r\n            /**\r\n             * Normal vector to a line <br/>\r\n             * Vector is normalized (length == 1)\r\n             * @type {Vector}\r\n             */\r\n            this.norm = new Flatten.Vector(0,1);\r\n\r\n            if (args.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length == 1 && args[0] instanceof Object && args[0].name === \"line\") {\r\n                let {pt, norm} = args[0];\r\n                this.pt = new Flatten.Point(pt);\r\n                this.norm = new Flatten.Vector(norm);\r\n                return;\r\n            }\r\n\r\n            if (args.length == 2) {\r\n                let a1 = args[0];\r\n                let a2 = args[1];\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                    this.pt = a1;\r\n                    this.norm = Line.points2norm(a1, a2);\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Vector) {\r\n                    if (Flatten.Utils.EQ_0(a2.x) && Flatten.Utils.EQ_0(a2.y)) {\r\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                    }\r\n                    this.pt = a1.clone();\r\n                    this.norm = a2.clone();\r\n                    this.norm = this.norm.normalize();\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Vector && a2 instanceof Flatten.Point) {\r\n                    if (Flatten.Utils.EQ_0(a1.x) && Flatten.Utils.EQ_0(a1.y)) {\r\n                        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                    }\r\n                    this.pt = a2.clone();\r\n                    this.norm = a1.clone();\r\n                    this.norm = this.norm.normalize();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Returns cloned new instance of a line\r\n         * @returns {Line}\r\n         */\r\n        clone() {\r\n            return new Flatten.Line(this.pt, this.norm);\r\n        }\r\n\r\n        /**\r\n         * Slope of the line - angle in radians between line and axe x from 0 to 2PI\r\n         * @returns {number} - slope of the line\r\n         */\r\n        get slope() {\r\n            let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\r\n            return vec.slope;\r\n        }\r\n\r\n        /**\r\n         * Get coefficients [A,B,C] of a standard line equation in the form Ax + By = C\r\n         * @code [A, B, C] = line.standard\r\n         * @returns {number[]} - array of coefficients\r\n         */\r\n        get standard() {\r\n            let A = this.norm.x;\r\n            let B = this.norm.y;\r\n            let C = this.norm.dot(this.pt);\r\n\r\n            return [A,B,C];\r\n        }\r\n\r\n        /**\r\n         * Return true if parallel or incident to other line\r\n         * @param {Line} other_line - line to check\r\n         * @returns {boolean}\r\n         */\r\n        parallelTo(other_line) {\r\n            return Flatten.Utils.EQ_0(this.norm.cross(other_line.norm));\r\n        }\r\n\r\n        /**\r\n         * Returns true if incident to other line\r\n         * @param {Line} other_line - line to check\r\n         * @returns {boolean}\r\n         */\r\n        incidentTo(other_line) {\r\n            return this.parallelTo(other_line) && this.pt.on(other_line);\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to line\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        contains(pt) {\r\n            if (this.pt.equalTo(pt)) {\r\n                return true;\r\n            }\r\n            /* Line contains point if vector to point is orthogonal to the line normal vector */\r\n            let vec = new Flatten.Vector(this.pt, pt);\r\n            return Flatten.Utils.EQ_0(this.norm.dot(vec));\r\n        }\r\n\r\n        /**\r\n         * Returns array of intersection points\r\n         * @param {Shape} shape - shape to intersect with\r\n         * @returns {Point[]}\r\n         */\r\n        intersect(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.contains(shape) ? [shape] : [];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Line.intersectLine2Line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Line.intersectLine2Circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return shape.intersect(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return Line.intersectLine2Arc(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return Flatten.Polygon.intersectLine2Polygon(this, shape);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from line to shape and returns array [distance, shortest_segment]\r\n         * @param {Shape} shape Shape of the one of the types Point, Circle, Segment, Arc, Polygon\r\n         * @returns {Number}\r\n         * @returns {Segment}\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Flatten.Point) {\r\n                let [distance, shortest_segment] = Distance.point2line(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                let [distance, shortest_segment] = Distance.circle2line(shape, this);\r\n                shortest_segment = shortest_segment.reverse();\r\n                return [distance, shortest_segment];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                let [distance, shortest_segment] = Distance.segment2line(shape, this);\r\n                return [distance, shortest_segment.reverse()];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                let [distance, shortest_segment] = Distance.arc2line(shape, this);\r\n                return [distance, shortest_segment.reverse()];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                let [distance, shortest_segment] = Distance.shape2polygon(this, shape);\r\n                return [distance, shortest_segment];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return string to draw svg segment representing line inside given box\r\n         * @param {Box} box Box representing drawing area\r\n         * @param {Object} attrs - json structure with attributes of svg circle element\r\n         */\r\n        svg(box, attrs = {}) {\r\n            let ip = Line.intersectLine2Box(this, box);\r\n            if (ip.length === 0)\r\n                return \"\";\r\n            let ps = ip[0];\r\n            let pe = ip.length == 2 ? ip[1] : ip.find( pt => !pt.equalTo(ps) );\r\n            if (pe === undefined) pe = ps;\r\n            let segment = new Flatten.Segment(ps, pe);\r\n            return segment.svg(attrs);\r\n        }\r\n\r\n        /**\r\n         * Returns JSON object. This method defines how data will be\r\n         * serialized when called JSON.stringify method with this object\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"line\"});\r\n        }\r\n\r\n        static points2norm(pt1, pt2) {\r\n            if (pt1.equalTo(pt2)) {\r\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n            }\r\n            let vec = new Flatten.Vector(pt1, pt2);\r\n            let unit = vec.normalize();\r\n            return unit.rotate90CCW();\r\n        }\r\n\r\n        static intersectLine2Line(line1, line2) {\r\n            let ip = [];\r\n\r\n            let [A1, B1, C1] = line1.standard;\r\n            let [A2, B2, C2] = line2.standard;\r\n\r\n            /* Cramer's rule */\r\n            let det = A1*B2 - B1*A2;\r\n            let detX = C1*B2 - B1*C2;\r\n            let detY = A1*C2 - C1*A2;\r\n\r\n            if (!Flatten.Utils.EQ_0(det)) {\r\n                let new_ip = new Flatten.Point( detX/det, detY/det );\r\n                ip.push(new_ip);\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Circle(line, circle) {\r\n            let ip = [];\r\n            let prj = circle.pc.projectionOn(line);            // projection of circle center on line\r\n            let dist = circle.pc.distanceTo(prj)[0];           // distance from circle center to projection\r\n\r\n            if (Flatten.Utils.EQ(dist, circle.r)) {            // line tangent to circle - return single intersection point\r\n                ip.push(prj);\r\n            }\r\n            else if (Flatten.Utils.LT(dist, circle.r)) {       // return two intersection points\r\n                let delta = Math.sqrt(circle.r*circle.r - dist*dist);\r\n                let v_trans, pt;\r\n\r\n                v_trans = line.norm.rotate90CCW().multiply(delta);\r\n                pt = prj.translate(v_trans);\r\n                ip.push(pt);\r\n\r\n                v_trans = line.norm.rotate90CW().multiply(delta);\r\n                pt = prj.translate(v_trans);\r\n                ip.push(pt);\r\n            }\r\n            return ip;\r\n        }\r\n\r\n        static intersectLine2Box(line, box) {\r\n            let pts = [\r\n                new Flatten.Point(box.xmin, box.ymin),\r\n                new Flatten.Point(box.xmax, box.ymin),\r\n                new Flatten.Point(box.xmax, box.ymax),\r\n                new Flatten.Point(box.xmin, box.ymax)\r\n            ];\r\n            let segs = [\r\n                new Flatten.Segment(pts[0], pts[1]),\r\n                new Flatten.Segment(pts[1], pts[2]),\r\n                new Flatten.Segment(pts[2], pts[3]),\r\n                new Flatten.Segment(pts[3], pts[0])\r\n            ];\r\n\r\n            let ips =  [];\r\n\r\n            for(let seg of segs) {\r\n                let ips_tmp = seg.intersect(line);\r\n                for (let ip of ips_tmp) {\r\n                    ips.push(ip);\r\n                }\r\n            };\r\n            return ips;\r\n        }\r\n\r\n        static intersectLine2Arc(line, arc) {\r\n            let ip = [];\r\n\r\n            if (Line.intersectLine2Box(line, arc.box).length == 0) {\r\n                return ip;\r\n            }\r\n\r\n            let circle = new Flatten.Circle(arc.pc, arc.r);\r\n            let ip_tmp = line.intersect(circle);\r\n            for (let pt of ip_tmp) {\r\n                if (pt.on(arc)) {\r\n                    ip.push(pt);\r\n                }\r\n            }\r\n\r\n            return ip;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create line equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.line = (...args) => new Flatten.Line(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing a vector\r\n     * @type {Vector}\r\n     */\r\n    Flatten.Vector = class Vector {\r\n        /**\r\n         * Vector may be constructed by two points, or by two float numbers,\r\n         * or by array of two numbers\r\n         * @param {Point} ps - start point\r\n         * @param {Point} pe - end point\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * x-coordinate of a vector (float number)\r\n             * @type {number}\r\n             */\r\n            this.x = 0;\r\n            /**\r\n             * y-coordinate of a vector (float number)\r\n             * @type {number}\r\n             */\r\n            this.y = 0;\r\n\r\n            /* return zero vector */\r\n            if (args.length === 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n                let arr = args[0];\r\n                if (typeof(arr[0]) == \"number\" && typeof(arr[1]) == \"number\") {\r\n                    this.x = arr[0];\r\n                    this.y = arr[1];\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Object && args[0].name === \"vector\") {\r\n                let {x, y} = args[0];\r\n                this.x = x;\r\n                this.y = y;\r\n                return;\r\n            }\r\n\r\n            if (args.length === 2) {\r\n                let a1 = args[0];\r\n                let a2 = args[1];\r\n\r\n                if (typeof(a1) == \"number\" && typeof(a2) == \"number\") {\r\n                    this.x = a1;\r\n                    this.y = a2;\r\n                    return;\r\n                }\r\n\r\n                if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                    this.x = a2.x - a1.x;\r\n                    this.y = a2.y - a1.y;\r\n                    return;\r\n                }\r\n\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new instance of Vector\r\n         * @returns {Vector}\r\n         */\r\n        clone() {\r\n            return new Vector(this.x, this.y);\r\n        }\r\n\r\n        /**\r\n         * Slope of the vector in radians from 0 to 2PI\r\n         * @returns {number}\r\n         */\r\n        get slope() {\r\n            let angle = Math.atan2(this.y, this.x);\r\n            if (angle<0) angle = 2*Math.PI + angle;\r\n            return angle;\r\n        }\r\n\r\n        /**\r\n         * Length of vector\r\n         * @returns {number}\r\n         */\r\n        get length() {\r\n            return Math.sqrt(this.dot(this));\r\n        }\r\n\r\n        /**\r\n         * Returns true if vectors are equal up to [DP_TOL]{@link http://localhost:63342/flatten-js/docs/global.html#DP_TOL}\r\n         * tolerance\r\n         * @param {Vector} v\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(v) {\r\n            return Flatten.Utils.EQ(this.x, v.x) && Flatten.Utils.EQ(this.y, v.y);\r\n        }\r\n\r\n        /**\r\n         * Returns new vector multiplied by scalar\r\n         * @param {number} scalar\r\n         * @returns {Vector}\r\n         */\r\n        multiply(scalar) {\r\n            return ( new Vector(scalar * this.x, scalar * this.y) );\r\n        }\r\n\r\n        /**\r\n         * Returns scalar product (dot product) of two vectors <br/>\r\n         * <code>dot_product = (this * v)</code>\r\n         * @param {Vector} v Other vector\r\n         * @returns {number}\r\n         */\r\n        dot(v) {\r\n            return ( this.x * v.x + this.y * v.y );\r\n        }\r\n\r\n        /**\r\n         * Returns vector product (cross product) of two vectors <br/>\r\n         * <code>cross_product = (this x v)</code>\r\n         * @param {Vector} v Other vector\r\n         * @returns {number}\r\n         */\r\n        cross(v) {\r\n            return ( this.x * v.y - this.y * v.x );\r\n        }\r\n\r\n        /**\r\n         * Returns unit vector.<br/>\r\n         * Throw error if given vector has zero length\r\n         * @returns {Vector}\r\n         */\r\n        normalize() {\r\n            if (!Flatten.Utils.EQ_0(this.length)) {\r\n                return ( new Vector(this.x / this.length, this.y / this.length) );\r\n            }\r\n            throw Flatten.Errors.ZERO_DIVISION;\r\n        }\r\n\r\n        /**\r\n         * Returns new vector rotated by given angle,\r\n         * positive angle defines rotation in counter clockwise direction,\r\n         * negative - in clockwise direction\r\n         * @param {number} angle - Angle in radians\r\n         * @returns {Vector}\r\n         */\r\n        rotate(angle) {\r\n            let point = new Flatten.Point(this.x, this.y);\r\n            let rpoint = point.rotate(angle);\r\n            return new Flatten.Vector(rpoint.x, rpoint.y);\r\n        }\r\n\r\n        /**\r\n         * Returns vector rotated 90 degrees counter clockwise\r\n         * @returns {Vector}\r\n         */\r\n        rotate90CCW() {\r\n            return new Flatten.Vector(-this.y, this.x);\r\n        };\r\n\r\n        /**\r\n         * Returns vector rotated 90 degrees clockwise\r\n         * @returns {Vector}\r\n         */\r\n        rotate90CW() {\r\n            return new Flatten.Vector(this.y, -this.x);\r\n        };\r\n\r\n        /**\r\n         * Return inverted vector\r\n         * @returns {Vector}\r\n         */\r\n        invert() {\r\n            return new Flatten.Vector(-this.x, -this.y);\r\n        }\r\n\r\n        /**\r\n         * Return result of addition of other vector to this vector as a new vector\r\n         * @param {Vector} v Other vector\r\n         * @returns {Vector}\r\n         */\r\n        add(v) {\r\n            return new Flatten.Vector(this.x + v.x, this.y + v.y);\r\n        }\r\n\r\n        /**\r\n         * Return result of subtraction of other vector from current vector as a new vector\r\n         * @param {Vector} v Another vector\r\n         * @returns {Vector}\r\n         */\r\n        subtract(v) {\r\n            return new Flatten.Vector(this.x - v.x, this.y - v.y);\r\n        }\r\n\r\n        /**\r\n         * Return angle between this vector and other vector. <br/>\r\n         * Angle is measured from 0 to 2*PI in the counter clockwise direction\r\n         * from current vector to other.\r\n         * @param {Vector} v Another vector\r\n         * @returns {number}\r\n         */\r\n        angleTo(v) {\r\n            let norm1 = this.normalize();\r\n            let norm2 = v.normalize();\r\n            let angle = Math.atan2(norm1.cross(norm2), norm1.dot(norm2));\r\n            if (angle<0) angle += 2*Math.PI;\r\n            return angle;\r\n        }\r\n\r\n        /**\r\n         * Return vector projection of the current vector on another vector\r\n         * @param {Vector} v Another vector\r\n         * @returns {Vector}\r\n         */\r\n        projectionOn(v){\r\n            let n = v.normalize();\r\n            let d = this.dot(n);\r\n            return n.multiply(d);\r\n        }\r\n\r\n        /**\r\n         * Returns JSON object. This method defines how data will be\r\n         * serialized when called JSON.stringify method with this object\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"vector\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create vector equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.vector = (...args) => new Flatten.Vector(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n *\r\n * @param Flatten\r\n */\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     *\r\n     * Class representing a point\r\n     * @type {Point}\r\n     */\r\n    Flatten.Point = class Point {\r\n        /**\r\n         * Point may be constructed by two numbers, or by array of two numbers\r\n         * @param {number} x - x-coordinate (float number)\r\n         * @param {number} y - y-coordinate (float number)\r\n         */\r\n        constructor(...args) {\r\n            /**\r\n             * x-coordinate (float number)\r\n             * @type {number}\r\n             */\r\n            this.x = 0;\r\n            /**\r\n             * y-coordinate (float number)\r\n             * @type {number}\r\n             */\r\n            this.y = 0;\r\n\r\n            if (args.length === 0) {\r\n                return;\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n                let arr = args[0];\r\n                if (typeof(arr[0]) == \"number\" && typeof(arr[1]) == \"number\") {\r\n                    this.x = arr[0];\r\n                    this.y = arr[1];\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (args.length === 1 && args[0] instanceof Object && args[0].name === \"point\") {\r\n                let {x, y} = args[0];\r\n                this.x = x;\r\n                this.y = y;\r\n                return;\r\n            }\r\n\r\n            if (args.length === 2) {\r\n                if (typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                    this.x = args[0];\r\n                    this.y = args[1];\r\n                    return;\r\n                }\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns bounding box of a point\r\n         * @returns {Box}\r\n         */\r\n        get box() {\r\n            return new Flatten.Box(this.x, this.y, this.x, this.y);\r\n        }\r\n\r\n        /**\r\n         * Method clone returns new copied instance of point\r\n         * @returns {Point}\r\n         */\r\n        clone() {\r\n            return new Flatten.Point(this.x, this.y);\r\n        }\r\n\r\n        get vertices() {\r\n            return [this.clone()];\r\n        }\r\n\r\n        /**\r\n         * Returns true if points are equal up to [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        equalTo(pt) {\r\n            return Flatten.Utils.EQ(this.x, pt.x) && Flatten.Utils.EQ(this.y, pt.y);\r\n        }\r\n\r\n        /**\r\n         * Defines predicate \"less than\" between points. Returns true if the point is less than query points, false otherwise <br/>\r\n         * By definition point1 < point2 if {point1.y < point2.y || point1.y == point2.y && point1.x < point2.y <br/>\r\n         * Numeric values compared with [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n         * @param {Point} pt Query point\r\n         * @returns {boolean}\r\n         */\r\n        lessThan(pt) {\r\n            if (Flatten.Utils.LT(this.y, pt.y))\r\n                return true;\r\n            if (Flatten.Utils.EQ(this.y, pt.y) && Flatten.Utils.LT(this.x, pt.x))\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Returns new point rotated by given angle around given center point.\r\n         * If center point is omitted, rotates around zero point (0,0).\r\n         * Positive value of angle defines rotation in counter clockwise direction,\r\n         * negative angle defines rotation in clockwise clockwise direction\r\n         * @param {number} angle - angle in radians\r\n         * @param {Point} [center=(0,0)] center\r\n         * @returns {Point}\r\n         */\r\n        rotate(angle, center = {x:0, y:0}) {\r\n            var x_rot = center.x + (this.x - center.x) * Math.cos(angle) - (this.y - center.y) * Math.sin(angle);\r\n            var y_rot = center.y + (this.x - center.x) * Math.sin(angle) + (this.y - center.y) * Math.cos(angle);\r\n\r\n            return new Flatten.Point(x_rot, y_rot);\r\n        }\r\n\r\n        /**\r\n         * Returns new point translated by given vector.\r\n         * Translation vector may by also defined by a pair of numbers.\r\n         * @param {Vector} vector - Translation vector defined as Flatten.Vector or\r\n         * @param {number|number} - Translation vector defined as pair of numbers\r\n         * @returns {Point}\r\n         */\r\n        translate(...args) {\r\n            if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\r\n                return new Flatten.Point(this.x + args[0].x, this.y + args[0].y);\r\n            }\r\n\r\n            if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                return new Flatten.Point(this.x + args[0], this.y + args[1]);\r\n            }\r\n\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n\r\n        /**\r\n         * Return new point transformed by affine transformation matrix m\r\n         * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\r\n         * @returns {Point}\r\n         */\r\n        transform(m) {\r\n            // let [x,y] = m.transform([this.x,this.y]);\r\n            return new Flatten.Point(m.transform([this.x,this.y]))\r\n        }\r\n\r\n        /**\r\n         * Returns projection point on given line\r\n         * @param {Line} line Line this point be projected on\r\n         * @returns {Point}\r\n         */\r\n        projectionOn(line) {\r\n            if (this.equalTo(line.pt))                   // this point equal to line anchor point\r\n                return this.clone();\r\n\r\n            let vec = new Flatten.Vector(this, line.pt);\r\n            if (Flatten.Utils.EQ_0(vec.cross(line.norm)))    // vector to point from anchor point collinear to normal vector\r\n                return line.pt.clone();\r\n\r\n            let dist = vec.dot(line.norm);             // signed distance\r\n            let proj_vec = line.norm.multiply(dist);\r\n            return this.translate(proj_vec);\r\n        }\r\n\r\n        /**\r\n         * Returns true if point belongs to the \"left\" semi-plane, which means, point belongs to the same semi plane where line normal vector points to\r\n         * Return false if point belongs to the \"right\" semi-plane or to the line itself\r\n         * @param {Line} line Query line\r\n         * @returns {boolean}\r\n         */\r\n        leftTo(line) {\r\n            let vec = new Flatten.Vector(line.pt, this);\r\n            let onLeftSemiPlane = Flatten.Utils.GT(vec.dot(line.norm), 0);\r\n            return onLeftSemiPlane;\r\n        }\r\n\r\n        /**\r\n         * Calculate distance and shortest segment from point to shape and return as array [distance, shortest segment]\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n         * @returns {number} distance from point to shape\r\n         * @returns {Segment} shortest segment between point and shape (started at point, ended at shape)\r\n         */\r\n        distanceTo(shape) {\r\n            let {Distance} = Flatten;\r\n\r\n            if (shape instanceof Point) {\r\n                let dx = shape.x - this.x;\r\n                let dy = shape.y - this.y;\r\n                return [Math.sqrt(dx*dx + dy*dy), new Flatten.Segment(this, shape)];\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return Distance.point2line(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return Distance.point2circle(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Segment) {\r\n                return Distance.point2segment(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                // let [dist, ...rest] = Distance.point2arc(this, shape);\r\n                // return dist;\r\n                return Distance.point2arc(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                // let [dist, ...rest] = Distance.point2polygon(this, shape);\r\n                // return dist;\r\n                return Distance.point2polygon(this, shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.PlanarSet) {\r\n                return Distance.shape2planarSet(this, shape);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns true if point is on a shape, false otherwise\r\n         * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon\r\n         * @returns {boolean}\r\n         */\r\n        on(shape) {\r\n            if (shape instanceof Flatten.Point) {\r\n                return this.equalTo(shape);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Line) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Circle) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof  Flatten.Segment) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Arc) {\r\n                return shape.contains(this);\r\n            }\r\n\r\n            if (shape instanceof Flatten.Polygon) {\r\n                return shape.contains(this);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Return string to draw point in svg as circle with radius \"r\" <br/>\r\n         * Accept any valid attributes of svg elements as svg object\r\n         * Defaults attribues are: <br/>\r\n         * {\r\n         *    r:\"3\",\r\n         *    stroke:\"black\",\r\n         *    strokeWidth:\"1\",\r\n         *    fill:\"red\"\r\n         * }\r\n         * @param {Object} attrs - Any valid attributes of svg circle element, like \"r\", \"stroke\", \"strokeWidth\", \"fill\"\r\n         * @returns {String}\r\n         */\r\n        svg(attrs = {}) {\r\n            let {r, stroke, strokeWidth, fill, id, className} = attrs;\r\n            // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n            let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n            let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n            return `\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${r || 3}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"red\"}\" ${id_str} ${class_str} />`;\r\n        }\r\n\r\n        /**\r\n         * Returns JSON object. This method defines how data will be\r\n         * serialized when called JSON.stringify method with this object\r\n         * @returns {Object}\r\n         */\r\n        toJSON() {\r\n            return Object.assign({},this,{name:\"point\"});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Function to create point equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.point = (...args) => new Flatten.Point(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\nlet Interval = class Interval {\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    get max() {\r\n        return this.high;\r\n    }\r\n\r\n    interval(low, high) {\r\n        return new Interval(low, high);\r\n    }\r\n\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    maximal_val(val1, val2) {\r\n        return Math.max(val1, val2);\r\n    }\r\n\r\n    val_less_than(val1, val2 ) {     // trait to compare max property with item ?\r\n        return val1 < val2;\r\n    }\r\n};\r\n\r\nmodule.exports = Interval;","/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n'use strict';\r\n\r\n// let defaultTraits = require('../utils/numeric_traits');\r\nlet Interval = require('../classes/interval');\r\nlet {RB_TREE_COLOR_RED, RB_TREE_COLOR_BLACK} = require('../utils/constants');\r\n\r\nlet Node = class Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be       instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        return this.item.key.less_than(other_node.item.key);\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        let value_equal = true;\r\n        if (this.item.value && other_node.item.value) {\r\n            value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n        }\r\n        return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key.clone();\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            let maximal_val = this.item.key.maximal_val;\r\n            this.max = maximal_val(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let high = this.left.max.high ? this.left.max.high : this.left.max;\r\n        return val_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        let val_less_than = this.item.key.val_less_than;\r\n        let low = this.right.max.low ? this.right.max.low : this.right.item.key.low;\r\n        return val_less_than(search_node.item.key.high, low);\r\n    }\r\n};\r\n\r\nmodule.exports = Node;\r\n\r\n","/**\r\n * Created by Alex Bol on 3/12/2017.\r\n */\r\n\r\n\"use strict\";\r\n\r\n// require(\"babel-polyfill\");\r\n\r\nlet IntervalTree = require('flatten-interval-tree');\r\n\r\nmodule.exports = function (Flatten) {\r\n    /**\r\n     * Class representing a planar set - a generic container with ability to keep and retrieve shapes and\r\n     * perform spatial queries. Planar set is an extension of Set container, so it supports\r\n     * Set properties and methods\r\n     */\r\n    Flatten.PlanarSet = class PlanarSet extends Set {\r\n        /**\r\n         * Create new empty instance of PlanarSet\r\n         */\r\n        constructor() {\r\n            super();\r\n            this.index = new IntervalTree();\r\n        }\r\n\r\n        /**\r\n         * Add new shape to planar set and to its spatial index.<br/>\r\n         * If shape already exist, it will not be added again.\r\n         * This happens with no error, it is possible to use <i>size</i> property to check if\r\n         * a shape was actually added.<br/>\r\n         * Method returns planar set object updated and may be chained\r\n         * @param {Shape} shape - shape to be added, should have valid <i>box</i> property\r\n         * @returns {PlanarSet}\r\n         */\r\n        add(shape) {\r\n            let size = this.size;\r\n            super.add(shape);\r\n            // size not changed - item not added, probably trying to add same item twice\r\n            if (this.size > size) {\r\n                let node = this.index.insert(shape.box, shape);\r\n            }\r\n            return this;         // in accordance to Set.add interface\r\n        }\r\n\r\n        /**\r\n         * Delete shape from planar set. Returns true if shape was actually deleted, false otherwise\r\n         * @param {Shape} shape - shape to be deleted\r\n         * @returns {boolean}\r\n         */\r\n        delete(shape) {\r\n            let deleted = super.delete(shape);\r\n            if (deleted) {\r\n                this.index.remove(shape.box, shape);\r\n            }\r\n            return deleted;\r\n        }\r\n\r\n        /**\r\n         * Clear planar set\r\n         */\r\n        clear() {\r\n            super.clear();\r\n            this.index = new IntervalTree();\r\n        }\r\n\r\n        /**\r\n         * 2d range search in planar set.<br/>\r\n         * Returns array of all shapes in planar set which bounding box is intersected with query box\r\n         * @param {Box} box - query box\r\n         * @returns {Shapes[]}\r\n         */\r\n        search(box) {\r\n            let resp = this.index.search(box);\r\n            return resp;\r\n        }\r\n\r\n        /**\r\n         * Point location test. Returns array of shapes which contains given point\r\n         * @param {Point} point - query point\r\n         * @returns {Array}\r\n         */\r\n        hit(point) {\r\n            let box = new Flatten.Box(point.x - 1, point.y - 1, point.x + 1, point.y + 1);\r\n            let resp = this.index.search(box);\r\n            return resp.filter((shape) => point.on(shape));\r\n        }\r\n\r\n        /**\r\n         * Returns svg string to draw all shapes in planar set\r\n         * @returns {String}\r\n         */\r\n        svg() {\r\n            let svgcontent = [...this].reduce((acc, shape) => acc + shape.svg(), \"\");\r\n            return svgcontent;\r\n        }\r\n    }\r\n};\r\n\r\n","\"use strict\";\r\n\r\nmodule.exports = function(Flatten) {\r\n    /**\r\n     * Class representing an affine transformation 3x3 matrix:\r\n     * <pre>\r\n     *      [ a  c  tx\r\n     * A =    b  d  ty\r\n     *        0  0  1  ]\r\n     * </pre\r\n     * @type {Matrix}\r\n     */\r\n    Flatten.Matrix = class Matrix {\r\n        /**\r\n         * Construct new instance of affine transformation matrix <br/>\r\n         * If parameters omitted, construct identity matrix a = 1, d = 1\r\n         * @param {number} a - position(0,0)   sx*cos(alpha)\r\n         * @param {number} b - position (0,1)  sx*sin(alpha)\r\n         * @param {number} c - position (1,0)  -sy*sin(alpha)\r\n         * @param {number} d - position (1,1)  sy*cos(alpha)\r\n         * @param {number} tx - position (2,0) translation by x\r\n         * @param {number} ty - position (2,1) translation by y\r\n         */\r\n        constructor(a=1,b=0,c=0,d=1,tx=0,ty=0) {\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n            this.d = d;\r\n            this.tx = tx;\r\n            this.ty = ty;\r\n        }\r\n\r\n        /**\r\n         * Returns a clone of the Matrix instance.\r\n         * @return {Matrix}\r\n         **/\r\n        clone() {\r\n            return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\r\n        };\r\n\r\n        /**\r\n         * Transform vector [x,y] using transformation matrix. <br/>\r\n         * Vector [x,y] is an abstract array[2] of numbers and not a FlattenJS object <br/>\r\n         * The result is also an abstract vector [x',y'] = A * [x,y]:\r\n         * <code>\r\n         * [x'       [ ax + by + tx\r\n         *  y'   =     cx + dy + ty\r\n         *  1]                    1 ]\r\n         * </code>\r\n         * @param {number[]} vector - array[2] of numbers\r\n         * @returns {number[]} transformation result - array[2] of numbers\r\n         */\r\n        transform(vector) {\r\n            return [\r\n                vector[0]*this.a+vector[1]*this.c+this.tx,\r\n                vector[0]*this.b+vector[1]*this.d+this.ty\r\n            ]\r\n        };\r\n\r\n        /**\r\n         * Returns result of multiplication of this matrix by other matrix\r\n         * @param {Matrix} other_matrix - matrix to multiply by\r\n         * @returns {Matrix}\r\n         */\r\n        multiply(other_matrix) {\r\n            return new Matrix(\r\n                this.a*other_matrix.a + this.c*other_matrix.b,\r\n                this.b*other_matrix.a + this.d*other_matrix.b,\r\n                this.a*other_matrix.c + this.c*other_matrix.d,\r\n                this.b*other_matrix.c + this.d*other_matrix.d,\r\n                this.a*other_matrix.tx + this.c*other_matrix.ty + this.tx,\r\n                this.b*other_matrix.tx + this.d*other_matrix.ty + this.ty\r\n            )\r\n        };\r\n\r\n        /**\r\n         * Return new matrix as a result of multiplication of the current matrix\r\n         * by the matrix(1,0,0,1,tx,ty)\r\n         * @param {number} tx - translation by x\r\n         * @param {number} ty - translation by y\r\n         * @returns {Matrix}\r\n         */\r\n        translate(...args) {\r\n            let tx, ty;\r\n            if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\r\n                tx = args[0].x;\r\n                ty = args[0].y;\r\n            }\r\n            else if (args.length == 2 && typeof(args[0]) == \"number\" && typeof(args[1]) == \"number\") {\r\n                tx = args[0];\r\n                ty = args[1];\r\n            }\r\n            else {\r\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n            }\r\n            return this.multiply(new Matrix(1,0,0,1,tx,ty))\r\n        };\r\n\r\n        /**\r\n         * Return new matrix as a result of multiplication of the current matrix\r\n         * by the matrix that defines rotation by given angle (in radians) around\r\n         * point (0,0) in counter clockwise direction\r\n         * @param angle\r\n         * @returns {Matrix}\r\n         */\r\n        rotate(angle) {\r\n            let cos = Math.cos(angle);\r\n            let sin = Math.sin(angle);\r\n            return this.multiply(new Matrix(cos,sin,-sin,cos,0,0));\r\n        };\r\n\r\n        /**\r\n         * Return new matrix as a result of multiplication of the current matrix\r\n         * by the matrix (sx,0,0,sy,0,0) that defines scaling\r\n         * @param sx\r\n         * @param sy\r\n         * @returns {Matrix}\r\n         */\r\n        scale(sx, sy) {\r\n            return this.multiply(new Matrix(sx,0,0,sy,0,0));\r\n        };\r\n\r\n        /**\r\n         * Returns true if two matrix are equal parameter by parameter\r\n         * @param {Matrix} matrix - other matrix\r\n         * @returns {boolean} true if equal, false otherwise\r\n         */\r\n        equalTo(matrix) {\r\n            if (!Flatten.Utils.EQ(this.tx, matrix.tx)) return false;\r\n            if (!Flatten.Utils.EQ(this.ty, matrix.ty)) return false;\r\n            if (!Flatten.Utils.EQ(this.a, matrix.a)) return false;\r\n            if (!Flatten.Utils.EQ(this.b, matrix.b)) return false;\r\n            if (!Flatten.Utils.EQ(this.c, matrix.c)) return false;\r\n            if (!Flatten.Utils.EQ(this.d, matrix.d)) return false;\r\n            return true;\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Function to create matrix equivalent to \"new\" constructor\r\n     * @param args\r\n     */\r\n    Flatten.matrix = (...args) => new Flatten.Matrix(...args);\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\nmodule.exports = {\r\n    ILLEGAL_PARAMETERS: new ReferenceError('Illegal Parameters'),\r\n    ZERO_DIVISION: new Error('Zero division')\r\n};\r\n\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n * Global constant DP_TOL is used for comparison of floating point numbers.\r\n * It is set to 0.000001.\r\n * @type {number}\r\n */\r\nconst DP_TOL = 0.000001;\r\nconst DECIMALS = 3;\r\n\r\nmodule.exports = {\r\n    DP_TOL: DP_TOL,\r\n    /**\r\n     * Returns *true* if value comparable to zero\r\n     * @return {boolean}\r\n     */\r\n    EQ_0: function(x) {\r\n        return ( (x) < DP_TOL && (x) > -DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if two values are equal up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    EQ: function(x,y) {\r\n        return ( (x)-(y) <  DP_TOL && (x)-(y) > -DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if first argument greater than second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    GT: (x,y) => {\r\n        return ( (x)-(y) >  DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if first argument greater than or equal to second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    GE: (x,y) => {\r\n        return ( (x)-(y) > -DP_TOL );\r\n    },\r\n    /**\r\n     * Returns *true* if first argument less than second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    LT: (x,y) => {\r\n        return ( (x)-(y) < -DP_TOL )\r\n    },\r\n    /**\r\n     * Returns *true* if first argument less than or equal to second argument up to DP_TOL\r\n     * @return {boolean}\r\n     */\r\n    LE: (x,y) => {\r\n        return ( (x)-(y) <  DP_TOL );\r\n    }\r\n};\r\n","/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n'use strict';\r\n\r\nlet Utils = require(\"./utils/utils\");\r\nlet Errors = require(\"./utils/errors\");\r\n\r\n/**\r\n * FlattenJS - library for 2d geometry\r\n * @type {Flatten}\r\n */\r\nlet Flatten = class Flatten {\r\n    constructor() {\r\n        this.DP_TOL = Utils.DP_TOL;\r\n        this.CCW = true;\r\n        this.CW = false;\r\n        this.ORIENTATION = {CCW:-1, CW:1, NOT_ORIENTABLE: 0};\r\n        this.PIx2 = 2 * Math.PI;\r\n        // this.PI_2 = 0.5 * Math.PI;\r\n        this.INSIDE = 1;\r\n        this.OUTSIDE = 0;\r\n        this.BOUNDARY = 2;\r\n        this.CONTAINS = 3;\r\n        this.INTERLACE = 4;\r\n        this.OVERLAP_SAME = 1;\r\n        this.OVERLAP_OPPOSITE = 2;\r\n        this.Utils = Utils;\r\n        this.Errors = Errors;\r\n    }\r\n};\r\n\r\nlet f = new Flatten();\r\n\r\nrequire(\"./classes/matrix\")(f);\r\nrequire(\"./data_structures/planar_set\")(f);\r\nrequire(\"./classes/point\")(f);\r\nrequire(\"./classes/vector\")(f);\r\nrequire(\"./classes/line\")(f);\r\nrequire(\"./classes/circle\")(f);\r\nrequire(\"./classes/segment\")(f);\r\nrequire(\"./classes/arc\")(f);\r\nrequire(\"./classes/box\")(f);\r\nrequire(\"./classes/edge\")(f);\r\nrequire(\"./classes/face\")(f);\r\nrequire(\"./classes/ray\")(f);\r\nrequire(\"./algorithms/ray_shooting\")(f);\r\nrequire(\"./classes/polygon\")(f);\r\nrequire(\"./algorithms/distance\")(f);\r\n\r\nmodule.exports = f;\r\n","/**\r\n * Created by Alex Bol on 12/02/2018.\r\n */\r\n\"use strict\";\r\nlet Flatten = require(\"flatten-js\");\r\n// let Flatten = require(\"flatten-js/dist/flatten.min\");\r\nlet {Polygon, Segment, Arc} = Flatten;\r\n\r\nconst NOT_VERTEX = 0;\r\nconst START_VERTEX = 1;\r\nconst END_VERTEX = 2;\r\n\r\n/**\r\n * Class BooleanOp implements boolean operations on polygons\r\n */\r\nclass BooleanOp {\r\n    static booleanOp(operands) {\r\n        let res_poly = new Polygon();\r\n        for (let [wrk_poly, op] of operands) {\r\n            res_poly = BooleanOp.booleanOpBinary(res_poly, wrk_poly, op);\r\n        }\r\n        return res_poly;\r\n    }\r\n\r\n    static booleanOpBinary(res_poly, wrk_poly, op) {\r\n        return BooleanOp.clip(res_poly, wrk_poly, op);\r\n    }\r\n\r\n    /**\r\n     * Unify two polygons polygons and returns new polygon. <br/>\r\n     * Point belongs to the resulted polygon if it belongs to the first OR to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static unify(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, BooleanOp.BOOLEAN_UNION);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Subtract second polygon from the first and returns new polygon\r\n     * Point belongs to the resulted polygon if it belongs to the first polygon AND NOT to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static subtract(polygon1, polygon2) {\r\n        let wrk_poly = polygon2.clone();\r\n        let wrk_poly_reversed = wrk_poly.reverse();\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, wrk_poly_reversed, BooleanOp.BOOLEAN_SUBTRACT);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Intersect two polygons and returns new polygon\r\n     * Point belongs to the resultes polygon is it belongs to the first AND to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static intersect(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, BooleanOp.BOOLEAN_INTERSECT);\r\n        return res_poly;\r\n    }\r\n\r\n    static arrange(polygon1, polygon2) {\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(polygon1, polygon2);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(polygon1, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(polygon2, intersections.int_points2_sorted);\r\n    }\r\n\r\n    static clip(polygon1, polygon2, op) {\r\n        let res_poly = polygon1.clone();\r\n        let wrk_poly = polygon2.clone();\r\n\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(res_poly, wrk_poly);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n        // filter duplicated intersection points\r\n        BooleanOp.filterDuplicatedIntersections(intersections);\r\n\r\n        // remove not relevant not intersected faces from res_polygon\r\n        // if op == UNION, remove faces that are included in wrk_polygon without intersection\r\n        // if op == INTERSECT, remove faces that are not included into wrk_polygon\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(res_poly, wrk_poly, op, intersections.int_points1, true);\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(wrk_poly, res_poly, op, intersections.int_points2, false);\r\n\r\n        // initialize inclusion flags for edges incident to intersections\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points1);\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points2);\r\n\r\n        // calculate inclusion flags only for edges incident to intersections\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points1, polygon2);\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points2, polygon1);\r\n\r\n        // TODO: fix bondary conflicts\r\n\r\n        // Set overlapping flags for boundary chains: SAME or OPPOSITE\r\n        BooleanOp.setOverlappingFlags(intersections);\r\n\r\n        // remove not relevant chains between intersection points\r\n        BooleanOp.removeNotRelevantChains(res_poly, op, intersections.int_points1_sorted, true);\r\n        BooleanOp.removeNotRelevantChains(wrk_poly, op, intersections.int_points2_sorted, false);\r\n\r\n        // add edges of wrk_poly into the edge container of res_poly\r\n        BooleanOp.copyWrkToRes(res_poly, wrk_poly, op, intersections.int_points2);\r\n\r\n        // swap links from res_poly to wrk_poly and vice versa\r\n        BooleanOp.swapLinks(res_poly, wrk_poly, intersections);\r\n\r\n        // remove old faces\r\n        BooleanOp.removeOldFaces(res_poly, intersections.int_points1);\r\n        BooleanOp.removeOldFaces(wrk_poly, intersections.int_points2);\r\n\r\n        // restore faces\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points1, intersections.int_points2);\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points2, intersections.int_points1);\r\n\r\n        return res_poly;\r\n    }\r\n\r\n    static getIntersections(polygon1, polygon2) {\r\n        let intersections = {\r\n            int_points1: [],\r\n            int_points2: []\r\n        };\r\n\r\n        // calculate intersections\r\n        for (let edge1 of polygon1.edges) {\r\n\r\n            // request edges of polygon2 in the box of edge1\r\n            let resp = polygon2.edges.search(edge1.box);\r\n\r\n            // for each edge2 in response\r\n            for (let edge2 of resp) {\r\n\r\n                // calculate intersections between edge1 and edge2\r\n                let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                // for each intersection point\r\n                for (let pt of ip) {\r\n                    BooleanOp.addToIntPoints(edge1, pt, intersections.int_points1);\r\n                    BooleanOp.addToIntPoints(edge2, pt, intersections.int_points2);\r\n                }\r\n            }\r\n        }\r\n        return intersections;\r\n    }\r\n\r\n    static addToIntPoints(edge, pt, int_points) {\r\n        let id = int_points.length;\r\n        let split = edge.shape.split(pt);\r\n        if (split.length === 0) return;     // Means point does not belong to edge\r\n        let len = 0;\r\n        if (split.length === 1) {           // Edge was not split\r\n            if (edge.shape.start.equalTo(pt)) {\r\n                len = 0;\r\n            }\r\n            else if (edge.shape.end.equalTo(pt)) {\r\n                len = edge.shape.length;\r\n            }\r\n        }\r\n        else {                             // Edge was split into to edges\r\n            len = split[0].length;\r\n        }\r\n        let is_vertex = NOT_VERTEX;\r\n        if (Flatten.Utils.EQ(len, 0)) {\r\n            is_vertex |= START_VERTEX;\r\n        }\r\n        if (Flatten.Utils.EQ(len, edge.shape.length)) {\r\n            is_vertex |= END_VERTEX;\r\n        }\r\n        // Fix intersection point which is end point of the last edge\r\n        let arc_length = (is_vertex & END_VERTEX) && edge.next.arc_length === 0 ? 0 : edge.arc_length + len;\r\n\r\n        int_points.push({\r\n            id: id,\r\n            pt: pt,\r\n            arc_length: arc_length,\r\n            edge_before: edge,\r\n            edge_after: undefined,\r\n            face: edge.face,\r\n            is_vertex: is_vertex\r\n        });\r\n    }\r\n\r\n    static sortIntersections(intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        // augment intersections with new sorted arrays\r\n        // intersections.int_points1_sorted = intersections.int_points1.slice().sort(BooleanOp.compareFn);\r\n        // intersections.int_points2_sorted = intersections.int_points2.slice().sort(BooleanOp.compareFn);\r\n        intersections.int_points1_sorted = BooleanOp.getSortedArray(intersections.int_points1);\r\n        intersections.int_points2_sorted = BooleanOp.getSortedArray(intersections.int_points2);\r\n    }\r\n\r\n    static getSortedArray(int_points) {\r\n        let faceMap = new Map;\r\n        let id = 0;\r\n        // Create integer id's for faces\r\n        for (let ip of int_points) {\r\n            if (!faceMap.has(ip.face)) {\r\n                faceMap.set(ip.face, id);\r\n                id++;\r\n            }\r\n        }\r\n        // Augment intersection points with face id's\r\n        for (let ip of int_points) {\r\n            ip.faceId = faceMap.get(ip.face);\r\n        }\r\n        // Clone and sort\r\n        let int_points_sorted = int_points.slice().sort(BooleanOp.compareFn);\r\n        return int_points_sorted;\r\n    }\r\n\r\n    static compareFn(ip1, ip2) {\r\n        // compare face id's\r\n        if (ip1.faceId < ip2.faceId) {\r\n            return -1;\r\n        }\r\n        if (ip1.faceId > ip2.faceId) {\r\n            return 1;\r\n        }\r\n        // same face - compare arc_length\r\n        if (Flatten.Utils.LT(ip1.arc_length, ip2.arc_length)) {\r\n            return -1;\r\n        }\r\n        if (Flatten.Utils.GT(ip1.arc_length, ip2.arc_length)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static splitByIntersections(polygon, int_points) {\r\n        let {Polygon, Segment, Arc} = Flatten;\r\n        if (!int_points) return;\r\n        for (let int_point of int_points) {\r\n            let edge = int_point.edge_before;\r\n\r\n            // recalculate vertex flag: it may be changed after previous split\r\n            if (edge.shape.start.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= START_VERTEX;\r\n            }\r\n            if (edge.shape.end.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= END_VERTEX;\r\n            }\r\n\r\n            if (int_point.is_vertex & START_VERTEX) {  // nothing to split\r\n                int_point.edge_before = edge.prev;\r\n                int_point.is_vertex = END_VERTEX;\r\n                continue;\r\n            }\r\n            if (int_point.is_vertex & END_VERTEX) {    // nothing to split\r\n                continue;\r\n            }\r\n\r\n            let newEdge = polygon.addVertex(int_point.pt, edge);\r\n            int_point.edge_before = newEdge;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_after = int_point.edge_before.next;\r\n        }\r\n    }\r\n\r\n    static filterDuplicatedIntersections(intersections) {\r\n        if (intersections.int_points1.length < 2) return;\r\n\r\n        let do_squeeze = false;\r\n\r\n        let int_point_ref1 = intersections.int_points1_sorted[0];\r\n        let int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n        for (let i = 1; i < intersections.int_points1_sorted.length; i++) {\r\n            let int_point_cur1 = intersections.int_points1_sorted[i];\r\n\r\n            if (!Flatten.Utils.EQ(int_point_cur1.arc_length, int_point_ref1.arc_length)) {\r\n                int_point_ref1 = int_point_cur1;\r\n                int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n                continue;\r\n            }\r\n\r\n            /* Same length: int_point_cur1->arc_len == int_point_ref1->arc_len */\r\n            /* Ensure this is intersection between same edges from the same face */\r\n            let int_point_cur2 = intersections.int_points2[int_point_cur1.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        int_point_ref2 = intersections.int_points2_sorted[0];\r\n        int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n        for (let i = 1; i < intersections.int_points2_sorted.length; i++) {\r\n            let int_point_cur2 = intersections.int_points2_sorted[i];\r\n\r\n            if (int_point_cur2.id == -1) continue;\r\n            /* already deleted */\r\n\r\n            if (int_point_ref2.id == -1 || /* can't be reference if already deleted */\r\n                !(Flatten.Utils.EQ(int_point_cur2.arc_length, int_point_ref2.arc_length))) {\r\n                int_point_ref2 = int_point_cur2;\r\n                int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n                continue;\r\n            }\r\n\r\n            let int_point_cur1 = intersections.int_points1[int_point_cur2.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        if (do_squeeze) {\r\n            intersections.int_points1 = intersections.int_points1.filter((int_point) => int_point.id >= 0);\r\n            intersections.int_points2 = intersections.int_points2.filter((int_point) => int_point.id >= 0);\r\n\r\n            // update id's\r\n            intersections.int_points1.forEach((int_point, index) => int_point.id = index);\r\n            intersections.int_points2.forEach((int_point, index) => int_point.id = index);\r\n\r\n            // re-create sorted\r\n            intersections.int_points1_sorted = [];\r\n            intersections.int_points2_sorted = [];\r\n            BooleanOp.sortIntersections(intersections);\r\n        }\r\n    }\r\n\r\n    static removeNotRelevantNotIntersectedFaces(poly1, poly2, op, int_points1, is_res_polygon) {\r\n        let toBeDeleted = [];\r\n        for (let face of poly1.faces) {\r\n            if (!int_points1.find((ip) => ip.face === face)) {\r\n                face.first.bv = face.first.bvStart = face.first.bvEnd = undefined;\r\n                let rel = face.first.setInclusion(poly2);\r\n                // let rel = face.getRelation(poly2);\r\n                if (op === BooleanOp.BOOLEAN_UNION && rel === Flatten.INSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n                else if (op === BooleanOp.BOOLEAN_SUBTRACT && rel === Flatten.INSIDE && is_res_polygon) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n                else if (op === BooleanOp.BOOLEAN_INTERSECT && rel === Flatten.OUTSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < toBeDeleted.length; i++) {\r\n            poly1.deleteFace(toBeDeleted[i]);\r\n        }\r\n    }\r\n\r\n    static initializeInclusionFlags(int_points) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvStart = undefined;\r\n            int_point.edge_before.bvEnd = undefined;\r\n            int_point.edge_before.bv = undefined;\r\n            int_point.edge_before.overlap = undefined;\r\n\r\n            int_point.edge_after.bvStart = undefined;\r\n            int_point.edge_after.bvEnd = undefined;\r\n            int_point.edge_after.bv = undefined;\r\n            int_point.edge_after.overlap = undefined;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvEnd = Flatten.BOUNDARY;\r\n            int_point.edge_after.bvStart = Flatten.BOUNDARY;\r\n        }\r\n    }\r\n\r\n    static calculateInclusionFlags(int_points, polygon) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.setInclusion(polygon);\r\n            int_point.edge_after.setInclusion(polygon);\r\n        }\r\n    }\r\n\r\n    static setOverlappingFlags(intersections) {\r\n        let cur_face = undefined;\r\n        let first_int_point_in_face = undefined;\r\n        let next_int_point1 = undefined;\r\n        let num_int_points = intersections.int_points1.length;\r\n\r\n        for (let i = 0; i < num_int_points; i++) {\r\n            let cur_int_point1 = intersections.int_points1_sorted[i];\r\n\r\n            // Find boundary chain in the polygon1\r\n            if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n                first_int_point_in_face = cur_int_point1;\r\n                cur_face = cur_int_point1.face;\r\n            }\r\n\r\n            if (i + 1 === num_int_points) {                                         // last int point in array\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else if (intersections.int_points1_sorted[i + 1].face !== cur_face) {   // last int point in chain\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else {                                                                // not a last point in chain\r\n                next_int_point1 = intersections.int_points1_sorted[i + 1];\r\n            }\r\n\r\n            let edge_from1 = cur_int_point1.edge_after;\r\n            let edge_to1 = next_int_point1.edge_before;\r\n\r\n            if (!(edge_from1.bv === Flatten.BOUNDARY && edge_to1.bv === Flatten.BOUNDARY))      // not a boundary chain - skip\r\n                continue;\r\n\r\n            if (edge_from1 !== edge_to1)                    //  one edge chain    TODO: support complex case\r\n                continue;\r\n\r\n\r\n            /* Find boundary chain in polygon2 between same intersection points */\r\n            let cur_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n            let next_int_point2 = intersections.int_points2[next_int_point1.id];\r\n\r\n            let edge_from2 = cur_int_point2.edge_after;\r\n            let edge_to2 = next_int_point2.edge_before;\r\n\r\n            /* if [edge_from2..edge_to2] is not a boundary chain, invert it */\r\n            /* check also that chain consist of one or two edges */\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2)) {\r\n                cur_int_point2 = intersections.int_points2[next_int_point1.id];\r\n                next_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n\r\n                edge_from2 = cur_int_point2.edge_after;\r\n                edge_to2 = next_int_point2.edge_before;\r\n            }\r\n\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2))\r\n                continue;                           // not an overlapping chain - skip   TODO: fix boundary conflict\r\n\r\n            // Set overlapping flag - one-to-one case\r\n            edge_from1.setOverlap(edge_from2);\r\n        }\r\n    }\r\n\r\n    static removeNotRelevantChains(polygon, op, int_points, is_res_polygon) {\r\n        if (!int_points) return;\r\n        let cur_face = undefined;\r\n        let first_int_point_in_face_num = undefined;\r\n        let int_point_current;\r\n        let int_point_next;\r\n\r\n        for (let i = 0; i < int_points.length; i++) {\r\n            int_point_current = int_points[i];\r\n\r\n            if (int_point_current.face !== cur_face) {   // next face started\r\n                first_int_point_in_face_num = i;\r\n                cur_face = int_point_current.face;\r\n            }\r\n\r\n            if (cur_face.isEmpty())                // ??\r\n                continue;\r\n\r\n            // Get next int point from the same face that current\r\n\r\n            // Count how many duplicated points with same <x,y> in \"points from\" pull ?\r\n            let int_points_from_pull_start = i;\r\n            let int_points_from_pull_num = BooleanOp.intPointsPullCount(int_points, i, cur_face);\r\n            let next_int_point_num;\r\n            if (int_points_from_pull_start + int_points_from_pull_num < int_points.length &&\r\n                int_points[int_points_from_pull_start + int_points_from_pull_num].face === int_point_current.face) {\r\n                next_int_point_num = int_points_from_pull_start + int_points_from_pull_num;\r\n            }\r\n            else {                                         // get first point from the same face\r\n                next_int_point_num = first_int_point_in_face_num;\r\n            }\r\n            int_point_next = int_points[next_int_point_num];\r\n\r\n            /* Count how many duplicated points with same <x,y> in \"points to\" pull ? */\r\n            let int_points_to_pull_start = next_int_point_num;\r\n            let int_points_to_pull_num = BooleanOp.intPointsPullCount(int_points, int_points_to_pull_start, cur_face);\r\n\r\n\r\n            let edge_from = int_point_current.edge_after;\r\n            let edge_to = int_point_next.edge_before;\r\n\r\n            if ((edge_from.bv === Flatten.INSIDE && edge_to.bv === Flatten.INSIDE && op === BooleanOp.BOOLEAN_UNION) ||\r\n                (edge_from.bv === Flatten.OUTSIDE && edge_to.bv === Flatten.OUTSIDE && op === BooleanOp.BOOLEAN_INTERSECT) ||\r\n                ((edge_from.bv === Flatten.OUTSIDE || edge_to.bv === Flatten.OUTSIDE) && op === BooleanOp.BOOLEAN_SUBTRACT && !is_res_polygon) ||\r\n                ((edge_from.bv === Flatten.INSIDE || edge_to.bv === Flatten.INSIDE) && op === BooleanOp.BOOLEAN_SUBTRACT && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_SAME) && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_OPPOSITE))) {\r\n\r\n                polygon.removeChain(cur_face, edge_from, edge_to);\r\n\r\n                /* update all points in \"points from\" pull */\r\n                for (let k=int_points_from_pull_start; k < int_points_from_pull_start+int_points_from_pull_num; k++) {\r\n                    int_point_current.edge_after = undefined;\r\n                }\r\n\r\n                /* update all points in \"points to\" pull */\r\n                for (let k=int_points_to_pull_start; k < int_points_to_pull_start+int_points_to_pull_num; k++) {\r\n                    int_point_next.edge_before = undefined;\r\n                }\r\n            }\r\n\r\n            /* skip to the last point in \"points from\" group */\r\n            i += int_points_from_pull_num-1;\r\n        }\r\n    };\r\n\r\n    static intPointsPullCount(int_points, cur_int_point_num, cur_face) {\r\n        let int_point_current;\r\n        let int_point_next;\r\n\r\n        let int_points_pull_num = 1;\r\n\r\n        if (int_points.length == 1) return 1;\r\n\r\n        int_point_current = int_points[cur_int_point_num];\r\n\r\n        for (let i = cur_int_point_num + 1; i < int_points.length; i++) {\r\n            if (int_point_current.face != cur_face) {      /* next face started */\r\n                break;\r\n            }\r\n\r\n            int_point_next = int_points[i];\r\n\r\n            if (!(int_point_next.pt.equalTo(int_point_current.pt) &&\r\n                int_point_next.edge_before === int_point_current.edge_before &&\r\n                int_point_next.edge_after === int_point_current.edge_after)) {\r\n                break;         /* next point is different - break and exit */\r\n            }\r\n\r\n            int_points_pull_num++;     /* duplicated intersection point - increase counter */\r\n        }\r\n        return int_points_pull_num;\r\n    }\r\n\r\n    static copyWrkToRes(res_polygon, wrk_polygon, op, int_points) {\r\n        for (let face of wrk_polygon.faces) {\r\n            for (let edge of face) {\r\n                res_polygon.edges.add(edge);\r\n            }\r\n            // If union - add face from wrk_polygon that is not intersected with res_polygon\r\n            if (op === BooleanOp.BOOLEAN_UNION &&\r\n                int_points && int_points.find((ip) => (ip.face === face)) === undefined) {\r\n                res_polygon.addFace(face.first, face.last);\r\n            }\r\n        }\r\n    }\r\n\r\n    static swapLinks(res_polygon, wrk_polygon, intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        for (let i = 0; i < intersections.int_points1.length; i++) {\r\n            let int_point1 = intersections.int_points1[i];\r\n            let int_point2 = intersections.int_points2[i];\r\n\r\n            // Simple case - find continuation on the other polygon\r\n\r\n            // Process edge from res_polygon\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // swap need\r\n                if (int_point2.edge_before === undefined && int_point2.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point1.edge_before.next = int_point2.edge_after;\r\n                    int_point2.edge_after.prev = int_point1.edge_before;\r\n\r\n                    // Fill in missed links in intersection points\r\n                    int_point1.edge_after = int_point2.edge_after;\r\n                    int_point2.edge_before = int_point1.edge_before;\r\n                }\r\n            }\r\n            // Process edge from wrk_polygon\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // swap need\r\n                if (int_point1.edge_before === undefined && int_point1.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point2.edge_before.next = int_point1.edge_after;\r\n                    int_point1.edge_after.prev = int_point2.edge_before;\r\n\r\n                    // Complete missed links\r\n                    int_point2.edge_after = int_point1.edge_after;\r\n                    int_point1.edge_before = int_point2.edge_before;\r\n                }\r\n            }\r\n\r\n            // Continuation not found - complex case\r\n            // Continuation will be found on the same polygon.\r\n            // It happens when intersection point is actually touching point\r\n            // Polygon1\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points1_sorted) {\r\n                    if (int_point === int_point1) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point1.pt)) {\r\n                            // Connect edges\r\n                            int_point1.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point1.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point1.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point1.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Polygon2\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points2_sorted) {\r\n                    if (int_point === int_point2) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point2.pt)) {\r\n                            // Connect edges\r\n                            int_point2.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point2.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point2.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point2.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Sanity check that no dead ends left\r\n    }\r\n\r\n    static removeOldFaces(polygon, int_points) {\r\n        for (let int_point of int_points) {\r\n            polygon.faces.delete(int_point.face);\r\n            int_point.face = undefined;\r\n            if (int_point.edge_before)\r\n                int_point.edge_before.face = undefined;\r\n            if (int_point.edge_after)\r\n                int_point.edge_after.face = undefined;\r\n        }\r\n    }\r\n\r\n    static restoreFaces(polygon, int_points, other_int_points) {\r\n        // For each intersection point - create new face\r\n        for (let int_point of int_points) {\r\n            if (int_point.edge_before === undefined || int_point.edge_after === undefined)  // completely deleted\r\n                continue;\r\n            if (int_point.face)            // already restored\r\n                continue;\r\n\r\n            if (int_point.edge_after.face || int_point.edge_before.face)        // Face already created. Possible case in duplicated intersection points\r\n                continue;\r\n\r\n            let first = int_point.edge_after;      // face start\r\n            let last = int_point.edge_before;      // face end;\r\n\r\n            let face = polygon.addFace(first, last);\r\n\r\n            // Mark intersection points from the newly create face\r\n            // to avoid multiple creation of the same face\r\n            // Face was assigned to each edge of new face in addFace function\r\n            for (let int_point_tmp of int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n            // Mark other intersection points as well\r\n            for (let int_point_tmp of other_int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nBooleanOp.BOOLEAN_UNION = 1;\r\nBooleanOp.BOOLEAN_INTERSECT = 2;\r\nBooleanOp.BOOLEAN_SUBTRACT = 3;\r\n\r\nBooleanOp.Flatten = Flatten;\r\n\r\nmodule.exports = BooleanOp;"],"sourceRoot":""}