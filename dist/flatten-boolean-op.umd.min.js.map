{"version":3,"sources":["webpack://flatten-boolean-op/webpack/universalModuleDefinition","webpack://flatten-boolean-op/webpack/bootstrap","webpack://flatten-boolean-op/./node_modules/flatten-js/dist/flatten.min.js","webpack://flatten-boolean-op/./index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","e","configurable","default","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","[object Object]","this","size","tree_walk","keys","push","item","output","isEmpty","tree_insert","recalc_max","tree_search","tree_delete","tree_search_interval","forEach","parent","update_max","less_than","left","right","insert_fixup","color","rotate_left","rotate_right","tree_successor","copy_data","delete_fixup","equal_to","not_intersect_left_subtree","intersect","not_intersect_right_subtree","local_minimum","testBlackHeightProperty","Error","Polygon","Point","Segment","Arc","Circle","Line","Ray","h","Vector","a","vector","Distance","distanceTo","projectionOn","length","center","Utils","EQ_0","toArc","start","Math","abs","pc","normalize","multiply","translate","equalTo","end","point2point","dot","u","GE","tangentInStart","cross","point2circle","on","sort","dist_and_segment","point2line","intersectSegment2Segment","point2segment","ps","pe","LT","point2arc","reverse","circle2circle","Number","POSITIVE_INFINITY","edges","shape","max","xmin","xmax","ymin","ymax","merge","box2box_minmax","box","Edge","insert","map","isNil","filter","LE","minmax_tree_process_level","index","minmax_tree_calc_distance","sqrt","low","distance","PlanarSet","minmax_tree","GT","Face","Box","ray_shoot","faces","reduce","vertices","add","delete","next","remove","deleteFace","split","prev","face","clone","addFace","signedArea","INSIDE","BOUNDARY","point2polygon","shape2polygon","shape2planarSet","isSimple","stroke","strokeWidth","fill","fillRule","fillOpacity","svg","toJSON","notIntersect","OUTSIDE","pt","norm","search","edge","x","tangentInEnd","leftTo","EQ","y","Errors","ILLEGAL_PARAMETERS","intersectRay2Segment","intersectRay2Arc","ray","first","last","_box","_orientation","Array","every","points2segments","shapes2face","startAngle","endAngle","counterClockwise","setArcLength","iterator","done","append","arc_length","orientation","definiteIntegral","ORIENTATION","NOT_ORIENTABLE","CCW","CW","bv","bvStart","bvEnd","setInclusion","CONTAINS","INTERLACE","getSelfIntersections","overlap","middle","contains","OVERLAP_SAME","OVERLAP_OPPOSITE","sweep","PI","high","min","lessThan","PIx2","rotate","breakToFunctional","slope","cos","intersectArc2Circle","intersectArc2Arc","arc2circle","arc2line","segment2arc","arc2arc","circularSegmentDefiniteIntegral","circularSegmentArea","sin","arc","distanceToPoint","intersectSegment2Line","intersectSegment2Circle","intersectSegment2Arc","segment2circle","segment2line","segment2segment","incidentTo","segment","intersectCirle2Circle","circle2line","rotate90CCW","rotate90CW","circle","points2norm","standard","invert","intersectLine2Line","intersectLine2Circle","intersectLine2Arc","intersectLine2Box","find","line","atan2","ZERO_DIVISION","isNaN","point","not_intersect","maximal_val","val_less_than","Set","super","ReferenceError","DP_TOL","PI_2","CLIP_INSIDE","CLIP_OUTSIDE","BOOLEAN_UNION","BOOLEAN_INTERSECT","BOOLEAN_SUBTRACT","Flatten","NOT_VERTEX","START_VERTEX","END_VERTEX","BooleanOp","operands","res_poly","wrk_poly","op","booleanOpBinary","clip","polygon1","polygon2","wrk_poly_reversed","intersections","getIntersections","sortIntersections","splitByIntersections","int_points1_sorted","int_points2_sorted","filterDuplicatedIntersections","removeNotRelevantNotIntersectedFaces","int_points1","int_points2","initializeInclusionFlags","calculateInclusionFlags","setOverlappingFlags","removeNotRelevantChains","copyWrkToRes","swapLinks","removeOldFaces","restoreFaces","edge1","resp","edge2","ip","addToIntPoints","int_points","id","len","is_vertex","edge_before","edge_after","undefined","getSortedArray","faceMap","Map","has","set","faceId","slice","compareFn","ip1","ip2","polygon","int_point","newEdge","addVertex","do_squeeze","int_point_ref1","int_point_ref2","int_point_cur1","int_point_cur2","poly1","poly2","toBeDeleted","rel","getRelation","cur_face","first_int_point_in_face","next_int_point1","num_int_points","cur_int_point1","edge_from1","edge_to1","cur_int_point2","next_int_point2","edge_from2","edge_to2","setOverlap","is_res_polygon","int_point_next","int_point_current","edge_from","edge_to","removeChain","res_polygon","wrk_polygon","int_point1","int_point2","other_int_points","int_point_tmp"],"mappings":"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","file":"flatten-boolean-op.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flatten-boolean-op\"] = factory();\n\telse\n\t\troot[\"flatten-boolean-op\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports=function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=20)}([function(t,e,n){\"use strict\";t.exports={RB_TREE_COLOR_RED:0,RB_TREE_COLOR_BLACK:1}},function(t,e,n){\"use strict\";let i=n(16),{RB_TREE_COLOR_RED:r,RB_TREE_COLOR_BLACK:s}=n(0),o=new i;t.exports=class{constructor(){this.root=null}get size(){let t=0;return this.tree_walk(this.root,()=>t++),t}get keys(){let t=[];return this.tree_walk(this.root,e=>t.push(e.item.key.output())),t}get isEmpty(){return null==this.root||this.root==o}insert(t,e=t){if(void 0===t)return;let n=new i(t,e,o,o,null,r);return this.tree_insert(n),this.recalc_max(n),n}exist(t,e){let n=new i(t,e);return!!this.tree_search(this.root,n)}remove(t,e){let n=new i(t,e),r=this.tree_search(this.root,n);return r&&this.tree_delete(r),r}search(t){let e=new i(t),n=[];this.tree_search_interval(this.root,e,n);let r=[];return n.forEach(t=>{t.item.value?r.push(t.item.value):r.push(t.item.key.output())},[]),r}forEach(t){this.tree_walk(this.root,e=>t(e.item.key,e.item.value))}recalc_max(t){let e=t;for(;null!=e.parent;)e.parent.update_max(),e=e.parent}tree_insert(t){let e=this.root,n=null;if(null==this.root||this.root==o)this.root=t;else{for(;e!=o;)n=e,e=t.less_than(e)?e.left:e.right;t.parent=n,t.less_than(n)?n.left=t:n.right=t}this.insert_fixup(t)}insert_fixup(t){let e,n;for(e=t;e!=this.root&&e.parent.color==r;)e.parent==e.parent.parent.left?(n=e.parent.parent.right).color==r?(e.parent.color=s,n.color=s,e.parent.parent.color=r,e=e.parent.parent):(e==e.parent.right&&(e=e.parent,this.rotate_left(e)),e.parent.color=s,e.parent.parent.color=r,this.rotate_right(e.parent.parent)):(n=e.parent.parent.left).color==r?(e.parent.color=s,n.color=s,e.parent.parent.color=r,e=e.parent.parent):(e==e.parent.left&&(e=e.parent,this.rotate_right(e)),e.parent.color=s,e.parent.parent.color=r,this.rotate_left(e.parent.parent));this.root.color=s}tree_delete(t){let e,n;(n=(e=t.left==o||t.right==o?t:this.tree_successor(t)).left!=o?e.left:e.right).parent=e.parent,e==this.root?this.root=n:(e==e.parent.left?e.parent.left=n:e.parent.right=n,e.parent.update_max()),this.recalc_max(n),e!=t&&(t.copy_data(e),t.update_max(),this.recalc_max(t)),e.color==s&&this.delete_fixup(n)}delete_fixup(t){let e,n=t;for(;n!=this.root&&null!=n.parent&&n.color==s;)n==n.parent.left?((e=n.parent.right).color==r&&(e.color=s,n.parent.color=r,this.rotate_left(n.parent),e=n.parent.right),e.left.color==s&&e.right.color==s?(e.color=r,n=n.parent):(e.right.color==s&&(e.color=r,e.left.color=s,this.rotate_right(e),e=n.parent.right),e.color=n.parent.color,n.parent.color=s,e.right.color=s,this.rotate_left(n.parent),n=this.root)):((e=n.parent.left).color==r&&(e.color=s,n.parent.color=r,this.rotate_right(n.parent),e=n.parent.left),e.left.color==s&&e.right.color==s?(e.color=r,n=n.parent):(e.left.color==s&&(e.color=r,e.right.color=s,this.rotate_left(e),e=n.parent.left),e.color=n.parent.color,n.parent.color=s,e.left.color=s,this.rotate_right(n.parent),n=this.root));n.color=s}tree_search(t,e){if(null!=t&&t!=o)return e.equal_to(t)?t:e.less_than(t)?this.tree_search(t.left,e):this.tree_search(t.right,e)}tree_search_interval(t,e,n){null!=t&&t!=o&&(t.left==o||t.not_intersect_left_subtree(e)||this.tree_search_interval(t.left,e,n),t.intersect(e)&&n.push(t),t.right==o||t.not_intersect_right_subtree(e)||this.tree_search_interval(t.right,e,n))}local_minimum(t){let e=t;for(;null!=e.left&&e.left!=o;)e=e.left;return e}local_maximum(t){let e=t;for(;null!=e.right&&e.right!=o;)e=e.right;return e}tree_successor(t){let e,n,i;if(t.right!=o)e=this.local_minimum(t.right);else{for(n=t,i=t.parent;null!=i&&i.right==n;)n=i,i=i.parent;e=i}return e}rotate_left(t){let e=t.right;t.right=e.left,e.left!=o&&(e.left.parent=t),e.parent=t.parent,t==this.root?this.root=e:t==t.parent.left?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e,null!=t&&t!=o&&t.update_max(),null!=(e=t.parent)&&e!=o&&e.update_max()}rotate_right(t){let e=t.left;t.left=e.right,e.right!=o&&(e.right.parent=t),e.parent=t.parent,t==this.root?this.root=e:t==t.parent.left?t.parent.left=e:t.parent.right=e,e.right=t,t.parent=e,null!=t&&t!=o&&t.update_max(),null!=(e=t.parent)&&e!=o&&e.update_max()}tree_walk(t,e){null!=t&&t!=o&&(this.tree_walk(t.left,e),e(t),this.tree_walk(t.right,e))}testRedBlackProperty(){let t=!0;return this.tree_walk(this.root,function(e){e.color==r&&(e.left.color==s&&e.right.color==s||(t=!1))}),t}testBlackHeightProperty(t){let e=0,n=0,i=0;if(t.color==s&&e++,(n=t.left!=o?this.testBlackHeightProperty(t.left):1)!=(i=t.right!=o?this.testBlackHeightProperty(t.right):1))throw new Error(\"Red-black height property violated\");return e+=n}}},function(t,e,n){\"use strict\";let i=n(1);t.exports=function(t){let{Polygon:e,Point:n,Segment:r,Arc:s,Circle:o,Line:l,Ray:h,Vector:a}=t,{vector:c}=t;t.Distance=class e{static point2point(t,e){return t.distanceTo(e)}static point2line(t,e){let n=t.projectionOn(e);return[c(t,n).length,new r(t,n)]}static point2circle(e,n){let[i,s]=e.distanceTo(n.center);if(t.Utils.EQ_0(i))return[n.r,new r(e,n.toArc().start)];{let t=Math.abs(i-n.r),s=c(n.pc,e).normalize().multiply(n.r),o=n.pc.translate(s);return[t,new r(e,o)]}}static point2segment(n,i){if(i.start.equalTo(i.end))return e.point2point(n,i.start);let s,o,l=new t.Vector(i.start,i.end),h=new t.Vector(i.start,n),a=new t.Vector(i.end,n),c=l.dot(h),u=-l.dot(a);if(t.Utils.GE(c,0)&&t.Utils.GE(u,0)){let t=i.tangentInStart();return s=Math.abs(t.cross(h)),o=i.start.translate(t.multiply(t.dot(h))),[s,new r(n,o)]}return c<0?n.distanceTo(i.start):n.distanceTo(i.end)}static point2arc(n,i){let r,s,o=new t.Circle(i.pc,i.r),l=[];return[r,s]=e.point2circle(n,o),s.end.on(i)&&l.push(e.point2circle(n,o)),l.push(e.point2point(n,i.start)),l.push(e.point2point(n,i.end)),e.sort(l),l[0]}static segment2line(t,n){let i=t.intersect(n);return i.length>0?[0,new r(i[0],i[0])]:(dist_and_segment.push(e.point2line(t.start,n)),dist_and_segment.push(e.point2line(t.end,n)),e.sort(dist_and_segment),dist_and_segment[0])}static segment2segment(t,n){let i=r.intersectSegment2Segment(t,n);if(i.length>0)return[0,new r(i[0],i[0])];let s=[];return s.push(e.point2segment(n.start,t)),s.push(e.point2segment(n.end,t)),s.push(e.point2segment(t.start,n)),s.push(e.point2segment(t.end,n)),e.sort(s),s[0]}static segment2circle(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Line(n.ps,n.pe),[l,h]=e.point2line(i.center,o);if(t.Utils.GE(l,i.r)&&h.end.on(n))return e.point2circle(h.end,i);{let[r,s]=e.point2circle(n.start,i),[o,l]=e.point2circle(n.end,i);return t.Utils.LT(r,o)?[r,s]:[o,l]}}static segment2arc(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Line(n.ps,n.pe),l=new t.Circle(i.pc,i.r),[h,a]=e.point2line(l.center,o);if(t.Utils.GE(h,l.r)&&a.end.on(n)){let[t,n]=e.point2circle(a.end,l);if(n.end.on(i))return[t,n]}let c,u,p=[];return p.push(e.point2arc(n.start,i)),p.push(e.point2arc(n.end,i)),[c,u]=e.point2segment(i.start,n),p.push([c,u.reverse()]),[c,u]=e.point2segment(i.end,n),p.push([c,u.reverse()]),e.sort(p),p[0]}static circle2circle(t,n){let i=t.intersect(n);if(i.length>0)return[0,new r(i[0],i[0])];if(t.center.equalTo(n.center)){let i=t.toArc(),r=n.toArc();return e.point2point(i.start,r.start)}{let i=new l(t.center,n.center),r=i.intersect(t),s=i.intersect(n),o=[];return o.push(e.point2point(r[0],s[0])),o.push(e.point2point(r[0],s[1])),o.push(e.point2point(r[1],s[0])),o.push(e.point2point(r[1],s[1])),e.sort(o),o[0]}}static circle2line(t,n){let i=t.intersect(n);if(i.length>0)return[0,new r(i[0],i[0])];let[s,o]=e.point2line(t.center,n),[l,h]=e.point2circle(o.end,t);return[l,h=h.reverse()]}static arc2line(n,i){let s=i.intersect(n);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Circle(n.center,n.r),[l,h]=e.point2line(o.center,i);if(!t.Utils.GE(l,o.r)){let t=[];return t.push(e.point2line(n.start,i)),t.push(e.point2line(n.end,i)),e.sort(t),t[0]}{let[t,i]=e.point2circle(h.end,o);if(i.end.on(n))return[t,i]}}static arc2circle(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Circle(n.center,n.r),[l,h]=e.circle2circle(o,i);if(h.start.on(n))return[l,h];{let t=[];return t.push(e.point2circle(n.start,i)),t.push(e.point2circle(n.end,i)),e.sort(t),t[0]}}static arc2arc(n,i){let s=n.intersect(i);if(s.length>0)return[0,new r(s[0],s[0])];let o=new t.Circle(n.center,n.r),l=new t.Circle(i.center,i.r),[h,a]=e.circle2circle(o,l);if(a.start.on(n)&&a.end.on(i))return[h,a];{let t,r,s=[];return[t,r]=e.point2arc(n.start,i),r.end.on(i)&&s.push([t,r]),[t,r]=e.point2arc(n.end,i),r.end.on(i)&&s.push([t,r]),[t,r]=e.point2arc(i.start,n),r.end.on(n)&&s.push([t,r.reverse()]),[t,r]=e.point2arc(i.end,n),r.end.on(n)&&s.push([t,r.reverse()]),[t,r]=e.point2point(n.start,i.start),s.push([t,r]),[t,r]=e.point2point(n.start,i.end),s.push([t,r]),[t,r]=e.point2point(n.end,i.start),s.push([t,r]),[t,r]=e.point2point(n.end,i.end),s.push([t,r]),e.sort(s),s[0]}}static point2polygon(n,i){let s=[Number.POSITIVE_INFINITY,new r];for(let o of i.edges){let[i,l]=o.shape instanceof r?e.point2segment(n,o.shape):e.point2arc(n,o.shape);t.Utils.LT(i,s[0])&&(s=[i,l])}return s}static shape2polygon(e,n){let i=[Number.POSITIVE_INFINITY,new r];for(let r of n.edges){let[n,s]=e.distanceTo(r.shape);t.Utils.LT(n,i[0])&&(i=[n,s])}return i}static polygon2polygon(e,n){let i=[Number.POSITIVE_INFINITY,new t.Segment];for(let r of e.edges)for(let e of n.edges){let[n,s]=r.shape.distanceTo(e.shape);t.Utils.LT(n,i[0])&&(i=[n,s])}return i}static box2box_minmax(t,e){let n=Math.max(Math.max(t.xmin-e.xmax,0),Math.max(e.xmin-t.xmax,0)),i=Math.max(Math.max(t.ymin-e.ymax,0),Math.max(e.ymin-t.ymax,0)),r=n*n+i*i,s=t.merge(e),o=s.xmax-s.xmin,l=s.ymax-s.ymin;return[r,o*o+l*l]}static minmax_tree_process_level(n,i,r,s){let o,l;for(let h of i)[o,l]=e.box2box_minmax(n.box,h.item.key),h.item.value instanceof t.Edge?s.insert([o,l],h.item.value.shape):s.insert([o,l],h.item.value),t.Utils.LT(l,r)&&(r=l);if(0===i.length)return r;let h=i.map(t=>t.left.isNil()?void 0:t.left).filter(t=>void 0!==t),a=i.map(t=>t.right.isNil()?void 0:t.right).filter(t=>void 0!==t),c=[...h,...a].filter(i=>{let[s,o]=e.box2box_minmax(n.box,i.max);return t.Utils.LE(s,r)});return r=e.minmax_tree_process_level(n,c,r,s)}static minmax_tree(t,n,r){let s=new i,o=[n.index.root],l=r<Number.POSITIVE_INFINITY?r*r:Number.POSITIVE_INFINITY;return l=e.minmax_tree_process_level(t,o,l,s),s}static minmax_tree_calc_distance(n,i,r){let s,o;if(null!=i&&!i.isNil()){if([s,o]=e.minmax_tree_calc_distance(n,i.left,r),o)return[s,o];if(t.Utils.LT(s[0],Math.sqrt(i.item.key.low)))return[s,!0];let[l,h]=e.distance(n,i.item.value);return t.Utils.LT(l,s[0])&&(s=[l,h]),[s,o]=e.minmax_tree_calc_distance(n,i.right,s),[s,o]}return[r,!1]}static shape2planarSet(n,i,r=Number.POSITIVE_INFINITY){let s=[r,new t.Segment],o=!1;if(i instanceof t.PlanarSet){let t=e.minmax_tree(n,i,r);[s,o]=e.minmax_tree_calc_distance(n,t.root,s)}return s}static sort(e){e.sort((e,n)=>t.Utils.LT(e[0],n[0])?-1:t.Utils.GT(e[0],n[0])?1:0)}static distance(t,e){return t.distanceTo(e)}}}},function(t,e,n){\"use strict\";t.exports=function(t){let{Edge:e,Face:n,PlanarSet:i,Box:r}=t,{ray_shoot:s}=t;t.Polygon=class e{constructor(){this.faces=new i,this.edges=new i}get box(){return[...this.faces].reduce((t,e)=>t.merge(e.box),new r)}get vertices(){return[...this.edges].map(t=>t.start)}addFace(...t){let e=new n(this,...t);return this.faces.add(e),e}deleteFace(t){for(let e of t){this.edges.delete(e)}return this.faces.delete(t)}removeChain(t,e,n){if(n.next!==e){for(let i=e;i!==n.next;i=i.next)if(t.remove(this.edges,i),t.isEmpty()){this.deleteFace(t);break}}else this.deleteFace(t)}addVertex(e,n){let i=n.shape.split(e);if(i.length<2)return;let r=new t.Edge(i[0]),s=n.prev;return n.face.insert(this.edges,r,s),this.edges.delete(n),n.shape=i[1],this.edges.add(n),r}reverse(){for(let t of this.faces)t.reverse();return this}clone(){let t=new e;for(let e of this.faces){let n=[];for(let t of e)n.push(t.shape.clone());t.addFace(n)}return t}area(){let t=[...this.faces].reduce((t,e)=>t+e.signedArea(),0);return Math.abs(t)}contains(e){let n=s(this,e);return n==t.INSIDE||n==t.BOUNDARY}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2polygon(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle||e instanceof t.Line||e instanceof t.Segment||e instanceof t.Arc){let[t,i]=n.shape2polygon(e,this);return[t,i=i.reverse()]}if(e instanceof t.Polygon){let i,r,s=[Number.POSITIVE_INFINITY,new t.Segment];for(let o of this.edges){let l=s[0];[i,r]=n.shape2planarSet(o.shape,e.edges,l),t.Utils.LT(i,l)&&(s=[i,r])}return s}}isValid(){let t=!0;for(let e of this.faces)if(!e.isSimple(this.edges)){t=!1;break}return t}translate(t){let n=new e;for(let e of this.faces){let i=[];for(let n of e)i.push(n.shape.translate(t));n.addFace(i)}return n}svg(t={}){let{stroke:e,strokeWidth:n,fill:i,fillRule:r,fillOpacity:s,...o}=t,l=Object.keys(o).reduce((t,e)=>t+=` ${e}=\"${o[e]}\"`,\"\"),h=`\\n<path stroke=\"${e||\"black\"}\" stroke-width=\"${n||1}\" fill=\"${i||\"lightcyan\"}\" fill-rule=\"${r||\"evenodd\"}\" fill-opacity=\"${s||1}\" d=\"`;for(let t of this.faces)h+=t.svg();return h+=`\" ${l} >\\n</path>`}toJSON(){return[...this.faces].map(t=>t.toJSON())}}}},function(t,e,n){\"use strict\";t.exports=function(t){let{Polygon:e,Point:n,Segment:i,Arc:r,Line:s,Ray:o}=t;t.ray_shoot=function(e,n){let r=void 0;if(e.box.notIntersect(n.box))return t.OUTSIDE;let l=new o(n),h=new s(l.pt,l.norm),a=e.edges.search(l.box);if(0==a.length)return t.OUTSIDE;let c=[];for(let e of a)for(let i of l.intersect(e.shape)){if(i.equalTo(n))return t.BOUNDARY;c.push({pt:i,edge:e})}c.sort((e,n)=>t.Utils.LT(e.pt.x,n.pt.x)?-1:t.Utils.GT(e.pt.x,n.pt.x)?1:0);let u=0;for(let e=0;e<c.length;e++){let n=c[e];if(n.pt.equalTo(n.edge.shape.start)){if(e>0&&n.pt.equalTo(c[e-1].pt)&&n.edge.prev===c[e-1].edge)continue;let t=n.edge.prev.shape.tangentInEnd(),i=n.pt.translate(t),r=n.edge.shape.tangentInStart(),s=n.pt.translate(r),o=i.leftTo(h),l=s.leftTo(h);(o&&!l||!o&&l)&&u++}else if(n.pt.equalTo(n.edge.shape.end)){if(e>0&&n.pt.equalTo(c[e-1].pt)&&n.edge.next===c[e-1].edge)continue;let t=n.edge.next.shape.tangentInStart(),i=n.pt.translate(t),r=n.edge.shape.tangentInEnd(),s=n.pt.translate(r),o=i.leftTo(h),l=s.leftTo(h);(o&&!l||!o&&l)&&u++}else if(n.edge.shape instanceof i)u++;else{let e=n.edge.shape.box;t.Utils.EQ(n.pt.y,e.ymin)||t.Utils.EQ(n.pt.y,e.ymax)||u++}}return r=u%2==1?t.INSIDE:t.OUTSIDE}}},function(t,e,n){\"use strict\";t.exports=function(t){let{Point:e,Segment:n,Line:i,Circle:r,Arc:s,Box:o,Vector:l}=t;t.Ray=class r{constructor(...n){if(this.pt=new e,0!=n.length)if(1==n.length&&n[0]instanceof e)this.pt=n[0].clone();else{if(2!=n.length||\"number\"!=typeof n[0]||\"number\"!=typeof n[1])throw t.Errors.ILLEGAL_PARAMETERS;this.pt=new e(n[0],n[1])}}clone(){return new r(this.pt)}get box(){return new o(this.pt.x,this.pt.y,Number.POSITIVE_INFINITY,this.pt.y)}get start(){return this.pt}get norm(){return new l(0,1)}intersect(t){return t instanceof n?this.intersectRay2Segment(this,t):t instanceof s?this.intersectRay2Arc(this,t):void 0}intersectRay2Segment(e,n){let r=[];if(e.box.notIntersect(n.box))return r;let s=new i(e.start,e.norm),o=s.intersect(n);for(let n of o)t.Utils.GE(n.x,e.start.x)&&r.push(n);return 2==o.length&&1==r.length&&e.start.on(s)&&r.push(e.start),r}intersectRay2Arc(e,n){let r=[];if(e.box.notIntersect(n.box))return r;let s=new i(e.start,e.norm).intersect(n);for(let n of s)t.Utils.GE(n.x,e.start.x)&&r.push(n);return r}},t.ray=((...e)=>new t.Ray(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){let{Point:e,Segment:n,Arc:i,Box:r,Edge:s}=t;t.Face=class r{constructor(t,...o){if(this.first,this.last,this._box=void 0,this._orientation=void 0,0!=o.length){if(1==o.length)if(o[0]instanceof Array){let s=o[0];if(0==s.length)return;if(s.every(t=>t instanceof e)){let e=r.points2segments(s);this.shapes2face(t.edges,e)}else if(s.every(t=>t instanceof n||t instanceof i))this.shapes2face(t.edges,s);else if(s.every(t=>\"segment\"===t.name||\"arc\"===t.name)){let r=[];for(let t of s){let s;s=\"segment\"===t.name?new n(t.ps.x,t.ps.y,t.pe.x,t.pe.y):new i(new e(t.pc.x,t.pc.y),t.r,t.startAngle,t.endAngle,t.counterClockwise),r.push(s)}this.shapes2face(t.edges,r)}}else if(o[0]instanceof r){let e=o[0];this.first=e.first,this.last=e.last;for(let n of e)t.edges.add(n)}2==o.length&&o[0]instanceof s&&o[1]instanceof s&&(this.first=o[0],this.last=o[1],this.last.next=this.first,this.first.prev=this.last,this.setArcLength())}}[Symbol.iterator](){let t=void 0;return{next:()=>{let e=t||this.first,n=!this.first||!!t&&t===this.first;return t=e?e.next:void 0,{value:e,done:n}}}}get edges(){let t=[];for(let e of this)t.push(e);return t}get size(){let t=0;for(let e of this)t++;return t}static points2segments(t){let e=[];for(let i=0;i<t.length;i++)e.push(new n(t[i],t[(i+1)%t.length]));return e}shapes2face(t,e){for(let n of e){let e=new s(n);this.append(t,e)}}isEmpty(){return void 0===this.first&&void 0===this.last}append(t,e){void 0===this.first?(e.prev=e,e.next=e,this.first=e,this.last=e,e.arc_length=0):(e.prev=this.last,this.last.next=e,this.last=e,this.last.next=this.first,this.first.prev=this.last,e.arc_length=e.prev.arc_length+e.prev.length),e.face=this,t.add(e)}insert(t,e,n){if(void 0===this.first)edge.prev=e,edge.next=e,this.first=e,this.last=e;else{let t=n.next;n.next=e,t.prev=e,e.prev=n,e.next=t,this.last===n&&(this.first=e)}e.face=this,t.add(e)}remove(t,e){e===this.first&&e===this.last?(this.first=void 0,this.last=void 0):(e.prev.next=e.next,e.next.prev=e.prev,e===this.first&&(this.first=e.next),e===this.last&&(this.last=e.prev)),t.delete(e)}reverse(){let t=[],e=this.last;do{e.shape=e.shape.reverse(),t.push(e),e=e.prev}while(e!==this.last);this.first=void 0,this.last=void 0;for(let e of t)void 0===this.first?(e.prev=e,e.next=e,this.first=e,this.last=e,e.arc_length=0):(e.prev=this.last,this.last.next=e,this.last=e,this.last.next=this.first,this.first.prev=this.last,e.arc_length=e.prev.arc_length+e.prev.length);void 0!==this._orientation&&(this._orientation=void 0,this._orientation=this.orientation())}setArcLength(){for(let t of this)t===this.first?t.arc_length=0:t.arc_length=t.prev.arc_length+t.prev.length,t.face=this}area(){return Math.abs(this.signedArea())}signedArea(){let t=0;for(let e of this)t+=e.shape.definiteIntegral(this.box.ymin);return t}orientation(){if(void 0===this._orientation){let e=this.signedArea();t.Utils.EQ_0(e)?this._orientation=t.ORIENTATION.NOT_ORIENTABLE:t.Utils.LT(e,0)?this._orientation=t.ORIENTATION.CCW:this._orientation=t.ORIENTATION.CW}return this._orientation}get box(){if(void 0===this._box){let e=new t.Box;for(let t of this)e=e.merge(t.box);this._box=e}return this._box}getRelation(e){this.first.bv=this.first.bvStart=this.first.bvEnd=void 0;let n=this.first.setInclusion(e),i=e.faces.search(this.box);if(0===i.length)return n;{let r=new t.Polygon;r.addFace(this);let s=0;for(let e of i){e.first.bv=e.first.bvStart=e.first.bvEnd=void 0,e.first.setInclusion(r)===t.INSIDE&&s++}if(n===t.OUTSIDE)return 0===s?t.OUTSIDE:s===i.length&&i.length===e.faces.size?t.CONTAINS:t.INTERLACE;if(n===t.INSIDE)return 0===s?t.INSIDE:t.INTERLACE}}isSimple(t){return 0==r.getSelfIntersections(this,t,!0).length}static getSelfIntersections(e,n,i=!1){let r=[];for(let s of e){let e=n.search(s.box);for(let n of e){if(s===n)continue;if(s.shape instanceof t.Segment&&n.shape instanceof t.Segment&&(s.next===n||s.prev===n))continue;let e=s.shape.intersect(n.shape);for(let t of e)if((!t.equalTo(s.start)||!t.equalTo(n.end)||n!==s.prev)&&(!t.equalTo(s.end)||!t.equalTo(n.start)||n!==s.next)&&(r.push(t),i))break;if(r.length>0&&i)break}if(r.length>0&&i)break}return r}toJSON(){return this.edges.map(t=>t.toJSON())}svg(){let t=`\\nM${this.first.start.x},${this.first.start.y}`;for(let e of this)t+=e.svg();return t+=\" z\"}}}},function(t,e){t.exports=function(t){t.Edge=class{constructor(t){this.shape=t,this.next,this.prev,this.face,this.arc_length=0,this.bvStart=void 0,this.bvEnd=void 0,this.bv=void 0,this.overlap=void 0}get start(){return this.shape.start}get end(){return this.shape.end}get length(){return this.shape.length}get box(){return this.shape.box}middle(){return this.shape.middle()}contains(t){return this.shape.contains(t)}setInclusion(e){if(void 0!==this.bv)return this.bv;if(void 0===this.bvStart&&(this.bvStart=t.ray_shoot(e,this.start)),void 0===this.bvEnd&&(this.bvEnd=t.ray_shoot(e,this.end)),this.bvStart===t.OUTSIDE||this.bvEnd==t.OUTSIDE)this.bv=t.OUTSIDE;else if(this.bvStart===t.INSIDE||this.bvEnd==t.INSIDE)this.bv=t.INSIDE;else{let n=t.ray_shoot(e,this.middle());this.bv=n}return this.bv}setOverlap(e){let n=void 0,i=this.shape,r=e.shape;i instanceof t.Segment&&r instanceof t.Segment?i.start.equalTo(r.start)&&i.end.equalTo(r.end)?n=t.OVERLAP_SAME:i.start.equalTo(r.end)&&i.end.equalTo(r.start)&&(n=t.OVERLAP_OPPOSITE):i instanceof t.Arc&&r instanceof t.Arc?i.start.equalTo(r.start)&&i.end.equalTo(r.end)&&i.counterClockwise===r.counterClockwise&&i.middle().equalTo(r.middle())?n=t.OVERLAP_SAME:i.start.equalTo(r.end)&&i.end.equalTo(r.start)&&i.counterClockwise!==r.counterClockwise&&i.middle().equalTo(r.middle())&&(n=t.OVERLAP_OPPOSITE):(i instanceof t.Segment&&r instanceof t.Arc||i instanceof t.Arc&&r instanceof t.Segment)&&(i.start.equalTo(r.start)&&i.end.equalTo(r.end)&&i.middle().equalTo(r.middle())?n=t.OVERLAP_SAME:i.start.equalTo(r.end)&&i.end.equalTo(r.start)&&i.middle().equalTo(r.middle())&&(n=t.OVERLAP_OPPOSITE)),void 0===this.overlap&&(this.overlap=n),void 0===e.overlap&&(e.overlap=n)}svg(){if(this.shape instanceof t.Segment)return` L${this.shape.end.x},${this.shape.end.y}`;if(this.shape instanceof t.Arc){let e,n=this.shape,i=n.counterClockwise?\"1\":\"0\";if(t.Utils.EQ(n.sweep,2*Math.PI)){let r=n.counterClockwise?1:-1,s=new t.Arc(n.pc,n.r,n.startAngle,n.startAngle+r*Math.PI,n.counterClockwise),o=new t.Arc(n.pc,n.r,n.startAngle+r*Math.PI,n.endAngle,n.counterClockwise);return e=\"0\",` A${s.r},${s.r} 0 ${e},${i} ${s.end.x},${s.end.y}\\n                    A${o.r},${o.r} 0 ${e},${i} ${o.end.x},${o.end.y}`}return e=n.sweep<=Math.PI?\"0\":\"1\",` A${n.r},${n.r} 0 ${e},${i} ${n.end.x},${n.end.y}`}}toJSON(){let e=this.shape.clone();return e.name=this.shape instanceof t.Segment?\"segment\":\"arc\",e}}}},function(t,e,n){\"use strict\";t.exports=function(t){t.Box=class e{constructor(t,e,n,i){this.xmin=t,this.ymin=e,this.xmax=n,this.ymax=i}clone(){return new e(this.xmin,this.ymin,this.xmax,this.ymax)}get low(){return new t.Point(this.xmin,this.ymin)}get high(){return new t.Point(this.xmax,this.ymax)}get max(){return this.clone()}notIntersect(t){return this.xmax<t.xmin||this.xmin>t.xmax||this.ymax<t.ymin||this.ymin>t.ymax}intersect(t){return!this.notIntersect(t)}merge(t){return new e(void 0===this.xmin?t.xmin:Math.min(this.xmin,t.xmin),void 0===this.ymin?t.ymin:Math.min(this.ymin,t.ymin),void 0===this.xmax?t.xmax:Math.max(this.xmax,t.xmax),void 0===this.ymax?t.ymax:Math.max(this.ymax,t.ymax))}less_than(t){return!!this.low.lessThan(t.low)||!(!this.low.equalTo(t.low)||!this.high.lessThan(t.high))}equal_to(t){return this.low.equalTo(t.low)&&this.high.equalTo(t.high)}output(){return this.clone()}maximal_val(t,e){return t.merge(e)}val_less_than(t,e){return t.lessThan(e)}set(t,e,n,i){this.xmin=t,this.ymin=e,this.xmax=n,this.ymax=i}svg(t={}){let{stroke:e,strokeWidth:n,fill:i,...r}=t,s=Object.keys(r).reduce((t,e)=>t+=` ${e}=\"${r[e]}\"`,\"\"),o=this.xmax-this.xmin,l=this.ymax-this.ymin;return`\\n<rect x=\"${this.xmin}\" y=\"${this.ymin}\" width=${o} height=${l} stroke=\"${e||\"black\"}\" stroke-width=\"${n||1}\" fill=\"${i||\"none\"}\" ${s} />`}}}},function(t,e,n){\"use strict\";t.exports=function(t){t.Arc=class e{constructor(e=new t.Point,n=1,i=0,r=2*Math.PI,s=!0){this.pc=e.clone(),this.r=n,this.startAngle=i,this.endAngle=r,this.counterClockwise=s}clone(){return new t.Arc(this.pc.clone(),this.r,this.startAngle,this.endAngle,this.counterClockwise)}get sweep(){if(t.Utils.EQ(this.startAngle,this.endAngle))return 0;if(t.Utils.EQ(Math.abs(this.startAngle-this.endAngle),t.PIx2))return t.PIx2;let e;return e=this.counterClockwise?t.Utils.GT(this.endAngle,this.startAngle)?this.endAngle-this.startAngle:this.endAngle-this.startAngle+t.PIx2:t.Utils.GT(this.startAngle,this.endAngle)?this.startAngle-this.endAngle:this.startAngle-this.endAngle+t.PIx2,t.Utils.GT(e,t.PIx2)&&(e-=t.PIx2),t.Utils.LT(e,0)&&(e+=t.PIx2),e}get start(){return new t.Point(this.pc.x+this.r,this.pc.y).rotate(this.startAngle,this.pc)}get end(){return new t.Point(this.pc.x+this.r,this.pc.y).rotate(this.endAngle,this.pc)}get center(){return this.pc.clone()}get vertices(){return[this.start.clone(),this.end.clone()]}get length(){return Math.abs(this.sweep*this.r)}get box(){let e=this.breakToFunctional().reduce((t,e)=>t.merge(e.start.box),new t.Box);return e=e.merge(this.end.box)}contains(e){if(!t.Utils.EQ(this.pc.distanceTo(e)[0],this.r))return!1;if(e.equalTo(this.start))return!0;let n=new t.Vector(this.pc,e).slope,i=new t.Arc(this.pc,this.r,this.startAngle,n,this.counterClockwise);return t.Utils.LE(i.length,this.length)}split(e){if(!this.contains(e))return[];if(t.Utils.EQ_0(this.sweep))return[this.clone()];if(this.start.equalTo(e)||this.end.equalTo(e))return[this.clone()];let n=new t.Vector(this.pc,e).slope;return[new t.Arc(this.pc,this.r,this.startAngle,n,this.counterClockwise),new t.Arc(this.pc,this.r,n,this.endAngle,this.counterClockwise)]}middle(){let e=this.counterClockwise===t.CCW?this.startAngle+this.sweep/2:this.startAngle-this.sweep/2;return new t.Arc(this.pc,this.r,this.startAngle,e,this.counterClockwise).end}chordHeight(){return(1-Math.cos(Math.abs(this.sweep/2)))*this.r}intersect(n){return n instanceof t.Line?n.intersect(this):n instanceof t.Circle?e.intersectArc2Circle(this,n):n instanceof t.Segment?n.intersect(this):n instanceof t.Arc?e.intersectArc2Arc(this,n):void 0}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2arc(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle){let[t,i]=n.arc2circle(this,e);return[t,i]}if(e instanceof t.Line){let[t,i]=n.arc2line(this,e);return[t,i]}if(e instanceof t.Segment){let[t,i]=n.segment2arc(e,this);return[t,i=i.reverse()]}if(e instanceof t.Arc){let[t,i]=n.arc2arc(this,e);return[t,i]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}if(e instanceof t.PlanarSet){let[t,i]=n.shape2planarSet(this,e);return[t,i]}}breakToFunctional(){let e=[],n=[0,Math.PI/2,2*Math.PI/2,3*Math.PI/2],i=[this.pc.translate(this.r,0),this.pc.translate(0,this.r),this.pc.translate(-this.r,0),this.pc.translate(0,-this.r)],r=[];for(let e=0;e<4;e++)i[e].on(this)&&r.push(new t.Arc(this.pc,this.r,this.startAngle,n[e],this.counterClockwise));if(0==r.length)e.push(this.clone());else{r.sort((t,e)=>t.length-e.length);for(let n=0;n<r.length;n++){let i,s=e.length>0?e[e.length-1]:void 0;i=s?new t.Arc(this.pc,this.r,s.endAngle,r[n].endAngle,this.counterClockwise):new t.Arc(this.pc,this.r,this.startAngle,r[n].endAngle,this.counterClockwise),t.Utils.EQ_0(i.length)||e.push(i.clone())}let n,i=e.length>0?e[e.length-1]:void 0;n=i?new t.Arc(this.pc,this.r,i.endAngle,this.endAngle,this.counterClockwise):new t.Arc(this.pc,this.r,this.startAngle,this.endAngle,this.counterClockwise),t.Utils.EQ_0(n.length)||e.push(n.clone())}return e}tangentInStart(){let e=new t.Vector(this.pc,this.start),n=this.counterClockwise?Math.PI/2:-Math.PI/2;return e.rotate(n).normalize()}tangentInEnd(){let e=new t.Vector(this.pc,this.end),n=this.counterClockwise?-Math.PI/2:Math.PI/2;return e.rotate(n).normalize()}reverse(){return new e(this.pc,this.r,this.endAngle,this.startAngle,!this.counterClockwise)}translate(t){let e=this.clone();return e.pc=this.pc.translate(t),e}static intersectArc2Arc(e,n){var i=[];if(e.box.notIntersect(n.box))return i;if(e.pc.equalTo(n.pc)&&t.Utils.EQ(e.r,n.r)){let t;return(t=e.start).on(n)&&i.push(t),(t=e.end).on(n)&&i.push(t),(t=n.start).on(e)&&i.push(t),(t=n.end).on(e)&&i.push(t),i}let r=new t.Circle(e.pc,e.r),s=new t.Circle(n.pc,n.r),o=r.intersect(s);for(let t of o)t.on(e)&&t.on(n)&&i.push(t);return i}static intersectArc2Circle(e,n){let i=[];if(e.box.notIntersect(n.box))return i;if(n.pc.equalTo(e.pc)&&t.Utils.EQ(n.r,e.r))return i.push(e.start),i.push(e.end),i;let r=n,s=new t.Circle(e.pc,e.r),o=r.intersect(s);for(let t of o)t.on(e)&&i.push(t);return i}definiteIntegral(t=0){return this.breakToFunctional().reduce((e,n)=>e+n.circularSegmentDefiniteIntegral(t),0)}circularSegmentDefiniteIntegral(e){let n=new t.Line(this.start,this.end),i=this.pc.leftTo(n),r=new t.Segment(this.start,this.end).definiteIntegral(e),s=this.circularSegmentArea();return i?r-s:r+s}circularSegmentArea(){return.5*this.r*this.r*(this.sweep-Math.sin(this.sweep))}svg(e={}){let n=this.sweep<=Math.PI?\"0\":\"1\",i=this.counterClockwise?\"1\":\"0\",{stroke:r,strokeWidth:s,fill:o,...l}=e,h=Object.keys(l).reduce((t,e)=>t+=` ${e}=\"${l[e]}\"`,\"\");if(t.Utils.EQ(this.sweep,2*Math.PI)){return new t.Circle(this.pc,this.r).svg(e)}return`\\n<path d=\"M${this.start.x},${this.start.y}\\n                             A${this.r},${this.r} 0 ${n},${i} ${this.end.x},${this.end.y}\"\\n                    stroke=\"${r||\"black\"}\" stroke-width=\"${s||1}\" fill=\"${o||\"none\"}\" ${h} />`}},t.arc=((...e)=>new t.Arc(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){t.Segment=class e{constructor(...e){if(this.ps=new t.Point,this.pe=new t.Point,0!=e.length){if(1==e.length&&e[0]instanceof Array&&4==e[0].length){let n=e[0];return this.ps=new t.Point(n[0],n[1]),void(this.pe=new t.Point(n[2],n[3]))}if(2==e.length&&e[0]instanceof t.Point&&e[1]instanceof t.Point)return this.ps=e[0].clone(),void(this.pe=e[1].clone());if(4==e.length)return this.ps=new t.Point(e[0],e[1]),void(this.pe=new t.Point(e[2],e[3]));throw t.Errors.ILLEGAL_PARAMETERS}}clone(){return new t.Segment(this.start,this.end)}get start(){return this.ps}get end(){return this.pe}get vertices(){return[this.ps.clone(),this.pe.clone()]}get length(){return this.start.distanceTo(this.end)[0]}get slope(){return new t.Vector(this.start,this.end).slope}get box(){return new t.Box(Math.min(this.start.x,this.end.x),Math.min(this.start.y,this.end.y),Math.max(this.start.x,this.end.x),Math.max(this.start.y,this.end.y))}contains(e){return t.Utils.EQ_0(this.distanceToPoint(e))}intersect(n){return n instanceof t.Line?e.intersectSegment2Line(this,n):n instanceof t.Segment?e.intersectSegment2Segment(this,n):n instanceof t.Circle?e.intersectSegment2Circle(this,n):n instanceof t.Arc?e.intersectSegment2Arc(this,n):void 0}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2segment(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle){let[t,i]=n.segment2circle(this,e);return[t,i]}if(e instanceof t.Line){let[t,i]=n.segment2line(this,e);return[t,i]}if(e instanceof t.Segment){let[t,i]=n.segment2segment(this,e);return[t,i]}if(e instanceof t.Arc){let[t,i]=n.segment2arc(this,e);return[t,i]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}if(e instanceof t.PlanarSet){let[t,i]=n.shape2planarSet(this,e);return[t,i]}}tangentInStart(){return new t.Vector(this.start,this.end).normalize()}tangentInEnd(){return new t.Vector(this.end,this.start).normalize()}reverse(){return new e(this.end,this.start)}split(e){return this.contains(e)?this.start.equalTo(this.end)?[this.clone()]:this.start.equalTo(e)||this.end.equalTo(e)?[this]:[new t.Segment(this.start,e),new t.Segment(e,this.end)]:[]}middle(){return new t.Point((this.start.x+this.end.x)/2,(this.start.y+this.end.y)/2)}distanceToPoint(e){let[n,...i]=t.Distance.point2segment(e,this);return n}definiteIntegral(t=0){return(this.end.x-this.start.x)*(this.start.y-t+(this.end.y-t))/2}translate(t){return new e(this.ps.translate(t),this.pe.translate(t))}static intersectSegment2Line(e,n){let i=[],r=t.Utils.EQ_0(e.length);return e.ps.on(n)&&i.push(e.ps),e.pe.on(n)&&!r&&i.push(e.pe),i.length>0?i:e.ps.leftTo(n)&&e.pe.leftTo(n)||!e.ps.leftTo(n)&&!e.pe.leftTo(n)?i:new t.Line(e.ps,e.pe).intersect(n)}static intersectSegment2Segment(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Line(e.ps,e.pe),s=new t.Line(n.ps,n.pe);if(r.incidentTo(s))e.ps.on(n)&&i.push(e.ps),e.pe.on(n)&&i.push(e.pe),!n.ps.on(e)||n.ps.equalTo(e.ps)||n.ps.equalTo(e.pe)||i.push(n.ps),!n.pe.on(e)||n.pe.equalTo(e.ps)||n.pe.equalTo(e.pe)||i.push(n.pe);else{let t=r.intersect(s);t.length>0&&t[0].on(e)&&t[0].on(n)&&i.push(t[0])}return i}static intersectSegment2Circle(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Line(e.ps,e.pe).intersect(n);for(let t of r)t.on(e)&&i.push(t);return i}static intersectSegment2Arc(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Line(e.ps,e.pe),s=new t.Circle(n.pc,n.r),o=r.intersect(s);for(let t of o)t.on(e)&&t.on(n)&&i.push(t);return i}svg(t={}){let{stroke:e,strokeWidth:n,...i}=t,r=Object.keys(i).reduce((t,e)=>t+=` ${e}=\"${i[e]}\"`,\"\");return`\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" stroke=\"${e||\"black\"}\" stroke-width=\"${n||1}\" ${r} />`}},t.segment=((...e)=>new t.Segment(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){let{Arc:e,vector:n}=t;t.Circle=class e{constructor(t,e){this.pc=t,this.r=e}clone(){return new t.Circle(this.pc.clone(),this.r)}get center(){return this.pc}get box(){return new t.Box(this.pc.x-this.r,this.pc.y-this.r,this.pc.x+this.r,this.pc.y+this.r)}contains(e){return t.Utils.LE(e.distanceTo(this.center)[0],this.r)}toArc(e=!0){return new t.Arc(this.center,this.r,Math.PI,-Math.PI,e)}intersect(n){return n instanceof t.Line?n.intersect(this):n instanceof t.Segment?n.intersect(this):n instanceof t.Circle?e.intersectCirle2Circle(this,n):n instanceof t.Arc?n.intersect(this):void 0}distanceTo(e){let{Distance:n}=t,{point2circle:i,circle2circle:r,circle2line:s,segment2circle:o,arc2circle:l}=n;if(e instanceof t.Point){let[t,n]=i(e,this);return[t,n=n.reverse()]}if(e instanceof t.Circle){let[t,n]=r(this,e);return[t,n]}if(e instanceof t.Line){let[t,n]=s(this,e);return[t,n]}if(e instanceof t.Segment){let[t,n]=o(e,this);return[t,n=n.reverse()]}if(e instanceof t.Arc){let[t,n]=l(e,this);return[t,n=n.reverse()]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}if(e instanceof t.PlanarSet){let[t,i]=n.shape2planarSet(this,e);return[t,i]}}static intersectCirle2Circle(e,n){let i=[];if(e.box.notIntersect(n.box))return i;let r=new t.Vector(e.pc,n.pc),s=e.r,o=n.r;if(t.Utils.EQ_0(s)||t.Utils.EQ_0(o))return i;if(t.Utils.EQ_0(r.x)&&t.Utils.EQ_0(r.y)&&t.Utils.EQ(s,o))return i.push(e.pc.translate(-s,0)),i;let l,h=e.pc.distanceTo(n.pc)[0];if(t.Utils.GT(h,s+o))return i;if(t.Utils.LT(h,Math.abs(s-o)))return i;if(r.x/=h,r.y/=h,t.Utils.EQ(h,s+o)||t.Utils.EQ(h,Math.abs(s-o)))return l=e.pc.translate(s*r.x,s*r.y),i.push(l),i;let a=s*s/(2*h)-o*o/(2*h)+h/2,c=e.pc.translate(a*r.x,a*r.y),u=Math.sqrt(s*s-a*a);return l=c.translate(r.rotate90CCW().multiply(u)),i.push(l),l=c.translate(r.rotate90CW().multiply(u)),i.push(l),i}svg(t={}){let{stroke:e,strokeWidth:n,fill:i,fillOpacity:r,...s}=t,o=Object.keys(s).reduce((t,e)=>t+=` ${e}=\"${s[e]}\"`,\"\");return`\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\" stroke=\"${e||\"black\"}\" stroke-width=\"${n||1}\" fill=\"${i||\"none\"}\" fill-opacity=\"${r||1}\" ${o} />`}},t.circle=((...e)=>new t.Circle(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){t.Line=class e{constructor(...n){if(this.pt=new t.Point,this.norm=new t.Vector(0,1),0!=n.length){if(2==n.length){let i=n[0],r=n[1];if(i instanceof t.Point&&r instanceof t.Point)return this.pt=i,void(this.norm=e.points2norm(i,r));if(i instanceof t.Point&&r instanceof t.Vector){if(t.Utils.EQ_0(r.x)&&t.Utils.EQ_0(r.y))throw t.Errors.ILLEGAL_PARAMETERS;return this.pt=i.clone(),void(this.norm=r.clone())}if(i instanceof t.Vector&&r instanceof t.Point){if(t.Utils.EQ_0(i.x)&&t.Utils.EQ_0(i.y))throw t.Errors.ILLEGAL_PARAMETERS;return this.pt=r.clone(),void(this.norm=i.clone())}}throw t.Errors.ILLEGAL_PARAMETERS}}clone(){return new t.Line(this.pt,this.norm)}get slope(){return new t.Vector(this.norm.y,-this.norm.x).slope}get standard(){return[this.norm.x,this.norm.y,this.norm.dot(this.pt)]}parallelTo(e){return t.Utils.EQ_0(this.norm.cross(e.norm))}incidentTo(t){return(this.norm.equalTo(t.norm)||this.norm.equalTo(t.norm.invert()))&&this.pt.on(t)}contains(e){if(this.pt.equalTo(e))return!0;let n=new t.Vector(this.pt,e);return t.Utils.EQ_0(this.norm.dot(n))}intersect(n){return n instanceof t.Line?e.intersectLine2Line(this,n):n instanceof t.Circle?e.intersectLine2Circle(this,n):n instanceof t.Segment?n.intersect(this):n instanceof t.Arc?e.intersectLine2Arc(this,n):void 0}distanceTo(e){let{Distance:n}=t;if(e instanceof t.Point){let[t,i]=n.point2line(e,this);return[t,i=i.reverse()]}if(e instanceof t.Circle){let[t,i]=n.circle2line(e,this);return[t,i=i.reverse()]}if(e instanceof t.Segment){let[t,i]=n.segment2line(e,this);return[t,i.reverse()]}if(e instanceof t.Arc){let[t,i]=n.arc2line(e,this);return[t,i.reverse()]}if(e instanceof t.Polygon){let[t,i]=n.shape2polygon(this,e);return[t,i]}}svg(n,i={}){let r=e.intersectLine2Box(this,n);if(0===r.length)return\"\";let s=r[0],o=2==r.length?r[1]:r.find(t=>!t.equalTo(s));return void 0===o&&(o=s),new t.Segment(s,o).svg(i)}static points2norm(e,n){if(e.equalTo(n))throw t.Errors.ILLEGAL_PARAMETERS;return new t.Vector(e,n).normalize().rotate90CCW()}static intersectLine2Line(e,n){let i=[],[r,s,o]=e.standard,[l,h,a]=n.standard,c=r*h-s*l,u=o*h-s*a,p=r*a-o*l;if(!t.Utils.EQ_0(c)){let e=new t.Point(u/c,p/c);i.push(e)}return i}static intersectLine2Circle(e,n){let i=[],r=n.pc.projectionOn(e),s=n.pc.distanceTo(r)[0];if(t.Utils.EQ(s,n.r))i.push(r);else if(t.Utils.LT(s,n.r)){var o,l,h=Math.sqrt(n.r*n.r-s*s);o=e.norm.rotate90CCW().multiply(h),l=r.translate(o),i.push(l),o=e.norm.rotate90CW().multiply(h),l=r.translate(o),i.push(l)}return i}static intersectLine2Box(e,n){let i=[new t.Point(n.xmin,n.ymin),new t.Point(n.xmax,n.ymin),new t.Point(n.xmax,n.ymax),new t.Point(n.xmin,n.ymax)],r=[new t.Segment(i[0],i[1]),new t.Segment(i[1],i[2]),new t.Segment(i[2],i[3]),new t.Segment(i[3],i[0])],s=[];for(let t of r){let n=t.intersect(e);for(let t of n)s.push(t)}return s}static intersectLine2Arc(n,i){let r=[];if(0==e.intersectLine2Box(n,i.box).length)return r;let s=new t.Circle(i.pc,i.r),o=n.intersect(s);for(let t of o)t.on(i)&&r.push(t);return r}},t.line=((...e)=>new t.Line(...e))}},function(t,e,n){\"use strict\";t.exports=function(t){t.Vector=class e{constructor(...e){if(this.x=0,this.y=0,0!=e.length){if(2==e.length){let n=e[0],i=e[1];if(\"number\"==typeof n&&\"number\"==typeof i)return this.x=n,void(this.y=i);if(n instanceof t.Point&&i instanceof t.Point)return this.x=i.x-n.x,void(this.y=i.y-n.y)}throw t.Errors.ILLEGAL_PARAMETERS}}clone(){return new e(this.x,this.y)}get slope(){let t=Math.atan2(this.y,this.x);return t<0&&(t=2*Math.PI+t),t}get length(){return Math.sqrt(this.dot(this))}equalTo(e){return t.Utils.EQ(this.x,e.x)&&t.Utils.EQ(this.y,e.y)}multiply(t){return new e(t*this.x,t*this.y)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}normalize(){if(!t.Utils.EQ_0(this.length))return new e(this.x/this.length,this.y/this.length);throw t.Errors.ZERO_DIVISION}rotate(e){let n=new t.Point(this.x,this.y).rotate(e);return new t.Vector(n.x,n.y)}rotate90CCW(){return new t.Vector(-this.y,this.x)}rotate90CW(){return new t.Vector(this.y,-this.x)}invert(){return new t.Vector(-this.x,-this.y)}},t.vector=((...e)=>new t.Vector(...e))}},function(t,e){t.exports=function(t){t.Point=class e{constructor(t=0,e=0){this.x=Number.isNaN(t)?0:t,this.y=Number.isNaN(e)?0:e}get box(){return new t.Box(this.x,this.y,this.x,this.y)}clone(){return new t.Point(this.x,this.y)}get vertices(){return[this.clone()]}equalTo(e){return t.Utils.EQ(this.x,e.x)&&t.Utils.EQ(this.y,e.y)}lessThan(e){return!!t.Utils.LT(this.y,e.y)||!(!t.Utils.EQ(this.y,e.y)||!t.Utils.LT(this.x,e.x))}rotate(e,n={x:0,y:0}){var i=n.x+(this.x-n.x)*Math.cos(e)-(this.y-n.y)*Math.sin(e),r=n.y+(this.x-n.x)*Math.sin(e)+(this.y-n.y)*Math.cos(e);return new t.Point(i,r)}translate(...e){if(1==e.length&&e[0]instanceof t.Vector)return new t.Point(this.x+e[0].x,this.y+e[0].y);if(2==e.length&&\"number\"==typeof e[0]&&\"number\"==typeof e[1])return new t.Point(this.x+e[0],this.y+e[1]);throw t.Errors.ILLEGAL_PARAMETERS}projectionOn(e){if(this.equalTo(e.pt))return this.clone();let n=new t.Vector(this,e.pt);if(t.Utils.EQ_0(n.cross(e.norm)))return e.pt.clone();let i=n.dot(e.norm),r=e.norm.multiply(i);return this.translate(r)}leftTo(e){let n=new t.Vector(e.pt,this);return t.Utils.GT(n.dot(e.norm),0)}distanceTo(n){let{Distance:i}=t;if(n instanceof e){let e=n.x-this.x,i=n.y-this.y;return[Math.sqrt(e*e+i*i),new t.Segment(this,n)]}return n instanceof t.Line?i.point2line(this,n):n instanceof t.Circle?i.point2circle(this,n):n instanceof t.Segment?i.point2segment(this,n):n instanceof t.Arc?i.point2arc(this,n):n instanceof t.Polygon?i.point2polygon(this,n):n instanceof t.PlanarSet?i.shape2planarSet(this,n):void 0}on(e){return e instanceof t.Point?this.equalTo(e):e instanceof t.Line?e.contains(this):e instanceof t.Circle?e.contains(this):e instanceof t.Segment?e.contains(this):e instanceof t.Arc?e.contains(this):e instanceof t.Polygon?e.contains(this):void 0}svg(t={}){let{r:e,stroke:n,strokeWidth:i,fill:r,...s}=t,o=Object.keys(s).reduce((t,e)=>t+=` ${e}=\"${s[e]}\"`,\"\");return`\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${e||3}\" stroke=\"${n||\"black\"}\" stroke-width=\"${i||1}\" fill=\"${r||\"red\"}\" ${o} />`}},t.point=((...e)=>new t.Point(...e))}},function(t,e){t.exports=class t{constructor(t,e){this.low=t,this.high=e}get max(){return this.high}interval(e,n){return new t(e,n)}clone(){return new t(this.low,this.high)}less_than(t){return this.low<t.low||this.low==t.low&&this.high<t.high}equal_to(t){return this.low==t.low&&this.high==t.high}intersect(t){return!this.not_intersect(t)}not_intersect(t){return this.high<t.low||t.high<this.low}output(){return[this.low,this.high]}maximal_val(t,e){return Math.max(t,e)}val_less_than(t,e){return t<e}}},function(t,e,n){\"use strict\";let i=n(15),{RB_TREE_COLOR_RED:r,RB_TREE_COLOR_BLACK:s}=n(0);t.exports=class{constructor(t,e,n=null,r=null,o=null,l=s){this.left=n,this.right=r,this.parent=o,this.color=l,this.item={key:t,value:e},t&&t instanceof Array&&2==t.length&&(Number.isNaN(t[0])||Number.isNaN(t[1])||(this.item.key=new i(Math.min(t[0],t[1]),Math.max(t[0],t[1])))),this.max=this.item.key?this.item.key.max:void 0}isNil(){return void 0===this.item.key&&void 0===this.item.value&&null===this.left&&null===this.right&&this.color===s}less_than(t){return this.item.key.less_than(t.item.key)}equal_to(t){let e=!0;return this.item.value&&t.item.value&&(e=this.item.value.equal_to?this.item.value.equal_to(t.item.value):this.item.value==t.item.value),this.item.key.equal_to(t.item.key)&&e}intersect(t){return this.item.key.intersect(t.item.key)}copy_data(t){this.item.key=t.item.key.clone(),this.item.value=t.item.value}update_max(){if(this.max=this.item.key?this.item.key.max:void 0,this.right&&this.right.max){let t=this.item.key.maximal_val;this.max=t(this.max,this.right.max)}if(this.left&&this.left.max){let t=this.item.key.maximal_val;this.max=t(this.max,this.left.max)}}not_intersect_left_subtree(t){return(0,this.item.key.val_less_than)(this.left.max.high?this.left.max.high:this.left.max,t.item.key.low)}not_intersect_right_subtree(t){let e=this.item.key.val_less_than,n=this.right.max.low?this.right.max.low:this.right.item.key.low;return e(t.item.key.high,n)}}},function(t,e,n){\"use strict\";let i=n(1);t.exports=function(t){t.PlanarSet=class extends Set{constructor(){super(),this.index=new i}add(t){let e=this.size;if(super.add(t),this.size>e){this.index.insert(t.box,t)}return this}delete(t){let e=super.delete(t);return e&&this.index.remove(t.box,t),e}clear(){}search(t){return this.index.search(t)}hit(e){let n=new t.Box(e.x-1,e.y-1,e.x+1,e.y+1);return this.index.search(n).filter(t=>e.on(t))}svg(){return[...this].reduce((t,e)=>t+e.svg(),\"\")}}}},function(t,e){t.exports={ILLEGAL_PARAMETERS:new ReferenceError(\"Illegal Parameters\"),ZERO_DIVISION:new Error(\"Zero division\")}},function(t,e){t.exports={DP_TOL:1e-6,EQ_0:function(t){return t<1e-6&&t>-1e-6},EQ:function(t,e){return t-e<1e-6&&t-e>-1e-6},GT:(t,e)=>t-e>1e-6,GE:(t,e)=>t-e>-1e-6,LT:(t,e)=>t-e<-1e-6,LE:(t,e)=>t-e<1e-6}},function(t,e,n){\"use strict\";let i=n(19),r=n(18),s=new class{constructor(){this.DP_TOL=i.DP_TOL,this.CCW=!0,this.CW=!1,this.ORIENTATION={CCW:-1,CW:1,NOT_ORIENTABLE:0},this.PIx2=2*Math.PI,this.PI_2=.5*Math.PI,this.Utils=i,this.Errors=r,this.INSIDE=1,this.OUTSIDE=0,this.BOUNDARY=2,this.CONTAINS=3,this.INTERLACE=4,this.CLIP_INSIDE=1,this.CLIP_OUTSIDE=0,this.BOOLEAN_UNION=1,this.BOOLEAN_INTERSECT=2,this.BOOLEAN_SUBTRACT=3,this.OVERLAP_SAME=1,this.OVERLAP_OPPOSITE=2}};n(17)(s),n(14)(s),n(13)(s),n(12)(s),n(11)(s),n(10)(s),n(9)(s),n(8)(s),n(7)(s),n(6)(s),n(5)(s),n(4)(s),n(3)(s),n(2)(s),t.exports=s}]);\r\n//# sourceMappingURL=flatten.min.js.map","/**\r\n * Created by Alex Bol on 12/02/2018.\r\n */\r\n\"use strict\";\r\n// let Flatten = require(\"flatten-js\");\r\nlet Flatten = require(\"flatten-js/dist/flatten.min\");\r\nlet {Polygon, Segment, Arc} = Flatten;\r\n\r\nconst NOT_VERTEX = 0;\r\nconst START_VERTEX = 1;\r\nconst END_VERTEX = 2;\r\n\r\n/**\r\n * Class BooleanOp implements boolean operations on polygons\r\n */\r\nclass BooleanOp {\r\n    static booleanOp(operands) {\r\n        let res_poly = new Polygon();\r\n        for (let [wrk_poly, op] of operands) {\r\n            res_poly = BooleanOp.booleanOpBinary(res_poly, wrk_poly, op);\r\n        }\r\n        return res_poly;\r\n    }\r\n\r\n    static booleanOpBinary(res_poly, wrk_poly, op) {\r\n        return BooleanOp.clip(res_poly, wrk_poly, op);\r\n    }\r\n\r\n    /**\r\n     * Unify two polygons polygons and returns new polygon. <br/>\r\n     * Point belongs to the resulted polygon if it belongs to the first OR to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static unify(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, Flatten.BOOLEAN_UNION);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Subtract second polygon from the first and returns new polygon\r\n     * Point belongs to the resulted polygon if it belongs to the first polygon AND NOT to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static subtract(polygon1, polygon2) {\r\n        let wrk_poly = polygon2.clone();\r\n        let wrk_poly_reversed = wrk_poly.reverse();\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, wrk_poly_reversed, Flatten.BOOLEAN_SUBTRACT);\r\n        return res_poly;\r\n    }\r\n\r\n    /**\r\n     * Intersect two polygons and returns new polygon\r\n     * Point belongs to the resultes polygon is it belongs to the first AND to the second polygon\r\n     * @param {Flatten.Polygon} polygon1 - first operand\r\n     * @param {Flatten.Polygon} polygon2 - second operand\r\n     * @returns {Flatten.Polygon}\r\n     */\r\n    static intersect(polygon1, polygon2) {\r\n        let res_poly = BooleanOp.booleanOpBinary(polygon1, polygon2, Flatten.BOOLEAN_INTERSECT);\r\n        return res_poly;\r\n    }\r\n\r\n    static arrange(polygon1, polygon2) {\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(polygon1, polygon2);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(polygon1, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(polygon2, intersections.int_points2_sorted);\r\n    }\r\n\r\n    static clip(polygon1, polygon2, op) {\r\n        let res_poly = polygon1.clone();\r\n        let wrk_poly = polygon2.clone();\r\n\r\n        // get intersection points\r\n        let intersections = BooleanOp.getIntersections(res_poly, wrk_poly);\r\n\r\n        // sort intersection points\r\n        BooleanOp.sortIntersections(intersections);\r\n\r\n        // split by intersection points\r\n        BooleanOp.splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n        BooleanOp.splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n        // filter duplicated intersection points\r\n        BooleanOp.filterDuplicatedIntersections(intersections);\r\n\r\n        // remove not relevant not intersected faces from res_polygon\r\n        // if op == UNION, remove faces that are included in wrk_polygon without intersection\r\n        // if op == INTERSECT, remove faces that are not included into wrk_polygon\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(res_poly, wrk_poly, op, intersections.int_points1);\r\n        BooleanOp.removeNotRelevantNotIntersectedFaces(wrk_poly, res_poly, op, intersections.int_points2);\r\n\r\n        // initialize inclusion flags for edges incident to intersections\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points1);\r\n        BooleanOp.initializeInclusionFlags(intersections.int_points2);\r\n\r\n        // calculate inclusion flags only for edges incident to intersections\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points1, polygon2);\r\n        BooleanOp.calculateInclusionFlags(intersections.int_points2, polygon1);\r\n\r\n        // TODO: fix bondary conflicts\r\n\r\n        // Set overlapping flags for boundary chains: SAME or OPPOSITE\r\n        BooleanOp.setOverlappingFlags(intersections);\r\n\r\n        // remove not relevant chains between intersection points\r\n        BooleanOp.removeNotRelevantChains(res_poly, op, intersections.int_points1_sorted, true);\r\n        BooleanOp.removeNotRelevantChains(wrk_poly, op, intersections.int_points2_sorted, false);\r\n\r\n        // add edges of wrk_poly into the edge container of res_poly\r\n        BooleanOp.copyWrkToRes(res_poly, wrk_poly, op, intersections.int_points2);\r\n\r\n        // swap links from res_poly to wrk_poly and vice versa\r\n        BooleanOp.swapLinks(res_poly, wrk_poly, intersections);\r\n\r\n        // remove old faces\r\n        BooleanOp.removeOldFaces(res_poly, intersections.int_points1);\r\n        BooleanOp.removeOldFaces(wrk_poly, intersections.int_points2);\r\n\r\n        // restore faces\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points1, intersections.int_points2);\r\n        BooleanOp.restoreFaces(res_poly, intersections.int_points2, intersections.int_points1);\r\n\r\n        return res_poly;\r\n    }\r\n\r\n    static getIntersections(polygon1, polygon2) {\r\n        let intersections = {\r\n            int_points1: [],\r\n            int_points2: []\r\n        };\r\n\r\n        // calculate intersections\r\n        for (let edge1 of polygon1.edges) {\r\n\r\n            // request edges of polygon2 in the box of edge1\r\n            let resp = polygon2.edges.search(edge1.box);\r\n\r\n            // for each edge2 in response\r\n            for (let edge2 of resp) {\r\n\r\n                // calculate intersections between edge1 and edge2\r\n                let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                // for each intersection point\r\n                for (let pt of ip) {\r\n                    BooleanOp.addToIntPoints(edge1, pt, intersections.int_points1);\r\n                    BooleanOp.addToIntPoints(edge2, pt, intersections.int_points2);\r\n                }\r\n            }\r\n        }\r\n        return intersections;\r\n    }\r\n\r\n    static addToIntPoints(edge, pt, int_points) {\r\n        let id = int_points.length;\r\n        let split = edge.shape.split(pt);\r\n        if (split.length === 0) return;     // Means point does not belong to edge\r\n        let len = 0;\r\n        if (split.length === 1) {           // Edge was not split\r\n            if (edge.shape.start.equalTo(pt)) {\r\n                len = 0;\r\n            }\r\n            else if (edge.shape.end.equalTo(pt)) {\r\n                len = edge.shape.length;\r\n            }\r\n        }\r\n        else {                             // Edge was split into to edges\r\n            len = split[0].length;\r\n        }\r\n        let is_vertex = NOT_VERTEX;\r\n        if (Flatten.Utils.EQ(len, 0)) {\r\n            is_vertex |= START_VERTEX;\r\n        }\r\n        if (Flatten.Utils.EQ(len, edge.shape.length)) {\r\n            is_vertex |= END_VERTEX;\r\n        }\r\n        // Fix intersection point which is end point of the last edge\r\n        let arc_length = (is_vertex & END_VERTEX) && edge.next.arc_length === 0 ? 0 : edge.arc_length + len;\r\n\r\n        int_points.push({\r\n            id: id,\r\n            pt: pt,\r\n            arc_length: arc_length,\r\n            edge_before: edge,\r\n            edge_after: undefined,\r\n            face: edge.face,\r\n            is_vertex: is_vertex\r\n        });\r\n    }\r\n\r\n    static sortIntersections(intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        // augment intersections with new sorted arrays\r\n        // intersections.int_points1_sorted = intersections.int_points1.slice().sort(BooleanOp.compareFn);\r\n        // intersections.int_points2_sorted = intersections.int_points2.slice().sort(BooleanOp.compareFn);\r\n        intersections.int_points1_sorted = BooleanOp.getSortedArray(intersections.int_points1);\r\n        intersections.int_points2_sorted = BooleanOp.getSortedArray(intersections.int_points2);\r\n    }\r\n\r\n    static getSortedArray(int_points) {\r\n        let faceMap = new Map;\r\n        let id = 0;\r\n        // Create integer id's for faces\r\n        for (let ip of int_points) {\r\n            if (!faceMap.has(ip.face)) {\r\n                faceMap.set(ip.face, id);\r\n                id++;\r\n            }\r\n        }\r\n        // Augment intersection points with face id's\r\n        for (let ip of int_points) {\r\n            ip.faceId = faceMap.get(ip.face);\r\n        }\r\n        // Clone and sort\r\n        let int_points_sorted = int_points.slice().sort(BooleanOp.compareFn);\r\n        return int_points_sorted;\r\n    }\r\n\r\n    static compareFn(ip1, ip2) {\r\n        // compare face id's\r\n        if (ip1.faceId < ip2.faceId) {\r\n            return -1;\r\n        }\r\n        if (ip1.faceId > ip2.faceId) {\r\n            return 1;\r\n        }\r\n        // same face - compare arc_length\r\n        if (Flatten.Utils.LT(ip1.arc_length, ip2.arc_length)) {\r\n            return -1;\r\n        }\r\n        if (Flatten.Utils.GT(ip1.arc_length, ip2.arc_length)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static splitByIntersections(polygon, int_points) {\r\n        let {Polygon, Segment, Arc} = Flatten;\r\n        if (!int_points) return;\r\n        for (let int_point of int_points) {\r\n            let edge = int_point.edge_before;\r\n\r\n            // recalculate vertex flag: it may be changed after previous split\r\n            if (edge.shape.start.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= START_VERTEX;\r\n            }\r\n            if (edge.shape.end.equalTo(int_point.pt)) {\r\n                int_point.is_vertex |= END_VERTEX;\r\n            }\r\n\r\n            if (int_point.is_vertex & START_VERTEX) {  // nothing to split\r\n                int_point.edge_before = edge.prev;\r\n                int_point.is_vertex = END_VERTEX;\r\n                continue;\r\n            }\r\n            if (int_point.is_vertex & END_VERTEX) {    // nothing to split\r\n                continue;\r\n            }\r\n\r\n            let newEdge = polygon.addVertex(int_point.pt, edge);\r\n            int_point.edge_before = newEdge;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_after = int_point.edge_before.next;\r\n        }\r\n    }\r\n\r\n    static filterDuplicatedIntersections(intersections) {\r\n        if (intersections.int_points1.length < 2) return;\r\n\r\n        let do_squeeze = false;\r\n\r\n        let int_point_ref1 = intersections.int_points1_sorted[0];\r\n        let int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n        for (let i = 1; i < intersections.int_points1_sorted.length; i++) {\r\n            let int_point_cur1 = intersections.int_points1_sorted[i];\r\n\r\n            if (!Flatten.Utils.EQ(int_point_cur1.arc_length, int_point_ref1.arc_length)) {\r\n                int_point_ref1 = int_point_cur1;\r\n                int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n                continue;\r\n            }\r\n\r\n            /* Same length: int_point_cur1->arc_len == int_point_ref1->arc_len */\r\n            /* Ensure this is intersection between same edges from the same face */\r\n            let int_point_cur2 = intersections.int_points2[int_point_cur1.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        int_point_ref2 = intersections.int_points2_sorted[0];\r\n        int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n        for (let i = 1; i < intersections.int_points2_sorted.length; i++) {\r\n            let int_point_cur2 = intersections.int_points2_sorted[i];\r\n\r\n            if (int_point_cur2.id == -1) continue;\r\n            /* already deleted */\r\n\r\n            if (int_point_ref2.id == -1 || /* can't be reference if already deleted */\r\n                !(Flatten.Utils.EQ(int_point_cur2.arc_length, int_point_ref2.arc_length))) {\r\n                int_point_ref2 = int_point_cur2;\r\n                int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n                continue;\r\n            }\r\n\r\n            let int_point_cur1 = intersections.int_points1[int_point_cur2.id];\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n\r\n        if (do_squeeze) {\r\n            intersections.int_points1 = intersections.int_points1.filter((int_point) => int_point.id >= 0);\r\n            intersections.int_points2 = intersections.int_points2.filter((int_point) => int_point.id >= 0);\r\n\r\n            // update id's\r\n            intersections.int_points1.forEach((int_point, index) => int_point.id = index);\r\n            intersections.int_points2.forEach((int_point, index) => int_point.id = index);\r\n\r\n            // re-create sorted\r\n            intersections.int_points1_sorted = [];\r\n            intersections.int_points2_sorted = [];\r\n            BooleanOp.sortIntersections(intersections);\r\n        }\r\n    }\r\n\r\n    static removeNotRelevantNotIntersectedFaces(poly1, poly2, op, int_points1) {\r\n        let toBeDeleted = [];\r\n        for (let face of poly1.faces) {\r\n            if (!int_points1.find((ip) => ip.face === face)) {\r\n                let rel = face.getRelation(poly2);\r\n                if (op === Flatten.BOOLEAN_UNION && rel === Flatten.INSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n                else if (op === Flatten.BOOLEAN_INTERSECT && rel === Flatten.OUTSIDE) {\r\n                    toBeDeleted.push(face);\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < toBeDeleted.length; i++) {\r\n            poly1.deleteFace(toBeDeleted[i]);\r\n        }\r\n    }\r\n\r\n    static initializeInclusionFlags(int_points) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvStart = undefined;\r\n            int_point.edge_before.bvEnd = undefined;\r\n            int_point.edge_before.bv = undefined;\r\n            int_point.edge_before.overlap = undefined;\r\n\r\n            int_point.edge_after.bvStart = undefined;\r\n            int_point.edge_after.bvEnd = undefined;\r\n            int_point.edge_after.bv = undefined;\r\n            int_point.edge_after.overlap = undefined;\r\n        }\r\n\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.bvEnd = Flatten.BOUNDARY;\r\n            int_point.edge_after.bvStart = Flatten.BOUNDARY;\r\n        }\r\n    }\r\n\r\n    static calculateInclusionFlags(int_points, polygon) {\r\n        for (let int_point of int_points) {\r\n            int_point.edge_before.setInclusion(polygon);\r\n            int_point.edge_after.setInclusion(polygon);\r\n        }\r\n    }\r\n\r\n    static setOverlappingFlags(intersections) {\r\n        let cur_face = undefined;\r\n        let first_int_point_in_face = undefined;\r\n        let next_int_point1 = undefined;\r\n        let num_int_points = intersections.int_points1.length;\r\n\r\n        for (let i = 0; i < num_int_points; i++) {\r\n            let cur_int_point1 = intersections.int_points1_sorted[i];\r\n\r\n            // Find boundary chain in the polygon1\r\n            if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n                first_int_point_in_face = i;\r\n                cur_face = cur_int_point1.face;\r\n            }\r\n\r\n            if (i + 1 === num_int_points) {                                         // last int point in array\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else if (intersections.int_points1_sorted[i + 1].face !== cur_face) {   // last int point in chain\r\n                next_int_point1 = first_int_point_in_face;\r\n            }\r\n            else {                                                                // not a last point in chain\r\n                next_int_point1 = intersections.int_points1_sorted[i + 1];\r\n            }\r\n\r\n            let edge_from1 = cur_int_point1.edge_after;\r\n            let edge_to1 = next_int_point1.edge_before;\r\n\r\n            if (!(edge_from1.bv === Flatten.BOUNDARY && edge_to1.bv === Flatten.BOUNDARY))      // not a boundary chain - skip\r\n                continue;\r\n\r\n            if (edge_from1 !== edge_to1)                    //  one edge chain    TODO: support complex case\r\n                continue;\r\n\r\n\r\n            /* Find boundary chain in polygon2 between same intersection points */\r\n            let cur_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n            let next_int_point2 = intersections.int_points2[next_int_point1.id];\r\n\r\n            let edge_from2 = cur_int_point2.edge_after;\r\n            let edge_to2 = next_int_point2.edge_before;\r\n\r\n            /* if [edge_from2..edge_to2] is not a boundary chain, invert it */\r\n            /* check also that chain consist of one or two edges */\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2)) {\r\n                cur_int_point2 = intersections.int_points2[next_int_point1.id];\r\n                next_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n\r\n                edge_from2 = cur_int_point2.edge_after;\r\n                edge_to2 = next_int_point2.edge_before;\r\n            }\r\n\r\n            if (!(edge_from2.bv === Flatten.BOUNDARY && edge_to2.bv === Flatten.BOUNDARY && edge_from2 === edge_to2))\r\n                continue;                           // not an overlapping chain - skip   TODO: fix boundary conflict\r\n\r\n            // Set overlapping flag - one-to-one case\r\n            // let flag = BooleanOp.edge2edgeOverlappingFlag(edge_from1.shape, edge_from2.shape);\r\n            edge_from1.setOverlap(edge_from2);\r\n\r\n            // if (edge_from1.overlap === undefined) edge_from1.overlap = flag;\r\n            // if (edge_from2.overlap === undefined) edge_from2.overlap = flag;\r\n        }\r\n    }\r\n\r\n    // static edge2edgeOverlappingFlag(shape1, shape2) {\r\n    //     let flag = undefined;\r\n    //     if (shape1 instanceof Segment && shape2 instanceof Segment) {\r\n    //         if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\r\n    //             flag = Flatten.OVERLAP_SAME;\r\n    //         }\r\n    //         else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\r\n    //             flag = Flatten.OVERLAP_OPPOSITE;\r\n    //         }\r\n    //     }\r\n    //     else if (shape1 instanceof Arc && shape2 instanceof Arc) {\r\n    //         if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.counterClockwise === shape2.counterClockwise &&\r\n    //             shape1.middle().equalTo(shape2.middle())) {\r\n    //             flag = Flatten.OVERLAP_SAME;\r\n    //         }\r\n    //         else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.counterClockwise !== shape2.counterClockwise &&\r\n    //             shape1.middle().equalTo(shape2.middle())) {\r\n    //             flag = Flatten.OVERLAP_OPPOSITE;\r\n    //         }\r\n    //     }\r\n    //     else if (shape1 instanceof Segment && shape2 instanceof Arc ||\r\n    //         shape1 instanceof Arc && shape2 instanceof Segment) {\r\n    //         if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\r\n    //             flag = Flatten.OVERLAP_SAME;\r\n    //         }\r\n    //         else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\r\n    //             flag = Flatten.OVERLAP_OPPOSITE;\r\n    //         }\r\n    //     }\r\n    //     return flag;\r\n    // }\r\n\r\n    static removeNotRelevantChains(polygon, op, int_points, is_res_polygon) {\r\n        if (!int_points) return;\r\n        for (let i = 0; i < int_points.length; i++) {\r\n            // TODO: Support claster of duplicated points with same <x,y> came from different faces\r\n\r\n            let int_point_current = int_points[i];\r\n            // Get next int point from the same face that current\r\n            let int_point_next;\r\n            if (i < int_points.length - 1 && int_points[i + 1].face === int_point_current.face) {\r\n                int_point_next = int_points[i + 1];   // get next point from same face\r\n            }\r\n            else {                                  // get first point from the same face\r\n                for (int_point_next of int_points) {\r\n                    if (int_point_next.face === int_point_current.face) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let edge_from = int_point_current.edge_after;\r\n            let edge_to = int_point_next.edge_before;\r\n\r\n            let face = int_point_current.face;\r\n\r\n            if ((edge_from.bv === Flatten.INSIDE && edge_to.bv === Flatten.INSIDE && op === Flatten.BOOLEAN_UNION) ||\r\n                (edge_from.bv === Flatten.OUTSIDE && edge_to.bv === Flatten.OUTSIDE && op === Flatten.BOOLEAN_INTERSECT) ||\r\n                ((edge_from.bv === Flatten.OUTSIDE || edge_to.bv === Flatten.OUTSIDE) && op === Flatten.BOOLEAN_SUBTRACT && !is_res_polygon) ||\r\n                ((edge_from.bv === Flatten.INSIDE || edge_to.bv === Flatten.INSIDE) && op === Flatten.BOOLEAN_SUBTRACT && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_SAME) && is_res_polygon) ||\r\n                (edge_from.bv === Flatten.BOUNDARY && edge_to.bv === Flatten.BOUNDARY && (edge_from.overlap & Flatten.OVERLAP_OPPOSITE) )) {\r\n\r\n                polygon.removeChain(face, edge_from, edge_to);\r\n\r\n                int_point_current.edge_after = undefined;\r\n                int_point_next.edge_before = undefined;\r\n            }\r\n        }\r\n    };\r\n\r\n    static copyWrkToRes(res_polygon, wrk_polygon, op, int_points) {\r\n        for (let face of wrk_polygon.faces) {\r\n            for (let edge of face) {\r\n                res_polygon.edges.add(edge);\r\n            }\r\n            // If union - add face from wrk_polygon that is not intersected with res_polygon\r\n            if (op === Flatten.BOOLEAN_UNION &&\r\n                int_points && int_points.find((ip) => (ip.face === face)) === undefined) {\r\n                res_polygon.addFace(face.first, face.last);\r\n            }\r\n        }\r\n    }\r\n\r\n    static swapLinks(res_polygon, wrk_polygon, intersections) {\r\n        if (intersections.int_points1.length === 0) return;\r\n\r\n        for (let i = 0; i < intersections.int_points1.length; i++) {\r\n            let int_point1 = intersections.int_points1[i];\r\n            let int_point2 = intersections.int_points2[i];\r\n\r\n            // Simple case - find continuation on the other polygon\r\n\r\n            // Process edge from res_polygon\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // swap need\r\n                if (int_point2.edge_before === undefined && int_point2.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point1.edge_before.next = int_point2.edge_after;\r\n                    int_point2.edge_after.prev = int_point1.edge_before;\r\n\r\n                    // Fill in missed links in intersection points\r\n                    int_point1.edge_after = int_point2.edge_after;\r\n                    int_point2.edge_before = int_point1.edge_before;\r\n                }\r\n            }\r\n            // Process edge from wrk_polygon\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // swap need\r\n                if (int_point1.edge_before === undefined && int_point1.edge_after !== undefined) {  // simple case\r\n                    // Connect edges\r\n                    int_point2.edge_before.next = int_point1.edge_after;\r\n                    int_point1.edge_after.prev = int_point2.edge_before;\r\n\r\n                    // Complete missed links\r\n                    int_point2.edge_after = int_point1.edge_after;\r\n                    int_point1.edge_before = int_point2.edge_before;\r\n                }\r\n            }\r\n\r\n            // Continuation not found - complex case\r\n            // Continuation will be found on the same polygon.\r\n            // It happens when intersection point is actually touching point\r\n            // Polygon1\r\n            if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points1_sorted) {\r\n                    if (int_point === int_point1) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point1.pt)) {\r\n                            // Connect edges\r\n                            int_point1.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point1.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point1.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point1.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Polygon2\r\n            if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // still swap need\r\n                for (let int_point of intersections.int_points2_sorted) {\r\n                    if (int_point === int_point2) continue;     // skip same\r\n                    if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                        if (int_point.pt.equalTo(int_point2.pt)) {\r\n                            // Connect edges\r\n                            int_point2.edge_before.next = int_point.edge_after;\r\n                            int_point.edge_after.prev = int_point2.edge_before;\r\n\r\n                            // Complete missed links\r\n                            int_point2.edge_after = int_point.edge_after;\r\n                            int_point.edge_before = int_point2.edge_before;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Sanity check that no dead ends left\r\n    }\r\n\r\n    static removeOldFaces(polygon, int_points) {\r\n        for (let int_point of int_points) {\r\n            polygon.faces.delete(int_point.face);\r\n            int_point.face = undefined;\r\n            if (int_point.edge_before)\r\n                int_point.edge_before.face = undefined;\r\n            if (int_point.edge_after)\r\n                int_point.edge_after.face = undefined;\r\n        }\r\n    }\r\n\r\n    static restoreFaces(polygon, int_points, other_int_points) {\r\n        // For each intersection point - create new chain\r\n        for (let int_point of int_points) {\r\n            if (int_point.edge_before === undefined || int_point.edge_after === undefined)  // completely deleted\r\n                continue;\r\n            if (int_point.face)            // already restored\r\n                continue;\r\n\r\n            if (int_point.edge_after.face || int_point.edge_before.face)        // Chain already created. Possible case in duplicated intersection points\r\n                continue;\r\n\r\n            let first = int_point.edge_after;      // face start\r\n            let last = int_point.edge_before;      // face end;\r\n\r\n            let face = polygon.addFace(first, last);\r\n\r\n            // Mark intersection points from the newly create face\r\n            // to avoid multiple creation of the same face\r\n            // Chain number was assigned to each edge of new face in addFace function\r\n            for (let int_point_tmp of int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n            // Mark other intersection points as well\r\n            for (let int_point_tmp of other_int_points) {\r\n                if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                    int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                    int_point_tmp.face = face;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = BooleanOp;"],"sourceRoot":""}